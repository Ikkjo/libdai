/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.12
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */


#ifndef SWIGOCTAVE
#define SWIGOCTAVE
#endif

#define SWIG_name_d      "dai"
#define SWIG_name        dai

#define SWIG_global_name      "cvar"
#define SWIG_op_prefix        "op_"


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif



#include <cstdlib>
#include <iostream>

#include <octave/oct.h>
#include <octave/version.h>

// Macro for enabling features which require Octave version >= major.minor.patch
// - Use (OCTAVE_PATCH_VERSION + 0) to handle both '<digit>' (released) and '<digit>+' (in development) patch numbers
#define SWIG_OCTAVE_PREREQ(major, minor, patch) \
  ( (OCTAVE_MAJOR_VERSION<<16) + (OCTAVE_MINOR_VERSION<<8) + (OCTAVE_PATCH_VERSION + 0) >= ((major)<<16) + ((minor)<<8) + (patch) )

// Reconstruct Octave major, minor, and patch versions for releases prior to 3.8.1
#if !defined(OCTAVE_MAJOR_VERSION)

# if !defined(OCTAVE_API_VERSION_NUMBER)

// Hack to distinguish between Octave 3.8.0, which removed OCTAVE_API_VERSION_NUMBER but did not yet
// introduce OCTAVE_MAJOR_VERSION, and Octave <= 3.2, which did not define OCTAVE_API_VERSION_NUMBER
#  include <octave/ov.h>
#  if defined(octave_ov_h)
#   define OCTAVE_MAJOR_VERSION 3
#   define OCTAVE_MINOR_VERSION 8
#   define OCTAVE_PATCH_VERSION 0
#  else

// Hack to distinguish between Octave 3.2 and earlier versions, before OCTAVE_API_VERSION_NUMBER existed
#   define ComplexLU __ignore
#   include <octave/CmplxLU.h>
#   undef ComplexLU
#   if defined(octave_Complex_LU_h)

// We know only that this version is prior to Octave 3.2, i.e. OCTAVE_API_VERSION_NUMBER < 37
#    define OCTAVE_MAJOR_VERSION 3
#    define OCTAVE_MINOR_VERSION 1
#    define OCTAVE_PATCH_VERSION 99

#   else

// OCTAVE_API_VERSION_NUMBER == 37
#    define OCTAVE_MAJOR_VERSION 3
#    define OCTAVE_MINOR_VERSION 2
#    define OCTAVE_PATCH_VERSION 0

#   endif // defined(octave_Complex_LU_h)

#  endif // defined(octave_ov_h)

// Correlation between Octave API and version numbers extracted from Octave's
// ChangeLogs; version is the *earliest* released Octave with that API number
# elif OCTAVE_API_VERSION_NUMBER >= 48
#  define OCTAVE_MAJOR_VERSION 3
#  define OCTAVE_MINOR_VERSION 6
#  define OCTAVE_PATCH_VERSION 0

# elif OCTAVE_API_VERSION_NUMBER >= 45
#  define OCTAVE_MAJOR_VERSION 3
#  define OCTAVE_MINOR_VERSION 4
#  define OCTAVE_PATCH_VERSION 1

# elif OCTAVE_API_VERSION_NUMBER >= 42
#  define OCTAVE_MAJOR_VERSION 3
#  define OCTAVE_MINOR_VERSION 3
#  define OCTAVE_PATCH_VERSION 54

# elif OCTAVE_API_VERSION_NUMBER >= 41
#  define OCTAVE_MAJOR_VERSION 3
#  define OCTAVE_MINOR_VERSION 3
#  define OCTAVE_PATCH_VERSION 53

# elif OCTAVE_API_VERSION_NUMBER >= 40
#  define OCTAVE_MAJOR_VERSION 3
#  define OCTAVE_MINOR_VERSION 3
#  define OCTAVE_PATCH_VERSION 52

# elif OCTAVE_API_VERSION_NUMBER >= 39
#  define OCTAVE_MAJOR_VERSION 3
#  define OCTAVE_MINOR_VERSION 3
#  define OCTAVE_PATCH_VERSION 51

# else // OCTAVE_API_VERSION_NUMBER == 38
#  define OCTAVE_MAJOR_VERSION 3
#  define OCTAVE_MINOR_VERSION 3
#  define OCTAVE_PATCH_VERSION 50

# endif // !defined(OCTAVE_API_VERSION_NUMBER)

#endif // !defined(OCTAVE_MAJOR_VERSION)

#include <octave/Cell.h>
#include <octave/dynamic-ld.h>
#include <octave/oct-env.h>
#include <octave/oct-map.h>
#include <octave/ov-scalar.h>
#include <octave/ov-fcn-handle.h>
#include <octave/parse.h>
#if SWIG_OCTAVE_PREREQ(4,2,0)
#include <octave/interpreter.h>
#else
#include <octave/toplev.h>
#endif
#include <octave/unwind-prot.h>
#if SWIG_OCTAVE_PREREQ(4,2,0)
#include <octave/call-stack.h>
#endif


/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.

  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/*
   Flags/methods for returning states.

   The SWIG conversion methods, as ConvertPtr, return an integer
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).

   Use the following macros/flags to set or process the returning
   states.

   In old versions of SWIG, code such as the following was usually written:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   which is the same really, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }

   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

      int SWIG_ConvertPtr(obj, ptr,...) {
        if (<obj is ok>) {
          if (<need new object>) {
            *ptr = <ptr to new allocated object>;
            return SWIG_NEWOBJ;
          } else {
            *ptr = <ptr to old object>;
            return SWIG_OLDOBJ;
          }
        } else {
          return SWIG_BADOBJ;
        }
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows to return the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call

      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK                    (0)
#define SWIG_ERROR                 (-1)
#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) {
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) {
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0;
}
#else /* no cast-rank mode */
#  define SWIG_AddCast(r) (r)
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif


#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/*
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCmp(const char *nb, const char *tb) {
  int equiv = 1;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (equiv != 0 && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = SWIG_TypeNameComp(nb, ne, tb, te);
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  return SWIG_TypeCmp(nb, tb) == 0 ? 1 : 0;
}

/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(iter->type->name, c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(swig_type_info *from, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (iter->type == from) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/*
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/*
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;

  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}

/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start,
                            swig_module_info *end,
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      size_t l = 0;
      size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	size_t i = (l + r) >> 1;
	const char *iname = iter->types[i]->name;
	if (iname) {
	  int compare = strcmp(name, iname);
	  if (compare == 0) {
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start,
                     swig_module_info *end,
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }

  /* neither found a match */
  return 0;
}

/*
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  const unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/*
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    char d = *(c++);
    unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = (unsigned char)((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = (unsigned char)((d - ('a'-10)) << 4);
    else
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (unsigned char)(d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (unsigned char)(d - ('a'-10));
    else
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/*
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13



#if !SWIG_OCTAVE_PREREQ(3,2,0)
#define SWIG_DEFUN(cname, wname, doc) DEFUNX_DLD(#cname, wname, FS ## cname, args, nargout, doc)
#else
#define SWIG_DEFUN(cname, wname, doc) DEFUNX_DLD(#cname, wname, G ## cname, args, nargout, doc)
#endif

SWIGRUNTIME bool SWIG_check_num_args(const char *func_name, int num_args, int max_args, int min_args, int varargs) {
  if (num_args > max_args && !varargs)
    error("function %s takes at most %i arguments", func_name, max_args);
  else if (num_args < min_args)
    error("function %s requires at least %i arguments", func_name, min_args);
  else
    return true;
  return false;
}

SWIGRUNTIME octave_value_list *SWIG_Octave_AppendOutput(octave_value_list *ovl, const octave_value &ov) {
  ovl->append(ov);
  return ovl;
}

SWIGRUNTIME octave_value SWIG_ErrorType(int code) {
  switch (code) {
  case SWIG_MemoryError:
    return "SWIG_MemoryError";
  case SWIG_IOError:
    return "SWIG_IOError";
  case SWIG_RuntimeError:
    return "SWIG_RuntimeError";
  case SWIG_IndexError:
    return "SWIG_IndexError";
  case SWIG_TypeError:
    return "SWIG_TypeError";
  case SWIG_DivisionByZero:
    return "SWIG_DivisionByZero";
  case SWIG_OverflowError:
    return "SWIG_OverflowError";
  case SWIG_SyntaxError:
    return "SWIG_SyntaxError";
  case SWIG_ValueError:
    return "SWIG_ValueError";
  case SWIG_SystemError:
    return "SWIG_SystemError";
  case SWIG_AttributeError:
    return "SWIG_AttributeError";
  }
  return "SWIG unknown error";
}

SWIGRUNTIME octave_value SWIG_Error(int code, const char *msg) {
  octave_value type(SWIG_ErrorType(code));
  std::string r = msg;
  r += " (" + type.string_value() + ")";
  error(r.c_str());
  return octave_value(r);
}

#define SWIG_fail                                       goto fail

#define SWIG_Octave_ConvertPtr(obj, pptr, type, flags)  SWIG_Octave_ConvertPtrAndOwn(obj, pptr, type, flags, 0)
#define SWIG_ConvertPtr(obj, pptr, type, flags)         SWIG_Octave_ConvertPtr(obj, pptr, type, flags)
#define SWIG_ConvertPtrAndOwn(obj,pptr,type,flags,own)  SWIG_Octave_ConvertPtrAndOwn(obj, pptr, type, flags, own)
#define SWIG_ConvertPtr(obj, pptr, type, flags)         SWIG_Octave_ConvertPtr(obj, pptr, type, flags)
#define SWIG_NewPointerObj(ptr, type, flags)            SWIG_Octave_NewPointerObj(ptr, type, flags)
#define swig_owntype                                    int

#define SWIG_ConvertPacked(obj, ptr, sz, ty)            SWIG_Octave_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewPackedObj(ptr, sz, type)                SWIG_Octave_NewPackedObj(ptr, sz, type)

#define SWIG_ConvertFunctionPtr(obj, pptr, type)        SWIG_ConvertPtr(obj, pptr, type, 0)
#define SWIG_NewFunctionPtrObj(ptr, type)               SWIG_NewPointerObj(ptr, type, 0)

#define SWIG_ConvertMember(obj, ptr, sz, ty)            SWIG_Octave_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewMemberObj(ptr, sz, type)                SWIG_Octave_NewPackedObj(ptr, sz, type)

#define SWIG_GetModule(clientdata) SWIG_Octave_GetModule(clientdata)
#define SWIG_SetModule(clientdata, pointer) SWIG_Octave_SetModule(clientdata,pointer);
#define SWIG_MODULE_CLIENTDATA_TYPE void*

#define Octave_Error_Occurred() 0
#define SWIG_Octave_AddErrorMsg(msg) {;}

SWIGRUNTIME swig_module_info *SWIG_Octave_GetModule(void *clientdata);
SWIGRUNTIME void SWIG_Octave_SetModule(void *clientdata, swig_module_info *pointer);

// For backward compatibility only
#define SWIG_POINTER_EXCEPTION  0
#define SWIG_arg_fail(arg)      0

// Runtime API implementation

#include <map>
#include <vector>
#include <string>

typedef octave_value_list(*octave_func) (const octave_value_list &, int);
class octave_swig_type;

namespace Swig {

#ifdef SWIG_DIRECTORS

  class Director;

  typedef std::map < void *, Director * > rtdir_map;
  SWIGINTERN rtdir_map* get_rtdir_map();
  SWIGINTERNINLINE void set_rtdir(void *vptr, Director *d);
  SWIGINTERNINLINE void erase_rtdir(void *vptr);
  SWIGINTERNINLINE Director *get_rtdir(void *vptr);

  SWIGRUNTIME void swig_director_destroyed(octave_swig_type *self, Director *d);
  SWIGRUNTIME octave_swig_type *swig_director_get_self(Director *d);
  SWIGRUNTIME void swig_director_set_self(Director *d, octave_swig_type *self);

#endif

  SWIGRUNTIME octave_base_value *swig_value_ref(octave_swig_type *ost);
  SWIGRUNTIME octave_swig_type *swig_value_deref(octave_value ov);
  SWIGRUNTIME octave_swig_type *swig_value_deref(const octave_base_value &ov);
}

#ifdef SWIG_DIRECTORS
SWIGRUNTIME void swig_acquire_ownership(void *vptr);
SWIGRUNTIME void swig_acquire_ownership_array(void *vptr);
SWIGRUNTIME void swig_acquire_ownership_obj(void *vptr, int own);
#endif

  struct swig_octave_member {
    const char *name;
    octave_func method;
    octave_func get_method;
    octave_func set_method;
    int flags;			// 1 static, 2 global
    const char *doc;
    bool is_static() const {
      return flags &1;
    } bool is_global() const {
      return flags &2;
    }
  };

  struct swig_octave_class {
    const char *name;
    swig_type_info **type;
    int director;
    octave_func constructor;
    const char *constructor_doc;
    octave_func destructor;
    const swig_octave_member *members;
    const char **base_names;
    const swig_type_info **base;
  };

  // octave_swig_type plays the role of both the shadow class and the class 
  // representation within Octave, since there is no support for classes.
  //
  // These should really be decoupled, with the class support added to Octave
  // and the shadow class given by an m-file script. That would dramatically 
  // reduce the runtime complexity, and be more in line w/ other modules.

  class octave_swig_type:public octave_base_value {
    struct cpp_ptr {
      void *ptr;
      bool destroyed;
      cpp_ptr(void *_ptr):ptr(_ptr), destroyed(false) {
      }};
    typedef std::pair < const swig_type_info *, cpp_ptr > type_ptr_pair;

    mutable swig_module_info *module;

    const swig_type_info *construct_type;	// type of special type object
    std::vector < type_ptr_pair > types;	// our c++ base classes
    int own;			// whether we call c++ destructors when we die

    typedef std::pair < const swig_octave_member *, octave_value > member_value_pair;
    typedef std::map < std::string, member_value_pair > member_map;
    member_map members;
    bool always_static;

    const swig_octave_member *find_member(const swig_type_info *type, const std::string &name) {
      if (!type->clientdata)
	return 0;
      swig_octave_class *c = (swig_octave_class *) type->clientdata;
      const swig_octave_member *m;
      for (m = c->members; m->name; ++m)
	if (m->name == name)
	  return m;
      for (int j = 0; c->base_names[j]; ++j) {
	if (!c->base[j]) {
	  if (!module)
	    module = SWIG_GetModule(0);
	  assert(module);
	  c->base[j] = SWIG_MangledTypeQueryModule(module, module, c->base_names[j]);
	}
	if (!c->base[j])
	  return 0;
	if ((m = find_member(c->base[j], name)))
	  return m;
      }
      return 0;
    }

    member_value_pair *find_member(const std::string &name, bool insert_if_not_found) {
      member_map::iterator it = members.find(name);
      if (it != members.end())
	return &it->second;
      const swig_octave_member *m;
      for (unsigned int j = 0; j < types.size(); ++j)
	if ((m = find_member(types[j].first, name)))
	  return &members.insert(std::make_pair(name, std::make_pair(m, octave_value()))).first->second;
      if (!insert_if_not_found)
	return 0;
      return &members[name];
    }

    const swig_type_info *find_base(const std::string &name, const swig_type_info *base) {
      if (!base) {
	for (unsigned int j = 0; j < types.size(); ++j) {
	  assert(types[j].first->clientdata);
	  swig_octave_class *cj = (swig_octave_class *) types[j].first->clientdata;
	  if (cj->name == name)
	    return types[j].first;
	}
	return 0;
      }
      assert(base->clientdata);
      swig_octave_class *c = (swig_octave_class *) base->clientdata;
      for (int j = 0; c->base_names[j]; ++j) {
	if (!c->base[j]) {
	  if (!module)
	    module = SWIG_GetModule(0);
	  assert(module);
	  c->base[j] = SWIG_MangledTypeQueryModule(module, module, c->base_names[j]);
	}
	if (!c->base[j])
	  return 0;
	assert(c->base[j]->clientdata);
	swig_octave_class *cj = (swig_octave_class *) c->base[j]->clientdata;
	if (cj->name == name)
	  return c->base[j];
      }
      return 0;
    }

    void load_members(const swig_octave_class* c,member_map& out) const {
      for (const swig_octave_member *m = c->members; m->name; ++m) {
	if (out.find(m->name) == out.end())
	  out.insert(std::make_pair(m->name, std::make_pair(m, octave_value())));
      }
      for (int j = 0; c->base_names[j]; ++j) {
	if (!c->base[j]) {
	  if (!module)
	    module = SWIG_GetModule(0);
	  assert(module);
	  c->base[j] = SWIG_MangledTypeQueryModule(module, module, c->base_names[j]);
	}
	if (!c->base[j])
	  continue;
	assert(c->base[j]->clientdata);
	const swig_octave_class *cj =
	  (const swig_octave_class *) c->base[j]->clientdata;
	load_members(cj,out);
      }
    }

    void load_members(member_map& out) const {
      out=members;
      for (unsigned int j = 0; j < types.size(); ++j)
	if (types[j].first->clientdata)
	  load_members((const swig_octave_class *) types[j].first->clientdata, out);
    }

    octave_value_list member_invoke(member_value_pair *m, const octave_value_list &args, int nargout) {
      if (m->second.is_defined())
	return m->second.subsref("(", std::list < octave_value_list > (1, args), nargout);
      else if (m->first && m->first->method)
	return m->first->method(args, nargout);
      error("member not defined or not invocable");
      return octave_value_list();
    }

    bool dispatch_unary_op(const std::string &symbol, octave_value &ret) const {
      octave_swig_type *nc_this = const_cast < octave_swig_type *>(this);
      member_value_pair *m = nc_this->find_member(symbol, false);
      if (!m || m->first->is_static() || m->first->is_global())
	return false;
      octave_value_list args;
      args.append(nc_this->as_value());
      octave_value_list argout(nc_this->member_invoke(m, args, 1));
      if (argout.length() < 1)
	return false;
      ret = argout(0);
      return true;
    }

    bool dispatch_binary_op(const std::string &symbol, const octave_base_value &rhs, octave_value &ret) const {
      octave_swig_type *nc_this = const_cast < octave_swig_type *>(this);
      member_value_pair *m = nc_this->find_member(symbol, false);
      if (!m || m->first->is_static() || m->first->is_global())
	return false;
      octave_value_list args;
      args.append(nc_this->as_value());
      args.append(make_value_hack(rhs));
      octave_value_list argout(nc_this->member_invoke(m, args, 1));
      if (argout.length() < 1)
	return false;
      ret = argout(0);
      return true;
    }

    bool dispatch_index_op(const std::string &symbol, const octave_value_list &rhs, octave_value_list &ret) const {
      octave_swig_type *nc_this = const_cast < octave_swig_type *>(this);
      member_value_pair *m = nc_this->find_member(symbol, false);
      if (!m || m->first->is_static() || m->first->is_global())
	return false;
      octave_value_list args;
      args.append(nc_this->as_value());
      args.append(rhs);
      octave_value_list argout(nc_this->member_invoke(m, args, 1));
      if (argout.length() >= 1)
	ret = argout(0);
      return true;
    }

    octave_value_list member_deref(member_value_pair *m, const octave_value_list &args) {
      if (m->second.is_defined())
	return m->second;
      else if (m->first) {
	if (m->first->get_method)
	  return m->first->get_method(args, 1);
	else if (m->first->method)
	  return octave_value(new octave_builtin(m->first->method));
      }
      error("undefined member");
      return octave_value_list();
    }

    static octave_value make_value_hack(const octave_base_value &x) {
      ((octave_swig_type &) x).count++;
      return octave_value((octave_base_value *) &x);
    }

    octave_swig_type(const octave_swig_type &x);
    octave_swig_type &operator=(const octave_swig_type &rhs);
  public:

    octave_swig_type(void *_ptr = 0, const swig_type_info *_type = 0, int _own = 0,
		     bool _always_static = false)
      :	module(0), construct_type(_ptr ? 0 : _type), own(_own), 
      always_static(_always_static) {
      if (_type || _ptr)
	types.push_back(std::make_pair(_type, _ptr));
#ifdef SWIG_DIRECTORS
      if (_ptr) {
	Swig::Director *d = Swig::get_rtdir(_ptr);
	if (d)
	  Swig::swig_director_set_self(d, this);
      }
#endif
    }

    ~octave_swig_type() {
      if (own) {
	++count;
	for (unsigned int j = 0; j < types.size(); ++j) {
	  if (!types[j].first || !types[j].first->clientdata)
	    continue;
	  swig_octave_class *c = (swig_octave_class *) types[j].first->clientdata;
	  if (c->destructor && !types[j].second.destroyed && types[j].second.ptr) {
	    c->destructor(as_value(), 0);
	  }
	}
      }
#ifdef SWIG_DIRECTORS
      for (unsigned int j = 0; j < types.size(); ++j)
	Swig::erase_rtdir(types[j].second.ptr);
#endif
    }

    dim_vector dims(void) const {
      octave_value out;
      if (!dispatch_unary_op("__dims__", out))
        return dim_vector(1,1);

      // Return value should be cell or matrix of integers
      if (out.is_cell()) {
        const Cell & c=out.cell_value();
        int ndim = c.rows();
        if (ndim==1 && c.columns()!=1) ndim = c.columns();

        dim_vector d;
        d.resize(ndim < 2 ? 2 : ndim);
        d(0) = d(1) = 1;

        // Fill in dim_vector 
        for (int k=0;k<ndim;k++) {
          const octave_value& obj = c(k);
          d.elem(k) = obj.int_value();
          
          // __dims__ should return a cell filled with integers
          if (error_state) return dim_vector(1,1);
        }
        return d;
      } else if (out.is_matrix_type() || out.is_numeric_type() ) {
        if (out.rows()==1 || out.columns()==1) {
           Array<int> a = out.int_vector_value();
           if (error_state) return dim_vector(1,1);
           dim_vector d;
           d.resize(a.numel() < 2 ? 2 : a.numel());
           d(0) = d(1) = 1;
           for (int k=0;k<a.numel();k++) {
              d.elem(k) = a(k);
           }
           return d;
        } else {
          return dim_vector(1,1);
        }
      } else {
        return dim_vector(1,1);
      }
    }

    octave_value as_value() {
      ++count;
      return Swig::swig_value_ref(this);
    }

    void incref() {
      ++count;
    }

    void decref() {
      if (!--count)
	delete this;
    }

    long swig_this() const {
      if (!types.size())
	return (long) this;
      return (long) types[0].second.ptr;
    }
    const char* help_text() const {
      if (!types.size())
	return 0;
      if (!types[0].first->clientdata)
	return 0;
      swig_octave_class *c = (swig_octave_class *) types[0].first->clientdata;
      return c->constructor_doc;
    }

    std::string swig_type_name() const {
      // * need some way to manually name subclasses.
      // * eg optional first arg to subclass(), or named_subclass()
      std::string ret;
      for (unsigned int j = 0; j < types.size(); ++j) {
	if (j)
	  ret += "_";
	if (types[j].first->clientdata) {
	  swig_octave_class *c = (swig_octave_class *) types[j].first->clientdata;
	  ret += c->name;
	} else
	  ret += types[j].first->name;
      }
      return ret;
    }

    void merge(octave_swig_type &rhs) {
      rhs.own = 0;
      for (unsigned int j = 0; j < rhs.types.size(); ++j) {
	assert(!rhs.types[j].second.destroyed);
#ifdef SWIG_DIRECTORS
	Swig::Director *d = Swig::get_rtdir(rhs.types[j].second.ptr);
	if (d)
	  Swig::swig_director_set_self(d, this);
#endif
      }
      types.insert(types.end(), rhs.types.begin(), rhs.types.end());
      members.insert(rhs.members.begin(), rhs.members.end());
      rhs.types.clear();
      rhs.members.clear();
    }

    typedef member_map::const_iterator swig_member_const_iterator;
    swig_member_const_iterator swig_members_begin() { return members.begin(); }
    swig_member_const_iterator swig_members_end() { return members.end(); }

    int cast(void **vptr, swig_type_info *type, int *_own, int flags) {
      int res = SWIG_ERROR;
      if (_own)
	*_own = own;
      if (flags &SWIG_POINTER_DISOWN)
	own = 0;
      if (!type && types.size()) {
	if(vptr)
          *vptr = types[0].second.ptr;
        return SWIG_OK;
      }
      for (unsigned int j = 0; j < types.size(); ++j)
	if (type == types[j].first) {
	  if(vptr)
            *vptr = types[j].second.ptr;
          return SWIG_OK;
        }
      for (unsigned int j = 0; j < types.size(); ++j) {
	swig_cast_info *tc = SWIG_TypeCheck(types[j].first->name, type);
	if (!tc)
	  continue;
        if(vptr) {
	  int newmemory = 0;
	  *vptr = SWIG_TypeCast(tc, types[j].second.ptr, &newmemory);
	    if (newmemory == SWIG_CAST_NEW_MEMORY) {
              assert(_own); /* badly formed typemap which will lead to a memory leak - it must set and use own to delete *ptr */
              if (_own)
                *_own = *_own | SWIG_CAST_NEW_MEMORY;
            }
        }
        res = SWIG_OK;
        break;
      }
      return res;
    }

    bool is_owned() const {
      return own;
    }

#ifdef SWIG_DIRECTORS
    void director_destroyed(Swig::Director *d) {
      bool found = false;
      for (unsigned int j = 0; j < types.size(); ++j) {
	Swig::Director *dj = Swig::get_rtdir(types[j].second.ptr);
	if (dj == d) {
	  types[j].second.destroyed = true;
	  found = true;
	}
      }
      assert(found);
    }
#endif

    void assign(const std::string &name, const octave_value &ov) {
      members[name] = std::make_pair((const swig_octave_member *) 0, ov);
    }

    void assign(const std::string &name, const swig_octave_member *m) {
      members[name] = std::make_pair(m, octave_value());
    }

    octave_base_value *clone() const {
      // pass-by-value is probably not desired, and is harder;
      // requires calling copy constructors of contained types etc.
      assert(0);
      *(int *) 0 = 0;
      return 0;
    }

    octave_base_value *empty_clone() const {
      return new octave_swig_type();
    }

    bool is_defined() const {
      return true;
    }

    virtual bool is_map() const {
      return true;
    }

    virtual octave_value subsref(const std::string &ops, const std::list < octave_value_list > &idx) {
      octave_value_list ovl = subsref(ops, idx, 1);
      return ovl.length()? ovl(0) : octave_value();
    }

    virtual octave_value_list subsref(const std::string &ops, const std::list < octave_value_list > &idx, int nargout) {
      assert(ops.size() > 0);
      assert(ops.size() == idx.size());

      std::list < octave_value_list >::const_iterator idx_it = idx.begin();
      int skip = 0;
      octave_value_list sub_ovl;

      // constructor invocation
      if (ops[skip] == '(' && construct_type) {
	assert(construct_type->clientdata);
	swig_octave_class *c = (swig_octave_class *) construct_type->clientdata;
	if (!c->constructor) {
	  error("cannot create instance");
	  return octave_value_list();
	}
	octave_value_list args;
	if (c->director)
	  args.append(Swig::swig_value_ref(new octave_swig_type(this, 0, 0)));
	args.append(*idx_it++);
	++skip;
	sub_ovl = c->constructor(args, nargout);
      }
      // member dereference or invocation
      else if (ops[skip] == '.') {
	std::string subname;
	const swig_type_info *base = 0;	// eg, a.base.base_cpp_mem
	for (;;) {
	  octave_value_list subname_ovl(*idx_it++);
	  ++skip;
	  assert(subname_ovl.length() == 1 && subname_ovl(0).is_string());
	  subname = subname_ovl(0).string_value();

	  const swig_type_info *next_base = find_base(subname, base);
	  if (!next_base || skip >= (int) ops.size() || ops[skip] != '.')
	    break;
	  base = next_base;
	}

	member_value_pair tmp, *m = &tmp;
	if (!base || !(m->first = find_member(base, subname)))
	  m = find_member(subname, false);
	if (!m) {
	  error("member not found");
	  return octave_value_list();
	}

	octave_value_list args;
	if (!always_static &&
	    (!m->first || (!m->first->is_static() && !m->first->is_global())))
	  args.append(as_value());
	if (skip < (int) ops.size() && ops[skip] == '(' && 
	    ((m->first && m->first->method) || m->second.is_function() || 
	     m->second.is_function_handle())) {
	  args.append(*idx_it++);
	  ++skip;
	  sub_ovl = member_invoke(m, args, nargout);
	} else {
	  sub_ovl = member_deref(m, args);
	}
      }
      // index operator
      else {
	if (ops[skip] == '(' || ops[skip] == '{') {
	  const char *op_name = ops[skip] == '(' ? "__paren__" : "__brace__";
	  octave_value_list args;
	  args.append(*idx_it++);
	  ++skip;
	  if (!dispatch_index_op(op_name, args, sub_ovl)) {
	    error("error evaluating index operator");
	    return octave_value_list();
	  }
	} else {
	  error("unsupported subsref");
	  return octave_value_list();
	}
      }

      if (skip >= (int) ops.size())
	return sub_ovl;
      if (sub_ovl.length() < 1) {
	error("bad subs ref");
	return octave_value_list();
      }
      return sub_ovl(0).next_subsref(nargout, ops, idx, skip);
    }

    octave_value subsasgn(const std::string &ops, const std::list < octave_value_list > &idx, const octave_value &rhs) {
      assert(ops.size() > 0);
      assert(ops.size() == idx.size());

      std::list < octave_value_list >::const_iterator idx_it = idx.begin();
      int skip = 0;

      if (ops.size() > 1) {
	std::list < octave_value_list >::const_iterator last = idx.end();
	--last;
	std::list < octave_value_list > next_idx(idx.begin(), last);
	octave_value next_ov = subsref(ops.substr(0, ops.size() - 1), next_idx);
	next_ov.subsasgn(ops.substr(ops.size() - 1), std::list < octave_value_list > (1, *last), rhs);
      }

      else if (ops[skip] == '(' || ops[skip] == '{') {
	const char *op_name = ops[skip] == '(' ? "__paren_asgn__" : "__brace_asgn__";
	member_value_pair *m = find_member(op_name, false);
	if (m) {
	  octave_value_list args;
	  args.append(as_value());
	  args.append(*idx_it);
	  args.append(rhs);
	  member_invoke(m, args, 1);
	} else
	  error("%s member not found", op_name);
      }

      else if (ops[skip] == '.') {
	octave_value_list subname_ovl(*idx_it++);
	++skip;
	assert(subname_ovl.length() == 1 &&subname_ovl(0).is_string());
	std::string subname = subname_ovl(0).string_value();

	member_value_pair *m = find_member(subname, true);
	if (!m->first || !m->first->set_method) {
	  m->first = 0;
	  m->second = rhs;
	} else if (m->first->set_method) {
	  octave_value_list args;
	  if (!m->first->is_static() && !m->first->is_global())
	    args.append(as_value());
	  args.append(rhs);
	  m->first->set_method(args, 1);
	} else
	  error("member not assignable");
      } else
	error("unsupported subsasgn");

      return as_value();
    }

    virtual bool is_object() const {
      return true;
    }

    virtual bool is_string() const {
      octave_swig_type *nc_this = const_cast < octave_swig_type *>(this);
      return !!nc_this->find_member("__str__", false);
    }

    virtual std::string string_value(bool force = false) const {
      octave_value ret;
      if (!dispatch_unary_op("__str__", ret)) {
        error("__str__ method not defined");
        return std::string();
      }
      if (!ret.is_string()) {
	error("__str__ method did not return a string");
	return std::string();
      }
      return ret.string_value();
    }

    virtual double scalar_value(bool frc_str_conv = false) const {
      octave_value ret;
      if (!dispatch_unary_op("__float__", ret)) {
        error("__float__ method not defined");
      }
      return ret.scalar_value();
    }

#if SWIG_OCTAVE_PREREQ(4,2,0)
    virtual octave_value as_double(void) const {
      octave_value ret;
      if (!dispatch_unary_op("__float__", ret)) {
        error("__float__ method not defined");
      }
      return ret.as_double();
    }

    virtual octave_value as_single(void) const {
      octave_value ret;
      if (!dispatch_unary_op("__float__", ret)) {
        error("__float__ method not defined");
      }
      return ret.as_single();
    }
#endif

#if SWIG_OCTAVE_PREREQ(3,8,0)
    virtual octave_value map(octave_base_value::unary_mapper_t umap) const {
      const std::string opname = std::string("__") + octave_base_value::get_umap_name(umap) + std::string("__");
      octave_value ret;
      if (!dispatch_unary_op(opname, ret)) {
        error((opname + std::string(" method not found")).c_str());
        return octave_value();
      }
      return ret;
    }
#endif

#if SWIG_OCTAVE_PREREQ(3,3,52)
    virtual octave_map map_value() const {
      return octave_map();
    }
#else
    virtual Octave_map map_value() const {
      return Octave_map();
    }
#endif

    virtual string_vector map_keys() const {
      member_map tmp;
      load_members(tmp);

      string_vector keys(tmp.size());
      int k = 0;
      for (member_map::iterator it = tmp.begin(); it != tmp.end(); ++it)
	keys(k++) = it->first;

      return keys;
    }

    virtual bool save_ascii (std::ostream& os) {
      return true;
    }

    virtual bool load_ascii (std::istream& is) {
      return true;
    }

    virtual bool save_binary (std::ostream& os, bool& save_as_floats) {
      return true;
    }

    virtual bool load_binary (std::istream& is, bool swap, 
			      oct_mach_info::float_format fmt) {
      return true;
    }

#if defined (HAVE_HDF5)
# if SWIG_OCTAVE_PREREQ(4,0,0)
    virtual bool
      save_hdf5 (octave_hdf5_id loc_id, const char *name, bool save_as_floats) {
      return true;
    }

    virtual bool
      load_hdf5 (octave_hdf5_id loc_id, const char *name, bool have_h5giterate_bug) {
      return true;
    }
# else
    virtual bool
      save_hdf5 (hid_t loc_id, const char *name, bool save_as_floats) {
      return true;
    }

    virtual bool
      load_hdf5 (hid_t loc_id, const char *name, bool have_h5giterate_bug) {
      return true;
    }
# endif
#endif

    virtual octave_value convert_to_str(bool pad = false, bool force = false, char type = '"') const {
      return string_value();
    }

    virtual octave_value convert_to_str_internal(bool pad, bool force, char type) const {
      return string_value();
    }

    static bool dispatch_global_op(const std::string &symbol, const octave_value_list &args, octave_value &ret) {
      // we assume that SWIG_op_prefix-prefixed functions are installed in global namespace
      // (rather than any module namespace).

      octave_function *fcn = is_valid_function(symbol, std::string(), false);
      if (!fcn)
	return false;
      ret = fcn->do_multi_index_op(1, args)(0);
      return true;
    }

    static octave_value dispatch_unary_op(const octave_base_value &x, const char *op_name) {
      octave_swig_type *ost = Swig::swig_value_deref(x);
      assert(ost);

      octave_value ret;
      if (ost->dispatch_unary_op(std::string("__") + op_name + std::string("__"), ret))
	return ret;
      std::string symbol = SWIG_op_prefix + ost->swig_type_name() + "_" + op_name;
      octave_value_list args;
      args.append(make_value_hack(x));
      if (dispatch_global_op(symbol, args, ret))
	return ret;

      error("could not dispatch unary operator");
      return octave_value();
    }

    static octave_value dispatch_binary_op(const octave_base_value &lhs, const octave_base_value &rhs, const char *op_name) {
      octave_swig_type *lhs_ost = Swig::swig_value_deref(lhs);
      octave_swig_type *rhs_ost = Swig::swig_value_deref(rhs);

      octave_value ret;
      if (lhs_ost && lhs_ost->dispatch_binary_op(std::string("__") + op_name + std::string("__"), rhs, ret))
	return ret;
      if (rhs_ost) {
        if (strlen(op_name) == 2  && (op_name[1] == 't' || op_name[1] == 'e')) {
          if (op_name[0] == 'l' && rhs_ost->dispatch_binary_op(std::string("__g") + op_name[1] + std::string("__"), lhs, ret))
            return ret;
          if (op_name[0] == 'g' && rhs_ost->dispatch_binary_op(std::string("__l") + op_name[1] + std::string("__"), lhs, ret))
            return ret;
        }
        if (rhs_ost->dispatch_binary_op(std::string("__r") + op_name + std::string("__"), lhs, ret))
          return ret;
      }

      std::string symbol;
      octave_value_list args;
      args.append(make_value_hack(lhs));
      args.append(make_value_hack(rhs));

      symbol = SWIG_op_prefix;
      symbol += lhs_ost ? lhs_ost->swig_type_name() : lhs.type_name();
      symbol += "_";
      symbol += op_name;
      symbol += "_";
      symbol += rhs_ost ? rhs_ost->swig_type_name() : rhs.type_name();
      if (dispatch_global_op(symbol, args, ret))
	return ret;

      symbol = SWIG_op_prefix;
      symbol += lhs_ost ? lhs_ost->swig_type_name() : lhs.type_name();
      symbol += "_";
      symbol += op_name;
      symbol += "_";
      symbol += "any";
      if (dispatch_global_op(symbol, args, ret))
	return ret;

      symbol = SWIG_op_prefix;
      symbol += "any";
      symbol += "_";
      symbol += op_name;
      symbol += "_";
      symbol += rhs_ost ? rhs_ost->swig_type_name() : rhs.type_name();
      if (dispatch_global_op(symbol, args, ret))
	return ret;

      error("could not dispatch binary operator");
      return octave_value();
    }

#if SWIG_OCTAVE_PREREQ(4,0,0)
    void print(std::ostream &os, bool pr_as_read_syntax = false)
#else
    void print(std::ostream &os, bool pr_as_read_syntax = false) const
#endif
    {
      if (is_string()) {
	os << string_value();
	return;
      }

      member_map tmp;
      load_members(tmp);

      indent(os);
      os << "{"; newline(os);
      increment_indent_level();
      for (unsigned int j = 0; j < types.size(); ++j) {
        indent(os);
	if (types[j].first->clientdata) {
	  const swig_octave_class *c = (const swig_octave_class *) types[j].first->clientdata;
	  os << c->name << ", ptr = " << types[j].second.ptr; newline(os);
	} else {
	  os << types[j].first->name << ", ptr = " << types[j].second.ptr; newline(os);
	}
      }
      for (member_map::const_iterator it = tmp.begin(); it != tmp.end(); ++it) {
        indent(os);
	if (it->second.first) {
	  const char *objtype = it->second.first->method ? "method" : "variable";
	  const char *modifier = (it->second.first->flags &1) ? "static " : (it->second.first->flags &2) ? "global " : "";
	  os << it->second.first->name << " (" << modifier << objtype << ")"; newline(os);
	  assert(it->second.first->name == it->first);
	} else {
	  os << it->first; newline(os);
	}
      }
      decrement_indent_level();
      indent(os);
      os << "}"; newline(os);
    }
  };

  // Octave tries hard to preserve pass-by-value semantics. Eg, assignments
  // will call clone() via make_unique() if there is more than one outstanding 
  // reference to the lhs, and forces the clone's reference count to 1 
  // (so you can't just increment your own count and return this).
  //
  // One way to fix this (without modifying Octave) is to add a level of
  // indirection such that clone copies ref-counted pointer and we keep 
  // pass-by-ref semantics (which are more natural/expected for C++ bindings).
  //
  // Supporting both pass-by-{ref,value} and toggling via %feature/option 
  // might be nice.

  class octave_swig_ref:public octave_base_value {
    octave_swig_type *ptr;
  public:
    octave_swig_ref(octave_swig_type *_ptr = 0)
      :ptr(_ptr) { }

    ~octave_swig_ref()
      { if (ptr) ptr->decref(); }

    octave_swig_type *get_ptr() const
      { return ptr; }

    octave_base_value *clone() const
      { if (ptr) ptr->incref(); return new octave_swig_ref(ptr); }

    octave_base_value *empty_clone() const
      { return new octave_swig_ref(0); }

    dim_vector dims(void) const 
      { return ptr->dims(); }

    bool is_defined() const
      { return ptr->is_defined(); }

    virtual bool is_map() const 
      { return ptr->is_map(); }

    virtual octave_value subsref(const std::string &ops, const std::list < octave_value_list > &idx) 
      { return ptr->subsref(ops, idx); }

    virtual octave_value_list subsref(const std::string &ops, const std::list < octave_value_list > &idx, int nargout)
      { return ptr->subsref(ops, idx, nargout); }

    octave_value subsasgn(const std::string &ops, const std::list < octave_value_list > &idx, const octave_value &rhs)
      { return ptr->subsasgn(ops, idx, rhs); }

    virtual bool is_object() const 
      { return ptr->is_object(); }

    virtual bool is_string() const 
      { return ptr->is_string(); }

    virtual std::string string_value(bool force = false) const 
      { return ptr->string_value(force); }

    virtual double scalar_value(bool frc_str_conv = false) const
      { return ptr->scalar_value(frc_str_conv); }

#if SWIG_OCTAVE_PREREQ(4,2,0)
    virtual octave_value as_double(void) const
      { return ptr->as_double(); }

    virtual octave_value as_single(void) const
      { return ptr->as_single(); }
#endif

#if SWIG_OCTAVE_PREREQ(3,8,0)
    virtual octave_value map(octave_base_value::unary_mapper_t umap) const
      { return ptr->map(umap); }
#endif

#if SWIG_OCTAVE_PREREQ(3,3,52)
    virtual octave_map map_value() const
      { return ptr->map_value(); }
#else
    virtual Octave_map map_value() const
      { return ptr->map_value(); }
#endif

    virtual string_vector map_keys() const
      { return ptr->map_keys(); }

    virtual bool save_ascii (std::ostream& os)
      { return ptr->save_ascii(os); }

    virtual bool load_ascii (std::istream& is)
      { return ptr->load_ascii(is); }

    virtual bool save_binary (std::ostream& os, bool& save_as_floats)
      { return ptr->save_binary(os, save_as_floats); }

    virtual bool load_binary (std::istream& is, bool swap, 
			      oct_mach_info::float_format fmt)
      { return ptr->load_binary(is, swap, fmt); }

#if defined (HAVE_HDF5)
# if SWIG_OCTAVE_PREREQ(4,0,0)
    virtual bool
      save_hdf5 (octave_hdf5_id loc_id, const char *name, bool save_as_floats)
      { return ptr->save_hdf5(loc_id, name, save_as_floats); }

    virtual bool
      load_hdf5 (octave_hdf5_id loc_id, const char *name, bool have_h5giterate_bug)
      { return ptr->load_hdf5(loc_id, name, have_h5giterate_bug); }
# else
    virtual bool
      save_hdf5 (hid_t loc_id, const char *name, bool save_as_floats)
      { return ptr->save_hdf5(loc_id, name, save_as_floats); }

    virtual bool
      load_hdf5 (hid_t loc_id, const char *name, bool have_h5giterate_bug)
      { return ptr->load_hdf5(loc_id, name, have_h5giterate_bug); }
# endif
#endif

    virtual octave_value convert_to_str(bool pad = false, bool force = false, char type = '"') const
      { return ptr->convert_to_str(pad, force, type); }

    virtual octave_value convert_to_str_internal(bool pad, bool force, char type) const
      { return ptr->convert_to_str_internal(pad, force, type); }

#if SWIG_OCTAVE_PREREQ(4,0,0)
    void print(std::ostream &os, bool pr_as_read_syntax = false)
#else
    void print(std::ostream &os, bool pr_as_read_syntax = false) const
#endif
      { return ptr->print(os, pr_as_read_syntax); }

    virtual type_conv_info numeric_conversion_function(void) const {
      return octave_base_value::type_conv_info (default_numeric_conversion_function,
                                                octave_scalar::static_type_id ());
    }

  private:
    static octave_base_value *default_numeric_conversion_function (const octave_base_value& a) {
      const octave_swig_ref& v = dynamic_cast<const octave_swig_ref&>(a);
      return new octave_scalar(v.scalar_value());
    }

#if !SWIG_OCTAVE_PREREQ(4,0,0)
    DECLARE_OCTAVE_ALLOCATOR;
#endif
    DECLARE_OV_TYPEID_FUNCTIONS_AND_DATA;
  };
#if !SWIG_OCTAVE_PREREQ(4,0,0)
  DEFINE_OCTAVE_ALLOCATOR(octave_swig_ref);
#endif
  DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA(octave_swig_ref, "swig_ref", "swig_ref");

  class octave_swig_packed:public octave_base_value {
    swig_type_info *type;
    std::vector < char > buf;
  public:

    octave_swig_packed(swig_type_info *_type = 0, const void *_buf = 0, size_t _buf_len = 0)
      :	type(_type), buf((const char*)_buf, (const char*)_buf + _buf_len) {
    }

    bool copy(swig_type_info *outtype, void *ptr, size_t sz) const {
      if (outtype && outtype != type)
	return false;
      assert(sz <= buf.size());
      std::copy(buf.begin(), buf.begin()+sz, (char*)ptr);
      return true;
    }

    octave_base_value *clone() const {
      return new octave_swig_packed(*this);
    }

    octave_base_value *empty_clone() const {
      return new octave_swig_packed();
    }

    bool is_defined() const {
      return true;
    }

#if SWIG_OCTAVE_PREREQ(4,0,0)
    void print(std::ostream &os, bool pr_as_read_syntax = false)
#else
    void print(std::ostream &os, bool pr_as_read_syntax = false) const
#endif
    {
      indent(os);
      os << "swig packed type: name = " << (type ? type->name : std::string()) << ", len = " << buf.size(); newline(os);
    }


    virtual bool save_ascii (std::ostream& os) {
      return true;
    }

    virtual bool load_ascii (std::istream& is) {
      return true;
    }

    virtual bool save_binary (std::ostream& os, bool& save_as_floats) {
      return true;
    }

    virtual bool load_binary (std::istream& is, bool swap, 
			      oct_mach_info::float_format fmt) {
      return true;
    }

#if defined (HAVE_HDF5)
# if SWIG_OCTAVE_PREREQ(4,0,0)
    virtual bool
      save_hdf5 (octave_hdf5_id loc_id, const char *name, bool save_as_floats) {
      return true;
    }

    virtual bool
      load_hdf5 (octave_hdf5_id loc_id, const char *name, bool have_h5giterate_bug) {
      return true;
    }
# else
    virtual bool
      save_hdf5 (hid_t loc_id, const char *name, bool save_as_floats) {
      return true;
    }

    virtual bool
      load_hdf5 (hid_t loc_id, const char *name, bool have_h5giterate_bug) {
      return true;
    }
# endif
#endif

  private:
#if !SWIG_OCTAVE_PREREQ(4,0,0)
    DECLARE_OCTAVE_ALLOCATOR;
#endif
    DECLARE_OV_TYPEID_FUNCTIONS_AND_DATA;
  };
#if !SWIG_OCTAVE_PREREQ(4,0,0)
  DEFINE_OCTAVE_ALLOCATOR(octave_swig_packed);
#endif
  DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA(octave_swig_packed, "swig_packed", "swig_packed");

  SWIGRUNTIME octave_value_list octave_set_immutable(const octave_value_list &args, int nargout) {
    error("attempt to set immutable member variable");
    return octave_value_list();
  }

  struct octave_value_ref {
    const octave_value_list &ovl;
    int j;

    octave_value_ref(const octave_value_list &_ovl, int _j)
      :ovl(_ovl), j(_j) { }

    operator  octave_value() const {
      return ovl(j);
    }

    octave_value operator*() const {
      return ovl(j);
    }
  };


namespace Swig {

  SWIGRUNTIME octave_base_value *swig_value_ref(octave_swig_type *ost) {
    return new octave_swig_ref(ost);
  }

  SWIGRUNTIME octave_swig_type *swig_value_deref(octave_value ov) {
    if (ov.is_cell() && ov.rows() == 1 && ov.columns() == 1)
      ov = ov.cell_value()(0);
    return swig_value_deref(*ov.internal_rep());
  }

  SWIGRUNTIME octave_swig_type *swig_value_deref(const octave_base_value &ov) {
    if (ov.type_id() != octave_swig_ref::static_type_id())
      return 0;
    const octave_swig_ref *osr = static_cast < const octave_swig_ref *>(&ov);
    return osr->get_ptr();
  }

}


#define swig_unary_op(name) \
SWIGRUNTIME octave_value swig_unary_op_##name(const octave_base_value &x) { \
  return octave_swig_type::dispatch_unary_op(x,#name); \
}
#define swig_binary_op(name) \
SWIGRUNTIME octave_value swig_binary_op_##name(const octave_base_value&lhs,const octave_base_value &rhs) { \
  return octave_swig_type::dispatch_binary_op(lhs,rhs,#name); \
}
#define swigreg_unary_op(name) \
if (!octave_value_typeinfo::lookup_unary_op(octave_value::op_##name,tid)) \
octave_value_typeinfo::register_unary_op(octave_value::op_##name,tid,swig_unary_op_##name);
#define swigreg_binary_op(name) \
if (!octave_value_typeinfo::lookup_binary_op(octave_value::op_##name,tid1,tid2)) \
octave_value_typeinfo::register_binary_op(octave_value::op_##name,tid1,tid2,swig_binary_op_##name);

  swig_unary_op(not);
  swig_unary_op(uplus);
  swig_unary_op(uminus);
  swig_unary_op(transpose);
  swig_unary_op(hermitian);
  swig_unary_op(incr);
  swig_unary_op(decr);

  swig_binary_op(add);
  swig_binary_op(sub);
  swig_binary_op(mul);
  swig_binary_op(div);
  swig_binary_op(pow);
  swig_binary_op(ldiv);
#if !SWIG_OCTAVE_PREREQ(4,2,0)
  swig_binary_op(lshift);
  swig_binary_op(rshift);
#endif
  swig_binary_op(lt);
  swig_binary_op(le);
  swig_binary_op(eq);
  swig_binary_op(ge);
  swig_binary_op(gt);
  swig_binary_op(ne);
  swig_binary_op(el_mul);
  swig_binary_op(el_div);
  swig_binary_op(el_pow);
  swig_binary_op(el_ldiv);
  swig_binary_op(el_and);
  swig_binary_op(el_or);

  SWIGRUNTIME void SWIG_InstallUnaryOps(int tid) {
    swigreg_unary_op(not);
    swigreg_unary_op(uplus);
    swigreg_unary_op(uminus);
    swigreg_unary_op(transpose);
    swigreg_unary_op(hermitian);
    swigreg_unary_op(incr);
    swigreg_unary_op(decr);
  }
  SWIGRUNTIME void SWIG_InstallBinaryOps(int tid1, int tid2) {
    swigreg_binary_op(add);
    swigreg_binary_op(sub);
    swigreg_binary_op(mul);
    swigreg_binary_op(div);
    swigreg_binary_op(pow);
    swigreg_binary_op(ldiv);
#if !SWIG_OCTAVE_PREREQ(4,2,0)
    swigreg_binary_op(lshift);
    swigreg_binary_op(rshift);
#endif
    swigreg_binary_op(lt);
    swigreg_binary_op(le);
    swigreg_binary_op(eq);
    swigreg_binary_op(ge);
    swigreg_binary_op(gt);
    swigreg_binary_op(ne);
    swigreg_binary_op(el_mul);
    swigreg_binary_op(el_div);
    swigreg_binary_op(el_pow);
    swigreg_binary_op(el_ldiv);
    swigreg_binary_op(el_and);
    swigreg_binary_op(el_or);
  }
  SWIGRUNTIME void SWIG_InstallOps(int tid) {
    // here we assume that tid are conseq integers increasing from zero, and 
    // that our tid is the last one. might be better to have explicit string 
    // list of types we should bind to, and use lookup_type to resolve their tid.

    SWIG_InstallUnaryOps(tid);
    SWIG_InstallBinaryOps(tid, tid);
    for (int j = 0; j < tid; ++j) {
      SWIG_InstallBinaryOps(j, tid);
      SWIG_InstallBinaryOps(tid, j);
    }
  }

SWIGRUNTIME octave_value SWIG_Octave_NewPointerObj(void *ptr, swig_type_info *type, int flags) {
  int own = (flags &SWIG_POINTER_OWN) ? SWIG_POINTER_OWN : 0;

#ifdef SWIG_DIRECTORS
  Swig::Director *d = Swig::get_rtdir(ptr);
  if (d && Swig::swig_director_get_self(d))
    return Swig::swig_director_get_self(d)->as_value();
#endif
  return Swig::swig_value_ref(new octave_swig_type(ptr, type, own));
}

SWIGRUNTIME int SWIG_Octave_ConvertPtrAndOwn(octave_value ov, void **ptr, swig_type_info *type, int flags, int *own) {
  if (ov.is_cell() && ov.rows() == 1 && ov.columns() == 1)
    ov = ov.cell_value()(0);
  if (!ov.is_defined() ||
      (ov.is_matrix_type() && ov.rows() == 0 && ov.columns() == 0) ) {
    if (ptr)
      *ptr = 0;
    return SWIG_OK;
  }
  if (ov.type_id() != octave_swig_ref::static_type_id())
    return SWIG_ERROR;
  octave_swig_ref *osr = static_cast < octave_swig_ref *>(ov.internal_rep());
  octave_swig_type *ost = osr->get_ptr();
  return ost->cast(ptr, type, own, flags);
}

SWIGRUNTIME octave_value SWIG_Octave_NewPackedObj(void *ptr, size_t sz, swig_type_info *type) {
  return new octave_swig_packed(type, (char *) ptr, sz);
}

SWIGRUNTIME int SWIG_Octave_ConvertPacked(const octave_value &ov, void *ptr, size_t sz, swig_type_info *type) {
  if (!ov.is_defined())
    return SWIG_ERROR;
  if (ov.type_id() != octave_swig_packed::static_type_id())
    return SWIG_ERROR;
  octave_swig_packed *ost = static_cast < octave_swig_packed *>(ov.internal_rep());
  return ost->copy(type, (char *) ptr, sz) ? SWIG_OK : SWIG_ERROR;
}

SWIGRUNTIMEINLINE void SWIG_Octave_SetConstant(octave_swig_type *module_ns, const std::string &name, const octave_value &ov) {
  module_ns->assign(name, ov);
}

SWIGRUNTIMEINLINE octave_value SWIG_Octave_GetGlobalValue(std::string name) {
  return get_global_value(name, true);
}

SWIGRUNTIME void SWIG_Octave_SetGlobalValue(std::string name, const octave_value& value) {
  set_global_value(name, value);
}

SWIGRUNTIME void SWIG_Octave_LinkGlobalValue(std::string name) {
#if !SWIG_OCTAVE_PREREQ(3,2,0)
  link_to_global_variable(curr_sym_tab->lookup(name, true));
#else
#if !SWIG_OCTAVE_PREREQ(3,8,0)
  symbol_table::varref(name);
#endif
  symbol_table::mark_global(name);
#endif
}

SWIGRUNTIME swig_module_info *SWIG_Octave_GetModule(void *clientdata) {
  octave_value ov = SWIG_Octave_GetGlobalValue("__SWIG_MODULE__" SWIG_TYPE_TABLE_NAME SWIG_RUNTIME_VERSION);
  if (!ov.is_defined() ||
      ov.type_id() != octave_swig_packed::static_type_id())
    return 0;
  const octave_swig_packed* osp = 
    static_cast < const octave_swig_packed *> (ov.internal_rep());
  swig_module_info *pointer = 0;
  osp->copy(0, &pointer, sizeof(swig_module_info *));
  return pointer;
}

SWIGRUNTIME void SWIG_Octave_SetModule(void *clientdata, swig_module_info *pointer) {
  octave_value ov = new octave_swig_packed(0, &pointer, sizeof(swig_module_info *));
  SWIG_Octave_SetGlobalValue("__SWIG_MODULE__" SWIG_TYPE_TABLE_NAME SWIG_RUNTIME_VERSION, ov);
}



#define SWIG_exception_fail(code, msg) do { SWIG_Error(code, msg); SWIG_fail; } while(0) 

#define SWIG_contract_assert(expr, msg) if (!(expr)) { SWIG_Error(SWIG_RuntimeError, msg); SWIG_fail; } else 



  #define SWIG_exception(code, msg) do { SWIG_Error(code, msg); SWIG_fail;; } while(0) 


/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_BBPCostFunction swig_types[0]
#define SWIGTYPE_p_RootedTree swig_types[1]
#define SWIGTYPE_p_allocator_type swig_types[2]
#define SWIGTYPE_p_bool swig_types[3]
#define SWIGTYPE_p_boost__any swig_types[4]
#define SWIGTYPE_p_char swig_types[5]
#define SWIGTYPE_p_const_iterator swig_types[6]
#define SWIGTYPE_p_const_reverse_iterator swig_types[7]
#define SWIGTYPE_p_container_type swig_types[8]
#define SWIGTYPE_p_dai__BP swig_types[9]
#define SWIGTYPE_p_dai__BP__Properties swig_types[10]
#define SWIGTYPE_p_dai__BipartiteGraph swig_types[11]
#define SWIGTYPE_p_dai__CBP swig_types[12]
#define SWIGTYPE_p_dai__CBP__Properties swig_types[13]
#define SWIGTYPE_p_dai__ClusterGraph swig_types[14]
#define SWIGTYPE_p_dai__Cobweb swig_types[15]
#define SWIGTYPE_p_dai__DAIAlgT_CobwebGraph_t swig_types[16]
#define SWIGTYPE_p_dai__DAIAlgT_dai__FactorGraph_t swig_types[17]
#define SWIGTYPE_p_dai__DAIAlgT_dai__RegionGraph_t swig_types[18]
#define SWIGTYPE_p_dai__DecMAP swig_types[19]
#define SWIGTYPE_p_dai__DecMAP__Properties swig_types[20]
#define SWIGTYPE_p_dai__FBP swig_types[21]
#define SWIGTYPE_p_dai__FRegion swig_types[22]
#define SWIGTYPE_p_dai__FactorGraph swig_types[23]
#define SWIGTYPE_p_dai__GLC swig_types[24]
#define SWIGTYPE_p_dai__GLC__Properties swig_types[25]
#define SWIGTYPE_p_dai__Gibbs swig_types[26]
#define SWIGTYPE_p_dai__Gibbs__Properties swig_types[27]
#define SWIGTYPE_p_dai__GraphAL swig_types[28]
#define SWIGTYPE_p_dai__HAK swig_types[29]
#define SWIGTYPE_p_dai__HAK__Properties swig_types[30]
#define SWIGTYPE_p_dai__IndexFor swig_types[31]
#define SWIGTYPE_p_dai__InfAlg swig_types[32]
#define SWIGTYPE_p_dai__JTree swig_types[33]
#define SWIGTYPE_p_dai__JTree__Properties swig_types[34]
#define SWIGTYPE_p_dai__LC swig_types[35]
#define SWIGTYPE_p_dai__LC__Properties swig_types[36]
#define SWIGTYPE_p_dai__MF swig_types[37]
#define SWIGTYPE_p_dai__MF__Properties swig_types[38]
#define SWIGTYPE_p_dai__MR swig_types[39]
#define SWIGTYPE_p_dai__MR__Properties swig_types[40]
#define SWIGTYPE_p_dai__Neighbor swig_types[41]
#define SWIGTYPE_p_dai__Permute swig_types[42]
#define SWIGTYPE_p_dai__ProbDistType swig_types[43]
#define SWIGTYPE_p_dai__ProbNormType swig_types[44]
#define SWIGTYPE_p_dai__PropertySet swig_types[45]
#define SWIGTYPE_p_dai__Region swig_types[46]
#define SWIGTYPE_p_dai__RegionGraph swig_types[47]
#define SWIGTYPE_p_dai__SmallSetT_dai__Var_t swig_types[48]
#define SWIGTYPE_p_dai__SmallSetT_size_t_t swig_types[49]
#define SWIGTYPE_p_dai__State swig_types[50]
#define SWIGTYPE_p_dai__TFactorT_double_t swig_types[51]
#define SWIGTYPE_p_dai__TProbT_double_t swig_types[52]
#define SWIGTYPE_p_dai__TRWBP swig_types[53]
#define SWIGTYPE_p_dai__TreeEP swig_types[54]
#define SWIGTYPE_p_dai__TreeEP__Properties swig_types[55]
#define SWIGTYPE_p_dai__Var swig_types[56]
#define SWIGTYPE_p_dai__VarSet swig_types[57]
#define SWIGTYPE_p_dai__greedyVariableElimination swig_types[58]
#define SWIGTYPE_p_dai__multifor swig_types[59]
#define SWIGTYPE_p_dai__sequentialVariableElimination swig_types[60]
#define SWIGTYPE_p_difference_type swig_types[61]
#define SWIGTYPE_p_double swig_types[62]
#define SWIGTYPE_p_f_r_q_const__dai__ClusterGraph_size_t__size_t swig_types[63]
#define SWIGTYPE_p_first_type swig_types[64]
#define SWIGTYPE_p_iterator swig_types[65]
#define SWIGTYPE_p_mpz_class swig_types[66]
#define SWIGTYPE_p_reverse_iterator swig_types[67]
#define SWIGTYPE_p_second_type swig_types[68]
#define SWIGTYPE_p_size_t swig_types[69]
#define SWIGTYPE_p_size_type swig_types[70]
#define SWIGTYPE_p_std__allocatorT_dai__TFactorT_dai__Real_t_t swig_types[71]
#define SWIGTYPE_p_std__allocatorT_size_t_t swig_types[72]
#define SWIGTYPE_p_std__allocatorT_std__vectorT_dai__Factor_std__allocatorT_dai__Factor_t_t_t swig_types[73]
#define SWIGTYPE_p_std__mapT_dai__Var_size_t_t swig_types[74]
#define SWIGTYPE_p_std__mapT_dai__Var_size_t_t__const_iterator swig_types[75]
#define SWIGTYPE_p_std__mapT_int_size_t_t swig_types[76]
#define SWIGTYPE_p_std__mapT_size_t_dai__TFactorT_double_t_t swig_types[77]
#define SWIGTYPE_p_std__mapT_std__string_dai__InfAlg_p_t swig_types[78]
#define SWIGTYPE_p_std__mapT_std__string_std__string_t swig_types[79]
#define SWIGTYPE_p_std__ostream swig_types[80]
#define SWIGTYPE_p_std__pairT_size_t_double_t swig_types[81]
#define SWIGTYPE_p_std__pairT_size_t_mpz_t swig_types[82]
#define SWIGTYPE_p_std__pairT_size_t_size_t_t swig_types[83]
#define SWIGTYPE_p_std__pairT_std__string_boost__any_t swig_types[84]
#define SWIGTYPE_p_std__pairT_std__string_dai__PropertySet_t swig_types[85]
#define SWIGTYPE_p_std__setT_dai__SmallSetT_size_t_t_t swig_types[86]
#define SWIGTYPE_p_std__setT_size_t_t swig_types[87]
#define SWIGTYPE_p_std__setT_std__string_t swig_types[88]
#define SWIGTYPE_p_std__string swig_types[89]
#define SWIGTYPE_p_std__vectorT_dai__Neighbor_std__allocatorT_dai__Neighbor_t_t swig_types[90]
#define SWIGTYPE_p_std__vectorT_dai__Region_std__allocatorT_dai__Region_t_t swig_types[91]
#define SWIGTYPE_p_std__vectorT_dai__SmallSetT_size_t_t_std__allocatorT_dai__SmallSetT_size_t_t_t_t swig_types[92]
#define SWIGTYPE_p_std__vectorT_dai__TFactorT_dai__Real_t_std__allocatorT_dai__TFactorT_dai__Real_t_t_t swig_types[93]
#define SWIGTYPE_p_std__vectorT_dai__VarSet_std__allocatorT_dai__VarSet_t_t swig_types[94]
#define SWIGTYPE_p_std__vectorT_dai__Var_std__allocatorT_dai__Var_t_t swig_types[95]
#define SWIGTYPE_p_std__vectorT_dai__Var_std__allocatorT_dai__Var_t_t__const_iterator swig_types[96]
#define SWIGTYPE_p_std__vectorT_dai__Var_std__allocatorT_dai__Var_t_t__const_reverse_iterator swig_types[97]
#define SWIGTYPE_p_std__vectorT_dai__Var_std__allocatorT_dai__Var_t_t__iterator swig_types[98]
#define SWIGTYPE_p_std__vectorT_dai__Var_std__allocatorT_dai__Var_t_t__reverse_iterator swig_types[99]
#define SWIGTYPE_p_std__vectorT_dai__Var_std__allocatorT_dai__Var_t_t__size_type swig_types[100]
#define SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t swig_types[101]
#define SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t__const_iterator swig_types[102]
#define SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t__const_reverse_iterator swig_types[103]
#define SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t__iterator swig_types[104]
#define SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t__reverse_iterator swig_types[105]
#define SWIGTYPE_p_std__vectorT_size_t_std__allocatorT_size_t_t_t swig_types[106]
#define SWIGTYPE_p_std__vectorT_std__pairT_size_t_size_t_t_std__allocatorT_std__pairT_size_t_size_t_t_t_t swig_types[107]
#define SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t swig_types[108]
#define SWIGTYPE_p_std__vectorT_std__vectorT_dai__Factor_std__allocatorT_dai__Factor_t_t_std__allocatorT_std__vectorT_dai__Factor_std__allocatorT_dai__Factor_t_t_t_t swig_types[109]
#define SWIGTYPE_p_swig__OctSwigIterator swig_types[110]
#define SWIGTYPE_p_this_type swig_types[111]
#define SWIGTYPE_p_value_type swig_types[112]
static swig_type_info *swig_types[114];
static swig_module_info swig_module = {swig_types, 113, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */


#define SWIGVERSION 0x030012 
#define SWIG_VERSION SWIGVERSION


#define SWIG_as_voidptr(a) const_cast< void * >(static_cast< const void * >(a)) 
#define SWIG_as_voidptrptr(a) ((void)SWIG_as_voidptr(*a),reinterpret_cast< void** >(a)) 


#include <stdexcept>


#include <string>


#include <climits>
#include <iostream>


#include <typeinfo>
#include <stdexcept>


#if defined(__GNUC__)
#  if __GNUC__ == 2 && __GNUC_MINOR <= 96
#     define SWIG_STD_NOMODERN_STL
#  endif
#endif


#include <stddef.h>

  
namespace swig {
  struct stop_iteration {
  };

  struct OctSwigIterator {
  private:
    octave_value _seq;

  protected:
    OctSwigIterator(octave_value seq) : _seq(seq)
    {
    }
      
  public:
    virtual ~OctSwigIterator() {}

    virtual octave_value value() const = 0;

    virtual OctSwigIterator *incr(size_t n = 1) = 0;

    virtual OctSwigIterator *decr(size_t n = 1)
    {
      throw stop_iteration();
    }

    virtual ptrdiff_t distance(const OctSwigIterator &x) const
    {
      throw std::invalid_argument("operation not supported");
    }

    virtual bool equal (const OctSwigIterator &x) const
    {
      throw std::invalid_argument("operation not supported");
    }
    
    virtual OctSwigIterator *copy() const = 0;

    octave_value next()
    {
      octave_value obj = value();
      incr();
      return obj;
    }

    octave_value previous()
    {
      decr();
      return value();
    }

    OctSwigIterator *advance(ptrdiff_t n)
    {
      return  (n > 0) ?  incr(n) : decr(-n);
    }
      
    bool operator == (const OctSwigIterator& x)  const
    {
      return equal(x);
    }
      
    bool operator != (const OctSwigIterator& x) const
    {
      return ! operator==(x);
    }

    OctSwigIterator* operator ++ () {
      incr();
      return this;
    }

    OctSwigIterator* operator -- () {
      decr();
      return this;
    }
      
    OctSwigIterator* operator + (ptrdiff_t n) const
    {
      return copy()->advance(n);
    }

    OctSwigIterator* operator - (ptrdiff_t n) const
    {
      return copy()->advance(-n);
    }
      
    ptrdiff_t operator - (const OctSwigIterator& x) const
    {
      return x.distance(*this);
    }
      
    static swig_type_info* descriptor() {
      static int init = 0;
      static swig_type_info* desc = 0;
      if (!init) {
	desc = SWIG_TypeQuery("swig::OctSwigIterator *");
	init = 1;
      }	
      return desc;
    }    
  };
}


  SWIGINTERN int SWIG_AsVal_unsigned_SS_long (const octave_value& ov, unsigned long* val)
    {
      if (!ov.is_scalar_type())
	return SWIG_TypeError;
      if (ov.is_complex_scalar())
	return SWIG_TypeError;
      if (ov.is_double_type()||ov.is_single_type()) {
	double v=ov.double_value();
	if (v<0)
	  return SWIG_OverflowError;  
	if (v!=floor(v))
	  return SWIG_TypeError;
      }
      if (ov.is_int8_type()||ov.is_int16_type()||
	  ov.is_int32_type()) {
	long v=ov.long_value();
	if (v<0)
	  return SWIG_OverflowError;  
      }
      if (ov.is_int64_type()) {
	long long v=ov.int64_scalar_value().value();
	if (v<0)
	  return SWIG_OverflowError;  
      }
      if (val)
	*val = ov.ulong_value();
      return SWIG_OK;
    }


#include <limits.h>
#if !defined(SWIG_NO_LLONG_MAX)
# if !defined(LLONG_MAX) && defined(__GNUC__) && defined (__LONG_LONG_MAX__)
#   define LLONG_MAX __LONG_LONG_MAX__
#   define LLONG_MIN (-LLONG_MAX - 1LL)
#   define ULLONG_MAX (LLONG_MAX * 2ULL + 1ULL)
# endif
#endif


#if defined(LLONG_MAX) && !defined(SWIG_LONG_LONG_AVAILABLE)
#  define SWIG_LONG_LONG_AVAILABLE
#endif


#ifdef SWIG_LONG_LONG_AVAILABLE
  SWIGINTERN int SWIG_AsVal_unsigned_SS_long_SS_long (const octave_value& ov, unsigned long long* val)
    {
      if (!ov.is_scalar_type())
	return SWIG_TypeError;
      if (ov.is_complex_scalar())
	return SWIG_TypeError;
      if (ov.is_double_type()||ov.is_single_type()) {
	double v=ov.double_value();
	if (v<0)
	  return SWIG_OverflowError;  
	if (v!=floor(v))
	  return SWIG_TypeError;
      }
      if (ov.is_int8_type()||ov.is_int16_type()||
	  ov.is_int32_type()) {
	long v=ov.long_value();
	if (v<0)
	  return SWIG_OverflowError;  
      }
      if (ov.is_int64_type()) {
	long long v=ov.int64_scalar_value().value();
	if (v<0)
	  return SWIG_OverflowError;  
      }
      if (val) {
	if (ov.is_int64_type())
	  *val = ov.int64_scalar_value().value();
	else if (ov.is_uint64_type())
	  *val = ov.uint64_scalar_value().value();
	else
	  *val = ov.long_value();
      }
      return SWIG_OK;
    }
#endif


SWIGINTERNINLINE int
SWIG_AsVal_size_t (octave_value obj, size_t *val)
{
  int res = SWIG_TypeError;
#ifdef SWIG_LONG_LONG_AVAILABLE
  if (sizeof(size_t) <= sizeof(unsigned long)) {
#endif
    unsigned long v;
    res = SWIG_AsVal_unsigned_SS_long (obj, val ? &v : 0);
    if (SWIG_IsOK(res) && val) *val = static_cast< size_t >(v);
#ifdef SWIG_LONG_LONG_AVAILABLE
  } else if (sizeof(size_t) <= sizeof(unsigned long long)) {
    unsigned long long v;
    res = SWIG_AsVal_unsigned_SS_long_SS_long (obj, val ? &v : 0);
    if (SWIG_IsOK(res) && val) *val = static_cast< size_t >(v);
  }
#endif
  return res;
}


  SWIGINTERNINLINE octave_value SWIG_From_long    (long value)
    {    
      return octave_value(value);
    }


#ifdef SWIG_LONG_LONG_AVAILABLE
  SWIGINTERNINLINE octave_value SWIG_From_long_SS_long    (long long value)
    {    
      return octave_int64(value);
    }
#endif


SWIGINTERNINLINE octave_value
SWIG_From_ptrdiff_t  (ptrdiff_t value)
{    
#ifdef SWIG_LONG_LONG_AVAILABLE
  if (sizeof(ptrdiff_t) <= sizeof(long)) {
#endif
    return SWIG_From_long  (static_cast< long >(value));
#ifdef SWIG_LONG_LONG_AVAILABLE
  } else {
    /* assume sizeof(ptrdiff_t) <= sizeof(long long) */
    return SWIG_From_long_SS_long  (static_cast< long long >(value));
  }
#endif
}


SWIGINTERNINLINE octave_value
  SWIG_From_bool  (bool value)
{
  return octave_value(value);
}


  SWIGINTERN int SWIG_AsVal_long (const octave_value& ov, long* val)
    {
      if (!ov.is_scalar_type())
	return SWIG_TypeError;
      if (ov.is_complex_scalar())
	return SWIG_TypeError;
      if (ov.is_double_type()||ov.is_single_type()) {
	double v=ov.double_value();
	if (v!=floor(v))
	  return SWIG_TypeError;
      }
      if (val)
	*val = ov.long_value();
      return SWIG_OK;
    }


#ifdef SWIG_LONG_LONG_AVAILABLE
  SWIGINTERN int SWIG_AsVal_long_SS_long (const octave_value& ov, long long* val)
    {
      if (!ov.is_scalar_type())
	return SWIG_TypeError;
      if (ov.is_complex_scalar())
	return SWIG_TypeError;
      if (ov.is_double_type()||ov.is_single_type()) {
	double v=ov.double_value();
	if (v!=floor(v))
	  return SWIG_TypeError;
      }
      if (val) {
	if (ov.is_int64_type())
	  *val = ov.int64_scalar_value().value();
	else if (ov.is_uint64_type())
	  *val = ov.uint64_scalar_value().value();
	else
	  *val = ov.long_value();
      }
      return SWIG_OK;
    }
#endif


SWIGINTERNINLINE int
SWIG_AsVal_ptrdiff_t (octave_value obj, ptrdiff_t *val)
{
  int res = SWIG_TypeError;
#ifdef SWIG_LONG_LONG_AVAILABLE
  if (sizeof(ptrdiff_t) <= sizeof(long)) {
#endif
    long v;
    res = SWIG_AsVal_long (obj, val ? &v : 0);
    if (SWIG_IsOK(res) && val) *val = static_cast< ptrdiff_t >(v);
#ifdef SWIG_LONG_LONG_AVAILABLE
  } else if (sizeof(ptrdiff_t) <= sizeof(long long)) {
    long long v;
    res = SWIG_AsVal_long_SS_long (obj, val ? &v : 0);
    if (SWIG_IsOK(res) && val) *val = static_cast< ptrdiff_t >(v);
  }
#endif
  return res;
}


#include <algorithm>


#include <vector>


#include <utility>


namespace swig {
  template <class Type>
  struct noconst_traits {
    typedef Type noconst_type;
  };

  template <class Type>
  struct noconst_traits<const Type> {
    typedef Type noconst_type;
  };

  /*
    type categories
  */
  struct pointer_category { };
  struct value_category { };

  /*
    General traits that provides type_name and type_info
  */
  template <class Type> struct traits { };

  template <class Type>
  inline const char* type_name() {
    return traits<typename noconst_traits<Type >::noconst_type >::type_name();
  }

  template <class Type> struct traits_info {
    static swig_type_info *type_query(std::string name) {
      name += " *";
      return SWIG_TypeQuery(name.c_str());
    }
    static swig_type_info *type_info() {
      static swig_type_info *info = type_query(type_name<Type>());
      return info;
    }
  };

  /*
    Partial specialization for pointers (traits_info)
  */
  template <class Type> struct traits_info<Type *> {
    static swig_type_info *type_query(std::string name) {
      name += " *";
      return SWIG_TypeQuery(name.c_str());
    }
    static swig_type_info *type_info() {
      static swig_type_info *info = type_query(type_name<Type>());
      return info;
    }
  };

  template <class Type>
  inline swig_type_info *type_info() {
    return traits_info<Type>::type_info();
  }

  /*
    Partial specialization for pointers (traits)
  */
  template <class Type> struct traits <Type *> {
    typedef pointer_category category;
    static std::string make_ptr_name(const char* name) {
      std::string ptrname = name;
      ptrname += " *";
      return ptrname;
    }
    static const char* type_name() {
      static std::string name = make_ptr_name(swig::type_name<Type>());
      return name.c_str();
    }
  };

  template <class Type, class Category>
  struct traits_as { };

  template <class Type, class Category>
  struct traits_check { };

}


namespace swig {  
// Traits that provides the from method
  template <class Type> struct traits_from_ptr {
    static octave_value from(Type *val, int owner = 0) {
      return SWIG_NewPointerObj(val, type_info<Type>(), owner);
    }
  };

  template <class Type> struct traits_from {
    static octave_value from(const Type& val) {
      return traits_from_ptr<Type>::from(new Type(val), 1);
    }
  };

  template <class Type> struct traits_from<Type *> {
    static octave_value from(Type* val) {
      return traits_from_ptr<Type>::from(val, 0);
    }
  };

  template <class Type> struct traits_from<const Type *> {
    static octave_value from(const Type* val) {
      return traits_from_ptr<Type>::from(const_cast<Type*>(val), 0);
    }
  };


  template <class Type>
  inline octave_value from(const Type& val) {
    return traits_from<Type>::from(val);
  }

  template <class Type>
  inline octave_value from_ptr(Type* val, int owner) {
    return traits_from_ptr<Type>::from(val, owner);
  }

    // Traits that provides the asval/as/check method
  template <class Type>
  struct traits_asptr {   
    static int asptr(const octave_value& obj, Type **val) {
      Type *p;
      swig_type_info *descriptor = type_info<Type>();
      int res = descriptor ? SWIG_ConvertPtr(obj, (void **)&p, descriptor, 0) : SWIG_ERROR;
      if (SWIG_IsOK(res)) {
	if (val) *val = p;
      }
      return res;
    }
  }; 

  template <class Type>
  inline int asptr(const octave_value& obj, Type **vptr) {
    return traits_asptr<Type>::asptr(obj, vptr);
  }

  template <class Type> 
  struct traits_asval {
    static int asval(const octave_value& obj, Type *val) {
      if (val) {
	Type *p = 0;
	int res = traits_asptr<Type>::asptr(obj, &p);
	if (!SWIG_IsOK(res)) return res;	
	if (p) {
	  typedef typename noconst_traits<Type>::noconst_type noconst_type;
	  *(const_cast<noconst_type*>(val)) = *p;
	  if (SWIG_IsNewObj(res)){
	    delete p;
	    res = SWIG_DelNewMask(res);
	  }
	  return res;
	} else {
	  return SWIG_ERROR;
	}
      } else {
	return traits_asptr<Type>::asptr(obj, (Type **)(0));
      }
    }
  };

  template <class Type> struct traits_asval<Type*> {
    static int asval(const octave_value& obj, Type **val) {
      if (val) {
        typedef typename noconst_traits<Type>::noconst_type noconst_type;
        noconst_type *p = 0;
        int res = traits_asptr<noconst_type>::asptr(obj,  &p);
        if (SWIG_IsOK(res)) {
          *(const_cast<noconst_type**>(val)) = p;
	}
	return res;
      } else {
	return traits_asptr<Type>::asptr(obj, (Type **)(0));
      }
    }
  };
  
  template <class Type>
  inline int asval(const octave_value& obj, Type *val) {
    return traits_asval<Type>::asval(obj, val);
  }

  template <class Type> 
  struct traits_as<Type, value_category> {
    static Type as(const octave_value& obj, bool throw_error) {
      Type v;
      int res = asval(obj, &v);
      if (!obj.is_defined() || !SWIG_IsOK(res)) {
	if (!Octave_Error_Occurred()) {
	  SWIG_Error(SWIG_TypeError,  swig::type_name<Type>());
	}
	if (throw_error) throw std::invalid_argument("bad type");
      }
      return v;
    }
  };

  template <class Type> 
  struct traits_as<Type, pointer_category> {
    static Type as(const octave_value& obj, bool throw_error) {
      Type *v = 0;      
      int res = traits_asptr<Type>::asptr(obj, &v);
      if (SWIG_IsOK(res) && v) {
	if (SWIG_IsNewObj(res)) {
	  Type r(*v);
	  delete v;
	  return r;
	} else {
	  return *v;
	}
      } else {
	// Uninitialized return value, no Type() constructor required.
	static Type *v_def = (Type*) malloc(sizeof(Type));
	if (!Octave_Error_Occurred()) {
	  SWIG_Error(SWIG_TypeError,  swig::type_name<Type>());
	}
	if (throw_error) throw std::invalid_argument("bad type");
	memset(v_def,0,sizeof(Type));
	return *v_def;
      }
    }
  };

  template <class Type> 
  struct traits_as<Type*, pointer_category> {
    static Type* as(const octave_value& obj, bool throw_error) {
      Type *v = 0;      
      int res = traits_asptr<Type>::asptr(obj, &v);
      if (SWIG_IsOK(res)) {
	return v;
      } else {
	if (!Octave_Error_Occurred()) {
	  SWIG_Error(SWIG_TypeError,  swig::type_name<Type>());
	}
	if (throw_error) throw std::invalid_argument("bad type");
	return 0;
      }
    }
  };
    
  template <class Type>
  inline Type as(const octave_value& obj, bool te = false) {
    return traits_as<Type, typename traits<Type>::category>::as(obj, te);
  }

  template <class Type> 
  struct traits_check<Type, value_category> {
    static bool check(const octave_value& obj) {
      int res = asval(obj, (Type *)(0));
      return SWIG_IsOK(res) ? true : false;
    }
  };

  template <class Type> 
  struct traits_check<Type, pointer_category> {
    static bool check(const octave_value& obj) {
      int res = asptr(obj, (Type **)(0));
      return SWIG_IsOK(res) ? true : false;
    }
  };

  template <class Type>
  inline bool check(const octave_value& obj) {
    return traits_check<Type, typename traits<Type>::category>::check(obj);
  }
}


#include <functional>

namespace std {
  template <>
  struct less <octave_value>
  {
    bool
    operator()(const octave_value& v, const octave_value& w) const
    { 
      octave_value res = do_binary_op(octave_value::op_le,v,w);
      return res.is_true();
    }
  };
}

namespace swig {
  inline size_t
  check_index(ptrdiff_t i, size_t size, bool insert = false) {
    if ( i < 0 ) {
      if ((size_t) (-i) <= size)
	return (size_t) (i + size);
    } else if ( (size_t) i < size ) {
      return (size_t) i;
    } else if (insert && ((size_t) i == size)) {
      return size;
    }
    
    throw std::out_of_range("index out of range");
  }

  inline size_t
  slice_index(ptrdiff_t i, size_t size) {
    if ( i < 0 ) {
      if ((size_t) (-i) <= size) {
	return (size_t) (i + size);
      } else {
	throw std::out_of_range("index out of range");
      }
    } else {
      return ( (size_t) i < size ) ? ((size_t) i) : size;
    }
  }

  template <class Sequence, class Difference>
  inline typename Sequence::iterator
  getpos(Sequence* self, Difference i)  {
    typename Sequence::iterator pos = self->begin();
    std::advance(pos, check_index(i,self->size()));
    return pos;
  }

  template <class Sequence, class Difference>
  inline typename Sequence::const_iterator
  cgetpos(const Sequence* self, Difference i)  {
    typename Sequence::const_iterator pos = self->begin();
    std::advance(pos, check_index(i,self->size()));
    return pos;
  }

  template <class Sequence, class Difference>
  inline Sequence*
  getslice(const Sequence* self, Difference i, Difference j) {
    typename Sequence::size_type size = self->size();
    typename Sequence::size_type ii = swig::check_index(i, size);
    typename Sequence::size_type jj = swig::slice_index(j, size);

    if (jj > ii) {
      typename Sequence::const_iterator vb = self->begin();
      typename Sequence::const_iterator ve = self->begin();
      std::advance(vb,ii);
      std::advance(ve,jj);
      return new Sequence(vb, ve);
    } else {
      return new Sequence();
    }
  }

  template <class Sequence, class Difference, class InputSeq>
  inline void
  setslice(Sequence* self, Difference i, Difference j, const InputSeq& v) {
    typename Sequence::size_type size = self->size();
    typename Sequence::size_type ii = swig::check_index(i, size, true);
    typename Sequence::size_type jj = swig::slice_index(j, size);
    if (jj < ii) jj = ii;
    size_t ssize = jj - ii;
    if (ssize <= v.size()) {
      typename Sequence::iterator sb = self->begin();
      typename InputSeq::const_iterator vmid = v.begin();
      std::advance(sb,ii);
      std::advance(vmid, jj - ii);
      self->insert(std::copy(v.begin(), vmid, sb), vmid, v.end());
    } else {
      typename Sequence::iterator sb = self->begin();
      typename Sequence::iterator se = self->begin();
      std::advance(sb,ii);
      std::advance(se,jj);
      self->erase(sb,se);
      self->insert(sb, v.begin(), v.end());
    }
  }

  template <class Sequence, class Difference>
  inline void
  delslice(Sequence* self, Difference i, Difference j) {
    typename Sequence::size_type size = self->size();
    typename Sequence::size_type ii = swig::check_index(i, size, true);
    typename Sequence::size_type jj = swig::slice_index(j, size);
    if (jj > ii) {
      typename Sequence::iterator sb = self->begin();
      typename Sequence::iterator se = self->begin();
      std::advance(sb,ii);
      std::advance(se,jj);
      self->erase(sb,se);
    }
  }
}


#if defined(__SUNPRO_CC) && defined(_RWSTD_VER)
#  if !defined(SWIG_NO_STD_NOITERATOR_TRAITS_STL)
#    define SWIG_STD_NOITERATOR_TRAITS_STL
#  endif
#endif

#if !defined(SWIG_STD_NOITERATOR_TRAITS_STL)
#include <iterator>
#else
namespace std {
  template <class Iterator>
  struct iterator_traits {
    typedef ptrdiff_t difference_type;
    typedef typename Iterator::value_type value_type;
  };

  template <class Iterator, class Category,class T, class Reference, class Pointer, class Distance>
  struct iterator_traits<__reverse_bi_iterator<Iterator,Category,T,Reference,Pointer,Distance> > {
    typedef Distance difference_type;
    typedef T value_type;
  };

  template <class T>
  struct iterator_traits<T*> {
    typedef T value_type;
    typedef ptrdiff_t difference_type;
  };

  template<typename _InputIterator>
  inline typename iterator_traits<_InputIterator>::difference_type
  distance(_InputIterator __first, _InputIterator __last)
  {
    typename iterator_traits<_InputIterator>::difference_type __n = 0;
    while (__first != __last) {
      ++__first; ++__n;
    }
    return __n;
  }
}
#endif


namespace swig {
  template<typename OutIterator>
  class OctSwigIterator_T :  public OctSwigIterator
  {
  public:
    typedef OutIterator out_iterator;
    typedef typename std::iterator_traits<out_iterator>::value_type value_type;    
    typedef OctSwigIterator_T<out_iterator> self_type;

    OctSwigIterator_T(out_iterator curr, octave_value seq)
      : OctSwigIterator(seq), current(curr)
    {
    }

    const out_iterator& get_current() const
    {
      return current;
    }

    
    bool equal (const OctSwigIterator &iter) const
    {
      const self_type *iters = dynamic_cast<const self_type *>(&iter);
      if (iters) {
	return (current == iters->get_current());
      } else {
	throw std::invalid_argument("bad iterator type");
      }
    }
    
    ptrdiff_t distance(const OctSwigIterator &iter) const
    {
      const self_type *iters = dynamic_cast<const self_type *>(&iter);
      if (iters) {
	return std::distance(current, iters->get_current());
      } else {
	throw std::invalid_argument("bad iterator type");
      }
    }    
    
  protected:
    out_iterator current;
  };
  
  template <class ValueType>
  struct from_oper 
  {
    typedef const ValueType& argument_type;
    typedef octave_value result_type;
    result_type operator()(argument_type v) const
    {
      return swig::from(v);
    }
  };

  template<typename OutIterator, 
	   typename ValueType = typename std::iterator_traits<OutIterator>::value_type,
	   typename FromOper = from_oper<ValueType> >
  class OctSwigIteratorOpen_T :  public OctSwigIterator_T<OutIterator>
  {
  public:
    FromOper from;
    typedef OutIterator out_iterator;
    typedef ValueType value_type;
    typedef OctSwigIterator_T<out_iterator>  base;
    typedef OctSwigIteratorOpen_T<OutIterator, ValueType, FromOper> self_type;
    
    OctSwigIteratorOpen_T(out_iterator curr, octave_value seq)
      : OctSwigIterator_T<OutIterator>(curr, seq)
    {
    }
    
    octave_value value() const {
      return from(static_cast<const value_type&>(*(base::current)));
    }
    
    OctSwigIterator *copy() const
    {
      return new self_type(*this);
    }

    OctSwigIterator *incr(size_t n = 1)
    {
      while (n--) {
	++base::current;
      }
      return this;
    }

    OctSwigIterator *decr(size_t n = 1)
    {
      while (n--) {
	--base::current;
      }
      return this;
    }
  };

  template<typename OutIterator, 
	   typename ValueType = typename std::iterator_traits<OutIterator>::value_type,
	   typename FromOper = from_oper<ValueType> >
  class OctSwigIteratorClosed_T :  public OctSwigIterator_T<OutIterator>
  {
  public:
    FromOper from;
    typedef OutIterator out_iterator;
    typedef ValueType value_type;
    typedef OctSwigIterator_T<out_iterator>  base;    
    typedef OctSwigIteratorClosed_T<OutIterator, ValueType, FromOper> self_type;
    
    OctSwigIteratorClosed_T(out_iterator curr, out_iterator first, out_iterator last, octave_value seq)
      : OctSwigIterator_T<OutIterator>(curr, seq), begin(first), end(last)
    {
    }
    
    octave_value value() const {
      if (base::current == end) {
	throw stop_iteration();
      } else {
	return from(static_cast<const value_type&>(*(base::current)));
      }
    }
    
    OctSwigIterator *copy() const
    {
      return new self_type(*this);
    }

    OctSwigIterator *incr(size_t n = 1)
    {
      while (n--) {
	if (base::current == end) {
	  throw stop_iteration();
	} else {
	  ++base::current;
	}
      }
      return this;
    }

    OctSwigIterator *decr(size_t n = 1)
    {
      while (n--) {
	if (base::current == begin) {
	  throw stop_iteration();
	} else {
	  --base::current;
	}
      }
      return this;
    }

  private:
    out_iterator begin;
    out_iterator end;
  };

  template<typename OutIter>
  inline OctSwigIterator*
  make_output_iterator(const OutIter& current, const OutIter& begin,const OutIter& end, octave_value seq = octave_value())
  {
    return new OctSwigIteratorClosed_T<OutIter>(current, begin, end, seq);
  }

  template<typename OutIter>
  inline OctSwigIterator*
  make_output_iterator(const OutIter& current, octave_value seq = octave_value())
  {
    return new OctSwigIteratorOpen_T<OutIter>(current, seq);
  }
}


namespace swig
{
  template <class T>
    struct OctSequence_Ref // * octave can't support these, because of how assignment works
  {
    OctSequence_Ref(const octave_value& seq, int index)
      : _seq(seq), _index(index)
    {
    }
    
    operator T () const
    {
      //      swig::SwigVar_PyObject item = OctSequence_GetItem(_seq, _index);
      octave_value item; // * todo
      try {
	return swig::as<T>(item, true);
      } catch (std::exception& e) {
	char msg[1024];
	sprintf(msg, "in sequence element %d ", _index);
	if (!Octave_Error_Occurred()) {
	  SWIG_Error(SWIG_TypeError,  swig::type_name<T>());
	}
	SWIG_Octave_AddErrorMsg(msg);
	SWIG_Octave_AddErrorMsg(e.what());
	throw;
      }
    }

    OctSequence_Ref& operator=(const T& v)
    {
      //      OctSequence_SetItem(_seq, _index, swig::from<T>(v));
      // * todo
      return *this;
    }

  private:
    octave_value _seq;
    int _index;
  };

  template <class T>
  struct OctSequence_ArrowProxy
  {
    OctSequence_ArrowProxy(const T& x): m_value(x) {}
    const T* operator->() const { return &m_value; }
    operator const T*() const { return &m_value; }
    T m_value;
  };

  template <class T, class Reference >
  struct OctSequence_InputIterator
  {
    typedef OctSequence_InputIterator<T, Reference > self;

    typedef std::random_access_iterator_tag iterator_category;
    typedef Reference reference;
    typedef T value_type;
    typedef T* pointer;
    typedef int difference_type;

    OctSequence_InputIterator()
    {
    }

    OctSequence_InputIterator(const octave_value& seq, int index)
      : _seq(seq), _index(index)
    {
    }

    reference operator*() const
    {
      return reference(_seq, _index);
    }

    OctSequence_ArrowProxy<T>
    operator->() const {
      return OctSequence_ArrowProxy<T>(operator*());
    }

    bool operator==(const self& ri) const
    {
      return (_index == ri._index);
    }

    bool operator!=(const self& ri) const
    {
      return !(operator==(ri));
    }

    self& operator ++ ()
    {
      ++_index;
      return *this;
    }

    self& operator -- ()
    {
      --_index;
      return *this;
    }

    self& operator += (difference_type n)
    {
      _index += n;
      return *this;
    }

    self operator +(difference_type n) const
    {
      return self(_seq, _index + n);
    }

    self& operator -= (difference_type n)
    {
      _index -= n;
      return *this;
    }

    self operator -(difference_type n) const
    {
      return self(_seq, _index - n);
    }

    difference_type operator - (const self& ri) const
    {
      return _index - ri._index;
    }

    bool operator < (const self& ri) const
    {
      return _index < ri._index;
    }

    reference
    operator[](difference_type n) const
    {
      return reference(_seq, _index + n);
    }

  private:
    octave_value _seq;
    difference_type _index;
  };

  template <class T>
  struct OctSequence_Cont
  {
    typedef OctSequence_Ref<T> reference;
    typedef const OctSequence_Ref<T> const_reference;
    typedef T value_type;
    typedef T* pointer;
    typedef int difference_type;
    typedef int size_type;
    typedef const pointer const_pointer;
    typedef OctSequence_InputIterator<T, reference> iterator;
    typedef OctSequence_InputIterator<T, const_reference> const_iterator;

    OctSequence_Cont(const octave_value& seq) : _seq(seq)
    {
      // * assert that we have map type etc.
      /*
      if (!OctSequence_Check(seq)) {
	throw std::invalid_argument("a sequence is expected");
      }
      _seq = seq;
      Py_INCREF(_seq);
      */
    }

    ~OctSequence_Cont()
    {
    }

    size_type size() const
    {
      //      return static_cast<size_type>(OctSequence_Size(_seq));
      return 0; // * todo
    }

    bool empty() const
    {
      return size() == 0;
    }

    iterator begin()
    {
      return iterator(_seq, 0);
    }

    const_iterator begin() const
    {
      return const_iterator(_seq, 0);
    }

    iterator end()
    {
      return iterator(_seq, size());
    }

    const_iterator end() const
    {
      return const_iterator(_seq, size());
    }

    reference operator[](difference_type n)
    {
      return reference(_seq, n);
    }

    const_reference operator[](difference_type n)  const
    {
      return const_reference(_seq, n);
    }

    bool check(bool set_err = true) const
    {
      int s = size();
      for (int i = 0; i < s; ++i) {
	//	swig::SwigVar_PyObject item = OctSequence_GetItem(_seq, i);
	octave_value item; // * todo
	if (!swig::check<value_type>(item)) {
	  if (set_err) {
	    char msg[1024];
	    sprintf(msg, "in sequence element %d", i);
	    SWIG_Error(SWIG_RuntimeError, msg);
	  }
	  return false;
	}
      }
      return true;
    }

  private:
    octave_value _seq;
  };

}


  SWIGINTERNINLINE octave_value SWIG_From_unsigned_SS_long    (unsigned long value)
    {    
      return octave_value(value);
    }


#ifdef SWIG_LONG_LONG_AVAILABLE
  SWIGINTERNINLINE octave_value SWIG_From_unsigned_SS_long_SS_long    (unsigned long long value)
    {    
      return octave_uint64(value);
    }
#endif


SWIGINTERNINLINE octave_value
SWIG_From_size_t  (size_t value)
{    
#ifdef SWIG_LONG_LONG_AVAILABLE
  if (sizeof(size_t) <= sizeof(unsigned long)) {
#endif
    return SWIG_From_unsigned_SS_long  (static_cast< unsigned long >(value));
#ifdef SWIG_LONG_LONG_AVAILABLE
  } else {
    /* assume sizeof(size_t) <= sizeof(unsigned long long) */
    return SWIG_From_unsigned_SS_long_SS_long  (static_cast< unsigned long long >(value));
  }
#endif
}


namespace swig {
  template <> struct traits< size_t > {
    typedef value_category category;
    static const char* type_name() { return"size_t"; }
  };
  template <>  struct traits_asval< size_t > {
    typedef size_t value_type;
    static int asval(octave_value obj, value_type *val) {
      return SWIG_AsVal_size_t (obj, val);
    }
  };
  template <>  struct traits_from< size_t > {
    typedef size_t value_type;
    static octave_value from(const value_type& val) {
      return SWIG_From_size_t  (val);
    }
  };
}


namespace swig {
  template <class OctSeq, class Seq>
  inline void
  assign(const OctSeq& octseq, Seq* seq) {
#ifdef SWIG_STD_NOASSIGN_STL
    typedef typename OctSeq::value_type value_type;
    typename OctSeq::const_iterator it = octseq.begin();
    for (;it != octseq.end(); ++it) {
      seq->insert(seq->end(),(value_type)(*it));
    }
#else
    seq->assign(octseq.begin(), octseq.end());
#endif
  }

  template <class Seq, class T = typename Seq::value_type >
  struct traits_asptr_stdseq {
    typedef Seq sequence;
    typedef T value_type;

    static int asptr(const octave_value& obj, sequence **seq) {
      if (!obj.is_defined() || Swig::swig_value_deref(obj)) {
	sequence *p;
	swig_type_info *descriptor = swig::type_info<sequence>();
	if (descriptor && SWIG_IsOK(SWIG_ConvertPtr(obj, (void **)&p, descriptor, 0))) {
	  if (seq) *seq = p;
	  return SWIG_OLDOBJ;
	}
      } else if (obj.is_cell()) {
	try {
	  OctSequence_Cont<value_type> octseq(obj);
	  if (seq) {
	    sequence *pseq = new sequence();
	    assign(octseq, pseq);
	    *seq = pseq;
	    return SWIG_NEWOBJ;
	  } else {
	    return octseq.check() ? SWIG_OK : SWIG_ERROR;
	  }
	} catch (std::exception& e) {
	  if (seq&&!error_state)
	    error("swig type error: %s",e.what());
	  return SWIG_ERROR;
	}
      }
      return SWIG_ERROR;
    }
  };

  template <class Seq, class T = typename Seq::value_type >
  struct traits_from_stdseq {
    typedef Seq sequence;
    typedef T value_type;
    typedef typename Seq::size_type size_type;
    typedef typename sequence::const_iterator const_iterator;

    static octave_value from(const sequence& seq) {






      size_type size = seq.size();
      if (size <= (size_type)INT_MAX) {
	Cell c(size,1);
	int i = 0;
	for (const_iterator it = seq.begin();
	     it != seq.end(); ++it, ++i) {
	  c(i) = swig::from<value_type>(*it);
	}
	return c;
      } else {
	error("swig overflow error: sequence size not valid in octave");
	return octave_value();
      }
      return octave_value();
    }
  };
}


  namespace swig {
    template <class T>
    struct traits_asptr<std::vector<T> >  {
      static int asptr(const octave_value& obj, std::vector<T> **vec) {
	return traits_asptr_stdseq<std::vector<T> >::asptr(obj, vec);
      }
    };
    
    template <class T>
    struct traits_from<std::vector<T> > {
      static octave_value from(const std::vector<T>& vec) {
	return traits_from_stdseq<std::vector<T> >::from(vec);
      }
    };
  }


      namespace swig {
	template <>  struct traits<std::vector< size_t, std::allocator< size_t > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "size_t" "," "std::allocator< size_t >" " >";
	  }
	};
      }
    
SWIGINTERN std::vector< size_t >::value_type std_vector_Sl_size_t_Sg__pop(std::vector< size_t > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector< size_t,std::allocator< size_t > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN std::vector< size_t >::value_type std_vector_Sl_size_t_Sg____paren__(std::vector< size_t > *self,std::vector< size_t >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_vector_Sl_size_t_Sg____paren_asgn__(std::vector< size_t > *self,std::vector< size_t >::difference_type i,std::vector< size_t >::value_type x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN void std_vector_Sl_size_t_Sg__append(std::vector< size_t > *self,std::vector< size_t >::value_type x){
      self->push_back(x);
    }
SWIGINTERN std::vector< size_t >::iterator std_vector_Sl_size_t_Sg__erase__SWIG_0(std::vector< size_t > *self,std::vector< size_t >::iterator pos){ return self->erase(pos); }
SWIGINTERN std::vector< size_t >::iterator std_vector_Sl_size_t_Sg__erase__SWIG_1(std::vector< size_t > *self,std::vector< size_t >::iterator first,std::vector< size_t >::iterator last){ return self->erase(first, last); }
SWIGINTERN std::vector< size_t >::iterator std_vector_Sl_size_t_Sg__insert__SWIG_0(std::vector< size_t > *self,std::vector< size_t >::iterator pos,std::vector< size_t >::value_type const &x){ return self->insert(pos, x); }
SWIGINTERN void std_vector_Sl_size_t_Sg__insert__SWIG_1(std::vector< size_t > *self,std::vector< size_t >::iterator pos,std::vector< size_t >::size_type n,std::vector< size_t >::value_type const &x){ self->insert(pos, n, x); }

#include "../include/dai/alldai.h"

using namespace dai;


  SWIGINTERN int SWIG_AsVal_double (const octave_value& ov, double* val)
    {
      if (!ov.is_scalar_type())
	return SWIG_TypeError;
      if (ov.is_complex_scalar())
	return SWIG_TypeError;
      if (val)
	*val = ov.double_value();
      return SWIG_OK;
    }


  SWIGINTERNINLINE octave_value SWIG_From_double    (double value)
    {    
      return octave_value(value);
    }


SWIGINTERN int
SWIG_AsVal_int (octave_value obj, int *val)
{
  long v;
  int res = SWIG_AsVal_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v < INT_MIN || v > INT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< int >(v);
    }
  }  
  return res;
}


SWIGINTERNINLINE octave_value
SWIG_From_int  (int value)
{    
  return SWIG_From_long  (value);
}


SWIGINTERN int
SWIG_AsCharPtrAndSize(octave_value ov, char** cptr, size_t* psize, int *alloc)
{
  if (ov.is_cell() && ov.rows() == 1 && ov.columns() == 1)
    ov = ov.cell_value()(0);
  if (!ov.is_string())
    return SWIG_TypeError;
  
  std::string str=ov.string_value();
  size_t len=str.size();
  char* cstr=(char*)str.c_str();
  if (alloc) {
    *cptr = reinterpret_cast< char* >(memcpy(new char[len + 1], cstr, sizeof(char)*(len + 1)));
    *alloc = SWIG_NEWOBJ;
  } else if (cptr)
    *cptr = cstr;
  if (psize)
    *psize = len + 1;
  return SWIG_OK;
}


SWIGINTERN int
SWIG_AsPtr_std_string (octave_value obj, std::string **val) 
{
  char* buf = 0 ; size_t size = 0; int alloc = SWIG_OLDOBJ;
  if (SWIG_IsOK((SWIG_AsCharPtrAndSize(obj, &buf, &size, &alloc)))) {
    if (buf) {
      if (val) *val = new std::string(buf, size - 1);
      if (alloc == SWIG_NEWOBJ) delete[] buf;
      return SWIG_NEWOBJ;
    } else {
      if (val) *val = 0;
      return SWIG_OLDOBJ;
    }
  } else {
    static int init = 0;
    static swig_type_info* descriptor = 0;
    if (!init) {
      descriptor = SWIG_TypeQuery("std::string" " *");
      init = 1;
    }
    if (descriptor) {
      std::string *vptr;
      int res = SWIG_ConvertPtr(obj, (void**)&vptr, descriptor, 0);
      if (SWIG_IsOK(res) && val) *val = vptr;
      return res;
    }
  }
  return SWIG_ERROR;
}


SWIGINTERN int
SWIG_AsVal_bool (const octave_value& ov, bool *val)
{
  if (!ov.is_bool_type())
    return SWIG_ERROR;
  if (val)
    *val = ov.bool_value();
  return SWIG_OK;
}


SWIGINTERN swig_type_info*
SWIG_pchar_descriptor(void)
{
  static int init = 0;
  static swig_type_info* info = 0;
  if (!init) {
    info = SWIG_TypeQuery("_p_char");
    init = 1;
  }
  return info;
}


SWIGINTERNINLINE octave_value
SWIG_FromCharPtrAndSize(const char* carray, size_t size)
{
  return std::string(carray,carray+size);
}


SWIGINTERNINLINE octave_value
SWIG_From_std_string  (const std::string& s)
{
  return SWIG_FromCharPtrAndSize(s.data(), s.size());
}

SWIGINTERN char const *dai_Var___str__(dai::Var const *self){ return (*self).toString().c_str(); }

SWIGINTERNINLINE octave_value 
SWIG_FromCharPtr(const char *cptr)
{ 
  return SWIG_FromCharPtrAndSize(cptr, (cptr ? strlen(cptr) : 0));
}

SWIGINTERN std::string dai_Var___str(dai::Var const *self){ return (*self).toString(); }
SWIGINTERN char const *dai_SmallSet_Sl_dai_Var_Sg____str__(dai::SmallSet< dai::Var > const *self){ return (*self).toString().c_str(); }
SWIGINTERN std::string dai_SmallSet_Sl_dai_Var_Sg____str(dai::SmallSet< dai::Var > const *self){ return (*self).toString(); }
SWIGINTERN void dai_VarSet_append(dai::VarSet *self,dai::Var const &v){ (*self) |= v; }
SWIGINTERN char const *dai_VarSet___str__(dai::VarSet const *self){ return (*self).toString().c_str(); }
SWIGINTERN std::string dai_VarSet___str(dai::VarSet const *self){ return (*self).toString(); }
SWIGINTERN dai::Real dai_TProb_Sl_dai_Real_Sg____getitem__(dai::TProb< dai::Real > const *self,int i){return (*self).get(i);}
SWIGINTERN void dai_TProb_Sl_dai_Real_Sg____setitem__(dai::TProb< dai::Real > *self,int i,dai::Real d){(*self).set(i,d);}
SWIGINTERN dai::Real dai_TProb_Sl_dai_Real_Sg____paren__(dai::TProb< dai::Real > const *self,int i){return (*self).get(i);}
SWIGINTERN void dai_TProb_Sl_dai_Real_Sg____paren_asgn__(dai::TProb< dai::Real > *self,int i,dai::Real d){(*self).set(i,d);}
SWIGINTERN char const *dai_TProb_Sl_dai_Real_Sg____str__(dai::TProb< dai::Real > const *self){ return (*self).toString().c_str(); }
SWIGINTERN std::string dai_TProb_Sl_dai_Real_Sg____str(dai::TProb< dai::Real > const *self){ return (*self).toString(); }
SWIGINTERN dai::Real dai_TFactor_Sl_dai_Real_Sg____getitem__(dai::TFactor< dai::Real > const *self,int i){return (*self).get(i);}
SWIGINTERN void dai_TFactor_Sl_dai_Real_Sg____setitem__(dai::TFactor< dai::Real > *self,int i,dai::Real d){(*self).set(i,d);}
SWIGINTERN dai::Real dai_TFactor_Sl_dai_Real_Sg____paren__(dai::TFactor< dai::Real > const *self,int i){return (*self).get(i);}
SWIGINTERN void dai_TFactor_Sl_dai_Real_Sg____paren_asgn__(dai::TFactor< dai::Real > *self,int i,dai::Real d){(*self).set(i,d);}
SWIGINTERN char const *dai_TFactor_Sl_dai_Real_Sg____str__(dai::TFactor< dai::Real > const *self){ return (*self).toString().c_str(); }
SWIGINTERN std::string dai_TFactor_Sl_dai_Real_Sg____str(dai::TFactor< dai::Real > const *self){ return (*self).toString(); }

typedef std::vector<dai::Factor> VecFactor;
typedef std::vector<VecFactor> VecVecFactor;


  namespace swig {
    template <>  struct traits< dai::TFactor< double > > {
      typedef pointer_category category;
      static const char* type_name() { return"dai::TFactor< double >"; }
    };
  }


      namespace swig {
	template <>  struct traits<std::vector< dai::TFactor< double >, std::allocator< dai::TFactor< double > > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "dai::TFactor< double >" "," "std::allocator< dai::TFactor< double > >" " >";
	  }
	};
      }
    
SWIGINTERN std::vector< dai::TFactor< double > >::value_type std_vector_Sl_dai_Factor_Sg__pop(std::vector< dai::Factor > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector< dai::TFactor< double >,std::allocator< dai::TFactor< double > > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN std::vector< dai::TFactor< double > >::value_type std_vector_Sl_dai_Factor_Sg____paren__(std::vector< dai::Factor > *self,std::vector< dai::TFactor< double > >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_vector_Sl_dai_Factor_Sg____paren_asgn__(std::vector< dai::Factor > *self,std::vector< dai::TFactor< double > >::difference_type i,std::vector< dai::TFactor< double > >::value_type x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN void std_vector_Sl_dai_Factor_Sg__append(std::vector< dai::Factor > *self,std::vector< dai::TFactor< double > >::value_type x){
      self->push_back(x);
    }
SWIGINTERN std::vector< dai::TFactor< double > >::iterator std_vector_Sl_dai_Factor_Sg__erase__SWIG_0(std::vector< dai::Factor > *self,std::vector< dai::TFactor< double > >::iterator pos){ return self->erase(pos); }
SWIGINTERN std::vector< dai::TFactor< double > >::iterator std_vector_Sl_dai_Factor_Sg__erase__SWIG_1(std::vector< dai::Factor > *self,std::vector< dai::TFactor< double > >::iterator first,std::vector< dai::TFactor< double > >::iterator last){ return self->erase(first, last); }
SWIGINTERN std::vector< dai::TFactor< double > >::iterator std_vector_Sl_dai_Factor_Sg__insert__SWIG_0(std::vector< dai::Factor > *self,std::vector< dai::TFactor< double > >::iterator pos,std::vector< dai::TFactor< double > >::value_type const &x){ return self->insert(pos, x); }
SWIGINTERN void std_vector_Sl_dai_Factor_Sg__insert__SWIG_1(std::vector< dai::Factor > *self,std::vector< dai::TFactor< double > >::iterator pos,std::vector< dai::TFactor< double > >::size_type n,std::vector< dai::TFactor< double > >::value_type const &x){ self->insert(pos, n, x); }

      namespace swig {
	template <>  struct traits<std::vector< std::vector< dai::TFactor< double >,std::allocator< dai::TFactor< double > > >, std::allocator< std::vector< dai::TFactor< double >,std::allocator< dai::TFactor< double > > > > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "std::vector< dai::TFactor< double >,std::allocator< dai::TFactor< double > > >" "," "std::allocator< std::vector< dai::TFactor< double >,std::allocator< dai::TFactor< double > > > >" " >";
	  }
	};
      }
    
SWIGINTERN std::vector< std::vector< dai::TFactor< double >,std::allocator< dai::TFactor< double > > > >::value_type std_vector_Sl_VecFactor_Sg__pop(std::vector< VecFactor > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector< std::vector< dai::TFactor< double >,std::allocator< dai::TFactor< double > > >,std::allocator< std::vector< dai::TFactor< double >,std::allocator< dai::TFactor< double > > > > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN std::vector< std::vector< dai::TFactor< double >,std::allocator< dai::TFactor< double > > > >::value_type std_vector_Sl_VecFactor_Sg____paren__(std::vector< VecFactor > *self,std::vector< std::vector< dai::TFactor< double >,std::allocator< dai::TFactor< double > > > >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_vector_Sl_VecFactor_Sg____paren_asgn__(std::vector< VecFactor > *self,std::vector< std::vector< dai::TFactor< double >,std::allocator< dai::TFactor< double > > > >::difference_type i,std::vector< std::vector< dai::TFactor< double >,std::allocator< dai::TFactor< double > > > >::value_type x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN void std_vector_Sl_VecFactor_Sg__append(std::vector< VecFactor > *self,std::vector< std::vector< dai::TFactor< double >,std::allocator< dai::TFactor< double > > > >::value_type x){
      self->push_back(x);
    }
SWIGINTERN std::vector< std::vector< dai::TFactor< double >,std::allocator< dai::TFactor< double > > > >::iterator std_vector_Sl_VecFactor_Sg__erase__SWIG_0(std::vector< VecFactor > *self,std::vector< std::vector< dai::TFactor< double >,std::allocator< dai::TFactor< double > > > >::iterator pos){ return self->erase(pos); }
SWIGINTERN std::vector< std::vector< dai::TFactor< double >,std::allocator< dai::TFactor< double > > > >::iterator std_vector_Sl_VecFactor_Sg__erase__SWIG_1(std::vector< VecFactor > *self,std::vector< std::vector< dai::TFactor< double >,std::allocator< dai::TFactor< double > > > >::iterator first,std::vector< std::vector< dai::TFactor< double >,std::allocator< dai::TFactor< double > > > >::iterator last){ return self->erase(first, last); }
SWIGINTERN std::vector< std::vector< dai::TFactor< double >,std::allocator< dai::TFactor< double > > > >::iterator std_vector_Sl_VecFactor_Sg__insert__SWIG_0(std::vector< VecFactor > *self,std::vector< std::vector< dai::TFactor< double >,std::allocator< dai::TFactor< double > > > >::iterator pos,std::vector< std::vector< dai::TFactor< double >,std::allocator< dai::TFactor< double > > > >::value_type const &x){ return self->insert(pos, x); }
SWIGINTERN void std_vector_Sl_VecFactor_Sg__insert__SWIG_1(std::vector< VecFactor > *self,std::vector< std::vector< dai::TFactor< double >,std::allocator< dai::TFactor< double > > > >::iterator pos,std::vector< std::vector< dai::TFactor< double >,std::allocator< dai::TFactor< double > > > >::size_type n,std::vector< std::vector< dai::TFactor< double >,std::allocator< dai::TFactor< double > > > >::value_type const &x){ self->insert(pos, n, x); }
SWIGINTERN char const *dai_GraphAL___str__(dai::GraphAL const *self){ return (*self).toString().c_str(); }
SWIGINTERN std::string dai_GraphAL___str(dai::GraphAL const *self){ return (*self).toString(); }
SWIGINTERN char const *dai_BipartiteGraph___str__(dai::BipartiteGraph const *self){ return (*self).toString().c_str(); }
SWIGINTERN std::string dai_BipartiteGraph___str(dai::BipartiteGraph const *self){ return (*self).toString(); }



SWIGINTERN char const *dai_FactorGraph___str__(dai::FactorGraph const *self){ return (*self).toString().c_str(); }
SWIGINTERN std::string dai_FactorGraph___str(dai::FactorGraph const *self){ return (*self).toString(); }
SWIGINTERN void dai_FactorGraph_printDot__SWIG_1(dai::FactorGraph const *self,std::string const &fname){
      std::ofstream o(fname.c_str(), std::ofstream::out);
      self->printDot(o);
      o.close();
    }
SWIGINTERN char const *dai_RegionGraph___str__(dai::RegionGraph const *self){ return (*self).toString().c_str(); }
SWIGINTERN std::string dai_RegionGraph___str(dai::RegionGraph const *self){ return (*self).toString(); }

  namespace swig {
    template <>  struct traits< mpz_class > {
      typedef pointer_category category;
      static const char* type_name() { return"mpz_class"; }
    };
  }


  namespace swig {




















































    template <class T, class U >
    struct traits_asptr<std::pair<T,U> >  {
      typedef std::pair<T,U> value_type;

      static int get_pair(const octave_value& first, octave_value second,
			  std::pair<T,U> **val) 
      {
	if (val) {
	  value_type *vp = (new std::pair<T,U>());
	  T *pfirst = &(vp->first);
	  int res1 = swig::asval(first, pfirst);
	  if (!SWIG_IsOK(res1)) {
	    delete vp;
	    return res1;
	  }
	  U *psecond = &(vp->second);
	  int res2 = swig::asval(second, psecond);
	  if (!SWIG_IsOK(res2)) {
	    delete vp;
	    return res2;
	  }
	  *val = vp;
	  return SWIG_AddNewMask(res1 > res2 ? res1 : res2);
	} else {
	  T *pfirst = 0;
	  int res1 = swig::asval(first, pfirst);
	  if (!SWIG_IsOK(res1))
	    return res1;
	  U *psecond = 0;
	  int res2 = swig::asval(second, psecond);
	  if (!SWIG_IsOK(res2))
	    return res2;
	  return res1 > res2 ? res1 : res2;
	}
	return SWIG_ERROR;
      }

      static int asptr(const octave_value& obj, std::pair<T,U> **val) {
	if (obj.is_cell()) {
	  Cell c=obj.cell_value();
	  if (c.numel()<2) {
	    error("pair from Cell array requires at least two elements");
	    return SWIG_ERROR;
	  }
	  return get_pair(c(0),c(1),val);
	} else {
	  value_type *p;
	  swig_type_info *descriptor = swig::type_info<value_type>();
	  int res = descriptor ? SWIG_ConvertPtr(obj, (void **)&p, descriptor, 0) : SWIG_ERROR;
	  if (SWIG_IsOK(res) && val)
	    *val = p;
	  return res;
	}
	return SWIG_ERROR;
      }
    };


    template <class T, class U >
    struct traits_from<std::pair<T,U> >   {
      static octave_value from(const std::pair<T,U>& val) {
	Cell c(1,2);
	c(0)=swig::from(val.first);
	c(1)=swig::from(val.second);
	return c;
      }
    };
  }


      namespace swig {
	template <>  struct traits<std::pair< size_t, mpz_class > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::pair<" "size_t" "," "mpz_class" " >";
	  }
	};
      }
    
SWIGINTERN void dai_PropertySet___setitem__(dai::PropertySet *self,char *name,char *val){
        self->set(std::string(name), std::string(val));
    }
SWIGINTERN char const *dai_PropertySet___str__(dai::PropertySet const *self){ return (*self).toString().c_str(); }
SWIGINTERN std::string dai_PropertySet___str(dai::PropertySet const *self){ return (*self).toString(); }
SWIGINTERN void dai_IndexFor_next(dai::IndexFor *self){ return (*self)++; }
SWIGINTERN size_t dai_Permute___getitem__(dai::Permute const *self,int i){return (*self)[i];}
SWIGINTERN size_t dai_Permute___paren__(dai::Permute const *self,int i){return (*self)[i];}
SWIGINTERN void dai_multifor_next(dai::multifor *self){ return (*self)++; }
SWIGINTERN size_t dai_multifor___getitem__(dai::multifor const *self,int i){return (*self)[i];}
SWIGINTERN size_t dai_multifor___paren__(dai::multifor const *self,int i){return (*self)[i];}
SWIGINTERN void dai_State_next(dai::State *self){ return (*self)++; }

SWIG_DEFUN( delete_OctSwigIterator, _wrap_delete_OctSwigIterator, std::string() ) {
  swig::OctSwigIterator *arg1 = (swig::OctSwigIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("delete_OctSwigIterator",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_swig__OctSwigIterator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_OctSwigIterator" "', argument " "1"" of type '" "swig::OctSwigIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::OctSwigIterator * >(argp1);
  delete arg1;
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( OctSwigIterator_value, _wrap_OctSwigIterator_value, std::string() ) {
  swig::OctSwigIterator *arg1 = (swig::OctSwigIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  octave_value result;
  
  if (!SWIG_check_num_args("OctSwigIterator_value",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_swig__OctSwigIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OctSwigIterator_value" "', argument " "1"" of type '" "swig::OctSwigIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::OctSwigIterator * >(argp1);
  try {
    result = ((swig::OctSwigIterator const *)arg1)->value();
  }
  catch(swig::stop_iteration &_e) {
    {
      error("stop_iteration exception");
      SWIG_fail;
    }
  }
  
  _outv = result;
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static octave_value_list _wrap_OctSwigIterator_incr__SWIG_0 (const octave_value_list& args, int nargout) {
  swig::OctSwigIterator *arg1 = (swig::OctSwigIterator *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  swig::OctSwigIterator *result = 0 ;
  
  if (!SWIG_check_num_args("OctSwigIterator_incr",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_swig__OctSwigIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OctSwigIterator_incr" "', argument " "1"" of type '" "swig::OctSwigIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::OctSwigIterator * >(argp1);
  ecode2 = SWIG_AsVal_size_t(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "OctSwigIterator_incr" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  try {
    result = (swig::OctSwigIterator *)(arg1)->incr(arg2);
  }
  catch(swig::stop_iteration &_e) {
    {
      error("stop_iteration exception");
      SWIG_fail;
    }
  }
  
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__OctSwigIterator, 0 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static octave_value_list _wrap_OctSwigIterator_incr__SWIG_1 (const octave_value_list& args, int nargout) {
  swig::OctSwigIterator *arg1 = (swig::OctSwigIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  swig::OctSwigIterator *result = 0 ;
  
  if (!SWIG_check_num_args("OctSwigIterator_incr",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_swig__OctSwigIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OctSwigIterator_incr" "', argument " "1"" of type '" "swig::OctSwigIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::OctSwigIterator * >(argp1);
  try {
    result = (swig::OctSwigIterator *)(arg1)->incr();
  }
  catch(swig::stop_iteration &_e) {
    {
      error("stop_iteration exception");
      SWIG_fail;
    }
  }
  
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__OctSwigIterator, 0 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( OctSwigIterator_incr, _wrap_OctSwigIterator_incr, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[2]={
    octave_value_ref(args,0),octave_value_ref(args,1)
  };
  
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__OctSwigIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_OctSwigIterator_incr__SWIG_1(args, nargout);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__OctSwigIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_OctSwigIterator_incr__SWIG_0(args, nargout);
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


static octave_value_list _wrap_OctSwigIterator_decr__SWIG_0 (const octave_value_list& args, int nargout) {
  swig::OctSwigIterator *arg1 = (swig::OctSwigIterator *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  swig::OctSwigIterator *result = 0 ;
  
  if (!SWIG_check_num_args("OctSwigIterator_decr",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_swig__OctSwigIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OctSwigIterator_decr" "', argument " "1"" of type '" "swig::OctSwigIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::OctSwigIterator * >(argp1);
  ecode2 = SWIG_AsVal_size_t(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "OctSwigIterator_decr" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  try {
    result = (swig::OctSwigIterator *)(arg1)->decr(arg2);
  }
  catch(swig::stop_iteration &_e) {
    {
      error("stop_iteration exception");
      SWIG_fail;
    }
  }
  
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__OctSwigIterator, 0 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static octave_value_list _wrap_OctSwigIterator_decr__SWIG_1 (const octave_value_list& args, int nargout) {
  swig::OctSwigIterator *arg1 = (swig::OctSwigIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  swig::OctSwigIterator *result = 0 ;
  
  if (!SWIG_check_num_args("OctSwigIterator_decr",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_swig__OctSwigIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OctSwigIterator_decr" "', argument " "1"" of type '" "swig::OctSwigIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::OctSwigIterator * >(argp1);
  try {
    result = (swig::OctSwigIterator *)(arg1)->decr();
  }
  catch(swig::stop_iteration &_e) {
    {
      error("stop_iteration exception");
      SWIG_fail;
    }
  }
  
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__OctSwigIterator, 0 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( OctSwigIterator_decr, _wrap_OctSwigIterator_decr, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[2]={
    octave_value_ref(args,0),octave_value_ref(args,1)
  };
  
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__OctSwigIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_OctSwigIterator_decr__SWIG_1(args, nargout);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__OctSwigIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_OctSwigIterator_decr__SWIG_0(args, nargout);
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


SWIG_DEFUN( OctSwigIterator_distance, _wrap_OctSwigIterator_distance, std::string() ) {
  swig::OctSwigIterator *arg1 = (swig::OctSwigIterator *) 0 ;
  swig::OctSwigIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  ptrdiff_t result;
  
  if (!SWIG_check_num_args("OctSwigIterator_distance",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_swig__OctSwigIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OctSwigIterator_distance" "', argument " "1"" of type '" "swig::OctSwigIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::OctSwigIterator * >(argp1);
  res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_swig__OctSwigIterator,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "OctSwigIterator_distance" "', argument " "2"" of type '" "swig::OctSwigIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "OctSwigIterator_distance" "', argument " "2"" of type '" "swig::OctSwigIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::OctSwigIterator * >(argp2);
  try {
    result = ((swig::OctSwigIterator const *)arg1)->distance((swig::OctSwigIterator const &)*arg2);
  }
  catch(std::invalid_argument &_e) {
    error("C++ side threw an exception of type " "std::invalid_argument"); SWIG_fail;
  }
  
  _outv = SWIG_From_ptrdiff_t(static_cast< ptrdiff_t >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( OctSwigIterator_equal, _wrap_OctSwigIterator_equal, std::string() ) {
  swig::OctSwigIterator *arg1 = (swig::OctSwigIterator *) 0 ;
  swig::OctSwigIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  bool result;
  
  if (!SWIG_check_num_args("OctSwigIterator_equal",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_swig__OctSwigIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OctSwigIterator_equal" "', argument " "1"" of type '" "swig::OctSwigIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::OctSwigIterator * >(argp1);
  res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_swig__OctSwigIterator,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "OctSwigIterator_equal" "', argument " "2"" of type '" "swig::OctSwigIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "OctSwigIterator_equal" "', argument " "2"" of type '" "swig::OctSwigIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::OctSwigIterator * >(argp2);
  try {
    result = (bool)((swig::OctSwigIterator const *)arg1)->equal((swig::OctSwigIterator const &)*arg2);
  }
  catch(std::invalid_argument &_e) {
    error("C++ side threw an exception of type " "std::invalid_argument"); SWIG_fail;
  }
  
  _outv = SWIG_From_bool(static_cast< bool >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( OctSwigIterator_copy, _wrap_OctSwigIterator_copy, std::string() ) {
  swig::OctSwigIterator *arg1 = (swig::OctSwigIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  swig::OctSwigIterator *result = 0 ;
  
  if (!SWIG_check_num_args("OctSwigIterator_copy",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_swig__OctSwigIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OctSwigIterator_copy" "', argument " "1"" of type '" "swig::OctSwigIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::OctSwigIterator * >(argp1);
  result = (swig::OctSwigIterator *)((swig::OctSwigIterator const *)arg1)->copy();
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__OctSwigIterator, 1 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( OctSwigIterator_next, _wrap_OctSwigIterator_next, std::string() ) {
  swig::OctSwigIterator *arg1 = (swig::OctSwigIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  octave_value result;
  
  if (!SWIG_check_num_args("OctSwigIterator_next",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_swig__OctSwigIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OctSwigIterator_next" "', argument " "1"" of type '" "swig::OctSwigIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::OctSwigIterator * >(argp1);
  try {
    result = (arg1)->next();
  }
  catch(swig::stop_iteration &_e) {
    {
      error("stop_iteration exception");
      SWIG_fail;
    }
  }
  
  _outv = result;
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( OctSwigIterator_previous, _wrap_OctSwigIterator_previous, std::string() ) {
  swig::OctSwigIterator *arg1 = (swig::OctSwigIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  octave_value result;
  
  if (!SWIG_check_num_args("OctSwigIterator_previous",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_swig__OctSwigIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OctSwigIterator_previous" "', argument " "1"" of type '" "swig::OctSwigIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::OctSwigIterator * >(argp1);
  try {
    result = (arg1)->previous();
  }
  catch(swig::stop_iteration &_e) {
    {
      error("stop_iteration exception");
      SWIG_fail;
    }
  }
  
  _outv = result;
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( OctSwigIterator_advance, _wrap_OctSwigIterator_advance, std::string() ) {
  swig::OctSwigIterator *arg1 = (swig::OctSwigIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  swig::OctSwigIterator *result = 0 ;
  
  if (!SWIG_check_num_args("OctSwigIterator_advance",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_swig__OctSwigIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OctSwigIterator_advance" "', argument " "1"" of type '" "swig::OctSwigIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::OctSwigIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "OctSwigIterator_advance" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::OctSwigIterator *)(arg1)->advance(arg2);
  }
  catch(swig::stop_iteration &_e) {
    {
      error("stop_iteration exception");
      SWIG_fail;
    }
  }
  
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__OctSwigIterator, 0 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( OctSwigIterator___eq__, _wrap_OctSwigIterator___eq__, std::string() ) {
  swig::OctSwigIterator *arg1 = (swig::OctSwigIterator *) 0 ;
  swig::OctSwigIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  bool result;
  
  if (!SWIG_check_num_args("OctSwigIterator___eq__",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_swig__OctSwigIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OctSwigIterator___eq__" "', argument " "1"" of type '" "swig::OctSwigIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::OctSwigIterator * >(argp1);
  res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_swig__OctSwigIterator,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "OctSwigIterator___eq__" "', argument " "2"" of type '" "swig::OctSwigIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "OctSwigIterator___eq__" "', argument " "2"" of type '" "swig::OctSwigIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::OctSwigIterator * >(argp2);
  result = (bool)((swig::OctSwigIterator const *)arg1)->operator ==((swig::OctSwigIterator const &)*arg2);
  _outv = SWIG_From_bool(static_cast< bool >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( OctSwigIterator___ne__, _wrap_OctSwigIterator___ne__, std::string() ) {
  swig::OctSwigIterator *arg1 = (swig::OctSwigIterator *) 0 ;
  swig::OctSwigIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  bool result;
  
  if (!SWIG_check_num_args("OctSwigIterator___ne__",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_swig__OctSwigIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OctSwigIterator___ne__" "', argument " "1"" of type '" "swig::OctSwigIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::OctSwigIterator * >(argp1);
  res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_swig__OctSwigIterator,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "OctSwigIterator___ne__" "', argument " "2"" of type '" "swig::OctSwigIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "OctSwigIterator___ne__" "', argument " "2"" of type '" "swig::OctSwigIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::OctSwigIterator * >(argp2);
  result = (bool)((swig::OctSwigIterator const *)arg1)->operator !=((swig::OctSwigIterator const &)*arg2);
  _outv = SWIG_From_bool(static_cast< bool >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( OctSwigIterator___incr__, _wrap_OctSwigIterator___incr__, std::string() ) {
  swig::OctSwigIterator *arg1 = (swig::OctSwigIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  swig::OctSwigIterator *result = 0 ;
  
  if (!SWIG_check_num_args("OctSwigIterator___incr__",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_swig__OctSwigIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OctSwigIterator___incr__" "', argument " "1"" of type '" "swig::OctSwigIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::OctSwigIterator * >(argp1);
  result = (swig::OctSwigIterator *)(arg1)->operator ++();
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__OctSwigIterator, 0 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( OctSwigIterator___decr__, _wrap_OctSwigIterator___decr__, std::string() ) {
  swig::OctSwigIterator *arg1 = (swig::OctSwigIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  swig::OctSwigIterator *result = 0 ;
  
  if (!SWIG_check_num_args("OctSwigIterator___decr__",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_swig__OctSwigIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OctSwigIterator___decr__" "', argument " "1"" of type '" "swig::OctSwigIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::OctSwigIterator * >(argp1);
  result = (swig::OctSwigIterator *)(arg1)->operator --();
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__OctSwigIterator, 0 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( OctSwigIterator___add__, _wrap_OctSwigIterator___add__, std::string() ) {
  swig::OctSwigIterator *arg1 = (swig::OctSwigIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  swig::OctSwigIterator *result = 0 ;
  
  if (!SWIG_check_num_args("OctSwigIterator___add__",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_swig__OctSwigIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OctSwigIterator___add__" "', argument " "1"" of type '" "swig::OctSwigIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::OctSwigIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "OctSwigIterator___add__" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::OctSwigIterator *)((swig::OctSwigIterator const *)arg1)->operator +(arg2);
  }
  catch(swig::stop_iteration &_e) {
    {
      error("stop_iteration exception");
      SWIG_fail;
    }
  }
  
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__OctSwigIterator, 1 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static octave_value_list _wrap_OctSwigIterator___sub____SWIG_0 (const octave_value_list& args, int nargout) {
  swig::OctSwigIterator *arg1 = (swig::OctSwigIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  swig::OctSwigIterator *result = 0 ;
  
  if (!SWIG_check_num_args("OctSwigIterator___sub__",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_swig__OctSwigIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OctSwigIterator___sub__" "', argument " "1"" of type '" "swig::OctSwigIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::OctSwigIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "OctSwigIterator___sub__" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::OctSwigIterator *)((swig::OctSwigIterator const *)arg1)->operator -(arg2);
  }
  catch(swig::stop_iteration &_e) {
    {
      error("stop_iteration exception");
      SWIG_fail;
    }
  }
  
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__OctSwigIterator, 1 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static octave_value_list _wrap_OctSwigIterator___sub____SWIG_1 (const octave_value_list& args, int nargout) {
  swig::OctSwigIterator *arg1 = (swig::OctSwigIterator *) 0 ;
  swig::OctSwigIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  ptrdiff_t result;
  
  if (!SWIG_check_num_args("OctSwigIterator___sub__",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_swig__OctSwigIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OctSwigIterator___sub__" "', argument " "1"" of type '" "swig::OctSwigIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::OctSwigIterator * >(argp1);
  res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_swig__OctSwigIterator,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "OctSwigIterator___sub__" "', argument " "2"" of type '" "swig::OctSwigIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "OctSwigIterator___sub__" "', argument " "2"" of type '" "swig::OctSwigIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::OctSwigIterator * >(argp2);
  result = ((swig::OctSwigIterator const *)arg1)->operator -((swig::OctSwigIterator const &)*arg2);
  _outv = SWIG_From_ptrdiff_t(static_cast< ptrdiff_t >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( OctSwigIterator___sub__, _wrap_OctSwigIterator___sub__, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[2]={
    octave_value_ref(args,0),octave_value_ref(args,1)
  };
  
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__OctSwigIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_swig__OctSwigIterator, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_OctSwigIterator___sub____SWIG_1(args, nargout);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__OctSwigIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_OctSwigIterator___sub____SWIG_0(args, nargout);
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


static swig_octave_member swig_OctSwigIterator_members[] = {
{"value",_wrap_OctSwigIterator_value,0,0,0,0},
{"incr",_wrap_OctSwigIterator_incr,0,0,0,0},
{"decr",_wrap_OctSwigIterator_decr,0,0,0,0},
{"distance",_wrap_OctSwigIterator_distance,0,0,0,0},
{"equal",_wrap_OctSwigIterator_equal,0,0,0,0},
{"copy",_wrap_OctSwigIterator_copy,0,0,0,0},
{"next",_wrap_OctSwigIterator_next,0,0,0,0},
{"previous",_wrap_OctSwigIterator_previous,0,0,0,0},
{"advance",_wrap_OctSwigIterator_advance,0,0,0,0},
{"__eq__",_wrap_OctSwigIterator___eq__,0,0,0,0},
{"__ne__",_wrap_OctSwigIterator___ne__,0,0,0,0},
{"__incr__",_wrap_OctSwigIterator___incr__,0,0,0,0},
{"__decr__",_wrap_OctSwigIterator___decr__,0,0,0,0},
{"__add__",_wrap_OctSwigIterator___add__,0,0,0,0},
{"__sub__",_wrap_OctSwigIterator___sub__,0,0,0,0},
{0,0,0,0,0,0}
};
static const char *swig_OctSwigIterator_base_names[] = {0};
static const swig_type_info *swig_OctSwigIterator_base[] = {0};
static swig_octave_class _wrap_class_OctSwigIterator = {"OctSwigIterator", &SWIGTYPE_p_swig__OctSwigIterator,0,0,0,_wrap_delete_OctSwigIterator,swig_OctSwigIterator_members,swig_OctSwigIterator_base_names,swig_OctSwigIterator_base };

SWIG_DEFUN( IntVector_pop, _wrap_IntVector_pop, std::string() ) {
  std::vector< size_t > *arg1 = (std::vector< size_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  std::vector< size_t >::value_type result;
  
  if (!SWIG_check_num_args("IntVector_pop",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_std__vectorT_size_t_std__allocatorT_size_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVector_pop" "', argument " "1"" of type '" "std::vector< size_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< size_t > * >(argp1);
  try {
    result = std_vector_Sl_size_t_Sg__pop(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  _outv = SWIG_From_size_t(static_cast< size_t >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( IntVector___paren__, _wrap_IntVector___paren__, std::string() ) {
  std::vector< size_t > *arg1 = (std::vector< size_t > *) 0 ;
  std::vector< size_t >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  std::vector< size_t >::value_type result;
  
  if (!SWIG_check_num_args("IntVector___paren__",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_std__vectorT_size_t_std__allocatorT_size_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVector___paren__" "', argument " "1"" of type '" "std::vector< size_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< size_t > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IntVector___paren__" "', argument " "2"" of type '" "std::vector< size_t >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< size_t >::difference_type >(val2);
  try {
    result = std_vector_Sl_size_t_Sg____paren__(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  _outv = SWIG_From_size_t(static_cast< size_t >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( IntVector___paren_asgn__, _wrap_IntVector___paren_asgn__, std::string() ) {
  std::vector< size_t > *arg1 = (std::vector< size_t > *) 0 ;
  std::vector< size_t >::difference_type arg2 ;
  std::vector< size_t >::value_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("IntVector___paren_asgn__",args.length(),3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_std__vectorT_size_t_std__allocatorT_size_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVector___paren_asgn__" "', argument " "1"" of type '" "std::vector< size_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< size_t > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IntVector___paren_asgn__" "', argument " "2"" of type '" "std::vector< size_t >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< size_t >::difference_type >(val2);
  ecode3 = SWIG_AsVal_size_t(args(2), &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IntVector___paren_asgn__" "', argument " "3"" of type '" "std::vector< size_t >::value_type""'");
  } 
  arg3 = static_cast< std::vector< size_t >::value_type >(val3);
  try {
    std_vector_Sl_size_t_Sg____paren_asgn__(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( IntVector_append, _wrap_IntVector_append, std::string() ) {
  std::vector< size_t > *arg1 = (std::vector< size_t > *) 0 ;
  std::vector< size_t >::value_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("IntVector_append",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_std__vectorT_size_t_std__allocatorT_size_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVector_append" "', argument " "1"" of type '" "std::vector< size_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< size_t > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IntVector_append" "', argument " "2"" of type '" "std::vector< size_t >::value_type""'");
  } 
  arg2 = static_cast< std::vector< size_t >::value_type >(val2);
  std_vector_Sl_size_t_Sg__append(arg1,arg2);
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static octave_value_list _wrap_new_IntVector__SWIG_0 (const octave_value_list& args, int nargout) {
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  std::vector< size_t > *result = 0 ;
  
  if (!SWIG_check_num_args("new_IntVector",args.length(),0,0,0)) {
    SWIG_fail;
  }
  result = (std::vector< size_t > *)new std::vector< size_t >();
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_size_t_std__allocatorT_size_t_t_t, 1 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static octave_value_list _wrap_new_IntVector__SWIG_1 (const octave_value_list& args, int nargout) {
  std::vector< size_t > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  std::vector< size_t > *result = 0 ;
  
  if (!SWIG_check_num_args("new_IntVector",args.length(),1,1,0)) {
    SWIG_fail;
  }
  {
    std::vector< size_t,std::allocator< size_t > > *ptr = (std::vector< size_t,std::allocator< size_t > > *)0;
    res1 = swig::asptr(args(0), &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_IntVector" "', argument " "1"" of type '" "std::vector< size_t > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_IntVector" "', argument " "1"" of type '" "std::vector< size_t > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (std::vector< size_t > *)new std::vector< size_t >((std::vector< size_t > const &)*arg1);
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_size_t_std__allocatorT_size_t_t_t, 1 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  if (SWIG_IsNewObj(res1)) delete arg1;
  return _out;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return octave_value_list();
}


SWIG_DEFUN( IntVector_empty, _wrap_IntVector_empty, std::string() ) {
  std::vector< size_t > *arg1 = (std::vector< size_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  bool result;
  
  if (!SWIG_check_num_args("IntVector_empty",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_std__vectorT_size_t_std__allocatorT_size_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVector_empty" "', argument " "1"" of type '" "std::vector< size_t > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< size_t > * >(argp1);
  result = (bool)((std::vector< size_t > const *)arg1)->empty();
  _outv = SWIG_From_bool(static_cast< bool >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( IntVector_size, _wrap_IntVector_size, std::string() ) {
  std::vector< size_t > *arg1 = (std::vector< size_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  std::vector< size_t >::size_type result;
  
  if (!SWIG_check_num_args("IntVector_size",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_std__vectorT_size_t_std__allocatorT_size_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVector_size" "', argument " "1"" of type '" "std::vector< size_t > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< size_t > * >(argp1);
  result = ((std::vector< size_t > const *)arg1)->size();
  _outv = SWIG_From_size_t(static_cast< size_t >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( IntVector_swap, _wrap_IntVector_swap, std::string() ) {
  std::vector< size_t > *arg1 = (std::vector< size_t > *) 0 ;
  std::vector< size_t > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("IntVector_swap",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_std__vectorT_size_t_std__allocatorT_size_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVector_swap" "', argument " "1"" of type '" "std::vector< size_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< size_t > * >(argp1);
  res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_std__vectorT_size_t_std__allocatorT_size_t_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IntVector_swap" "', argument " "2"" of type '" "std::vector< size_t > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IntVector_swap" "', argument " "2"" of type '" "std::vector< size_t > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< size_t > * >(argp2);
  (arg1)->swap(*arg2);
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( IntVector_begin, _wrap_IntVector_begin, std::string() ) {
  std::vector< size_t > *arg1 = (std::vector< size_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  std::vector< size_t >::iterator result;
  
  if (!SWIG_check_num_args("IntVector_begin",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_std__vectorT_size_t_std__allocatorT_size_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVector_begin" "', argument " "1"" of type '" "std::vector< size_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< size_t > * >(argp1);
  result = (arg1)->begin();
  _outv = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< size_t >::iterator & >(result)),
    swig::OctSwigIterator::descriptor(),SWIG_POINTER_OWN);
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( IntVector_end, _wrap_IntVector_end, std::string() ) {
  std::vector< size_t > *arg1 = (std::vector< size_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  std::vector< size_t >::iterator result;
  
  if (!SWIG_check_num_args("IntVector_end",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_std__vectorT_size_t_std__allocatorT_size_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVector_end" "', argument " "1"" of type '" "std::vector< size_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< size_t > * >(argp1);
  result = (arg1)->end();
  _outv = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< size_t >::iterator & >(result)),
    swig::OctSwigIterator::descriptor(),SWIG_POINTER_OWN);
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( IntVector_rbegin, _wrap_IntVector_rbegin, std::string() ) {
  std::vector< size_t > *arg1 = (std::vector< size_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  std::vector< size_t >::reverse_iterator result;
  
  if (!SWIG_check_num_args("IntVector_rbegin",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_std__vectorT_size_t_std__allocatorT_size_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVector_rbegin" "', argument " "1"" of type '" "std::vector< size_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< size_t > * >(argp1);
  result = (arg1)->rbegin();
  _outv = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< size_t >::reverse_iterator & >(result)),
    swig::OctSwigIterator::descriptor(),SWIG_POINTER_OWN);
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( IntVector_rend, _wrap_IntVector_rend, std::string() ) {
  std::vector< size_t > *arg1 = (std::vector< size_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  std::vector< size_t >::reverse_iterator result;
  
  if (!SWIG_check_num_args("IntVector_rend",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_std__vectorT_size_t_std__allocatorT_size_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVector_rend" "', argument " "1"" of type '" "std::vector< size_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< size_t > * >(argp1);
  result = (arg1)->rend();
  _outv = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< size_t >::reverse_iterator & >(result)),
    swig::OctSwigIterator::descriptor(),SWIG_POINTER_OWN);
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( IntVector_clear, _wrap_IntVector_clear, std::string() ) {
  std::vector< size_t > *arg1 = (std::vector< size_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("IntVector_clear",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_std__vectorT_size_t_std__allocatorT_size_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVector_clear" "', argument " "1"" of type '" "std::vector< size_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< size_t > * >(argp1);
  (arg1)->clear();
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( IntVector_get_allocator, _wrap_IntVector_get_allocator, std::string() ) {
  std::vector< size_t > *arg1 = (std::vector< size_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  SwigValueWrapper< std::allocator< size_t > > result;
  
  if (!SWIG_check_num_args("IntVector_get_allocator",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_std__vectorT_size_t_std__allocatorT_size_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVector_get_allocator" "', argument " "1"" of type '" "std::vector< size_t > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< size_t > * >(argp1);
  result = ((std::vector< size_t > const *)arg1)->get_allocator();
  _outv = SWIG_NewPointerObj((new std::vector< size_t >::allocator_type(static_cast< const std::vector< size_t >::allocator_type& >(result))), SWIGTYPE_p_std__allocatorT_size_t_t, SWIG_POINTER_OWN |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static octave_value_list _wrap_new_IntVector__SWIG_2 (const octave_value_list& args, int nargout) {
  std::vector< size_t >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  std::vector< size_t > *result = 0 ;
  
  if (!SWIG_check_num_args("new_IntVector",args.length(),1,1,0)) {
    SWIG_fail;
  }
  ecode1 = SWIG_AsVal_size_t(args(0), &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_IntVector" "', argument " "1"" of type '" "std::vector< size_t >::size_type""'");
  } 
  arg1 = static_cast< std::vector< size_t >::size_type >(val1);
  result = (std::vector< size_t > *)new std::vector< size_t >(arg1);
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_size_t_std__allocatorT_size_t_t_t, 1 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( IntVector_pop_back, _wrap_IntVector_pop_back, std::string() ) {
  std::vector< size_t > *arg1 = (std::vector< size_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("IntVector_pop_back",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_std__vectorT_size_t_std__allocatorT_size_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVector_pop_back" "', argument " "1"" of type '" "std::vector< size_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< size_t > * >(argp1);
  (arg1)->pop_back();
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static octave_value_list _wrap_IntVector_resize__SWIG_0 (const octave_value_list& args, int nargout) {
  std::vector< size_t > *arg1 = (std::vector< size_t > *) 0 ;
  std::vector< size_t >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("IntVector_resize",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_std__vectorT_size_t_std__allocatorT_size_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVector_resize" "', argument " "1"" of type '" "std::vector< size_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< size_t > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IntVector_resize" "', argument " "2"" of type '" "std::vector< size_t >::size_type""'");
  } 
  arg2 = static_cast< std::vector< size_t >::size_type >(val2);
  (arg1)->resize(arg2);
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static octave_value_list _wrap_IntVector_erase__SWIG_0 (const octave_value_list& args, int nargout) {
  std::vector< size_t > *arg1 = (std::vector< size_t > *) 0 ;
  std::vector< size_t >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::OctSwigIterator *iter2 = 0 ;
  int res2 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  std::vector< size_t >::iterator result;
  
  if (!SWIG_check_num_args("IntVector_erase",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_std__vectorT_size_t_std__allocatorT_size_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVector_erase" "', argument " "1"" of type '" "std::vector< size_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< size_t > * >(argp1);
  res2 = SWIG_ConvertPtr(args(1), SWIG_as_voidptrptr(&iter2), swig::OctSwigIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "IntVector_erase" "', argument " "2"" of type '" "std::vector< size_t >::iterator""'");
  } else {
    swig::OctSwigIterator_T<std::vector< size_t >::iterator > *iter_t = dynamic_cast<swig::OctSwigIterator_T<std::vector< size_t >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "IntVector_erase" "', argument " "2"" of type '" "std::vector< size_t >::iterator""'");
    }
  }
  result = std_vector_Sl_size_t_Sg__erase__SWIG_0(arg1,arg2);
  _outv = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< size_t >::iterator & >(result)),
    swig::OctSwigIterator::descriptor(),SWIG_POINTER_OWN);
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static octave_value_list _wrap_IntVector_erase__SWIG_1 (const octave_value_list& args, int nargout) {
  std::vector< size_t > *arg1 = (std::vector< size_t > *) 0 ;
  std::vector< size_t >::iterator arg2 ;
  std::vector< size_t >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::OctSwigIterator *iter2 = 0 ;
  int res2 ;
  swig::OctSwigIterator *iter3 = 0 ;
  int res3 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  std::vector< size_t >::iterator result;
  
  if (!SWIG_check_num_args("IntVector_erase",args.length(),3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_std__vectorT_size_t_std__allocatorT_size_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVector_erase" "', argument " "1"" of type '" "std::vector< size_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< size_t > * >(argp1);
  res2 = SWIG_ConvertPtr(args(1), SWIG_as_voidptrptr(&iter2), swig::OctSwigIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "IntVector_erase" "', argument " "2"" of type '" "std::vector< size_t >::iterator""'");
  } else {
    swig::OctSwigIterator_T<std::vector< size_t >::iterator > *iter_t = dynamic_cast<swig::OctSwigIterator_T<std::vector< size_t >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "IntVector_erase" "', argument " "2"" of type '" "std::vector< size_t >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(args(2), SWIG_as_voidptrptr(&iter3), swig::OctSwigIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "IntVector_erase" "', argument " "3"" of type '" "std::vector< size_t >::iterator""'");
  } else {
    swig::OctSwigIterator_T<std::vector< size_t >::iterator > *iter_t = dynamic_cast<swig::OctSwigIterator_T<std::vector< size_t >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "IntVector_erase" "', argument " "3"" of type '" "std::vector< size_t >::iterator""'");
    }
  }
  result = std_vector_Sl_size_t_Sg__erase__SWIG_1(arg1,arg2,arg3);
  _outv = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< size_t >::iterator & >(result)),
    swig::OctSwigIterator::descriptor(),SWIG_POINTER_OWN);
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( IntVector_erase, _wrap_IntVector_erase, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[3]={
    octave_value_ref(args,0),octave_value_ref(args,1),octave_value_ref(args,2)
  };
  
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< size_t,std::allocator< size_t > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::OctSwigIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::OctSwigIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::OctSwigIterator_T<std::vector< size_t >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_IntVector_erase__SWIG_0(args, nargout);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< size_t,std::allocator< size_t > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::OctSwigIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::OctSwigIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::OctSwigIterator_T<std::vector< size_t >::iterator > *>(iter) != 0));
      if (_v) {
        swig::OctSwigIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::OctSwigIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::OctSwigIterator_T<std::vector< size_t >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_IntVector_erase__SWIG_1(args, nargout);
        }
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


static octave_value_list _wrap_new_IntVector__SWIG_3 (const octave_value_list& args, int nargout) {
  std::vector< size_t >::size_type arg1 ;
  std::vector< size_t >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  std::vector< size_t >::value_type temp2 ;
  size_t val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  std::vector< size_t > *result = 0 ;
  
  if (!SWIG_check_num_args("new_IntVector",args.length(),2,2,0)) {
    SWIG_fail;
  }
  ecode1 = SWIG_AsVal_size_t(args(0), &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_IntVector" "', argument " "1"" of type '" "std::vector< size_t >::size_type""'");
  } 
  arg1 = static_cast< std::vector< size_t >::size_type >(val1);
  ecode2 = SWIG_AsVal_size_t(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_IntVector" "', argument " "2"" of type '" "std::vector< size_t >::value_type""'");
  } 
  temp2 = static_cast< std::vector< size_t >::value_type >(val2);
  arg2 = &temp2;
  result = (std::vector< size_t > *)new std::vector< size_t >(arg1,(std::vector< size_t >::value_type const &)*arg2);
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_size_t_std__allocatorT_size_t_t_t, 1 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( new_IntVector, _wrap_new_IntVector, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[2]={
    octave_value_ref(args,0),octave_value_ref(args,1)
  };
  
  if (argc == 0) {
    return _wrap_new_IntVector__SWIG_0(args, nargout);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_IntVector__SWIG_2(args, nargout);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< size_t,std::allocator< size_t > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_IntVector__SWIG_1(args, nargout);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_IntVector__SWIG_3(args, nargout);
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


SWIG_DEFUN( IntVector_push_back, _wrap_IntVector_push_back, std::string() ) {
  std::vector< size_t > *arg1 = (std::vector< size_t > *) 0 ;
  std::vector< size_t >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< size_t >::value_type temp2 ;
  size_t val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("IntVector_push_back",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_std__vectorT_size_t_std__allocatorT_size_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVector_push_back" "', argument " "1"" of type '" "std::vector< size_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< size_t > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IntVector_push_back" "', argument " "2"" of type '" "std::vector< size_t >::value_type""'");
  } 
  temp2 = static_cast< std::vector< size_t >::value_type >(val2);
  arg2 = &temp2;
  (arg1)->push_back((std::vector< size_t >::value_type const &)*arg2);
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( IntVector_front, _wrap_IntVector_front, std::string() ) {
  std::vector< size_t > *arg1 = (std::vector< size_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  std::vector< size_t >::value_type *result = 0 ;
  
  if (!SWIG_check_num_args("IntVector_front",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_std__vectorT_size_t_std__allocatorT_size_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVector_front" "', argument " "1"" of type '" "std::vector< size_t > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< size_t > * >(argp1);
  result = (std::vector< size_t >::value_type *) &((std::vector< size_t > const *)arg1)->front();
  _outv = SWIG_From_size_t(static_cast< size_t >(*result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( IntVector_back, _wrap_IntVector_back, std::string() ) {
  std::vector< size_t > *arg1 = (std::vector< size_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  std::vector< size_t >::value_type *result = 0 ;
  
  if (!SWIG_check_num_args("IntVector_back",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_std__vectorT_size_t_std__allocatorT_size_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVector_back" "', argument " "1"" of type '" "std::vector< size_t > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< size_t > * >(argp1);
  result = (std::vector< size_t >::value_type *) &((std::vector< size_t > const *)arg1)->back();
  _outv = SWIG_From_size_t(static_cast< size_t >(*result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( IntVector_assign, _wrap_IntVector_assign, std::string() ) {
  std::vector< size_t > *arg1 = (std::vector< size_t > *) 0 ;
  std::vector< size_t >::size_type arg2 ;
  std::vector< size_t >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  std::vector< size_t >::value_type temp3 ;
  size_t val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("IntVector_assign",args.length(),3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_std__vectorT_size_t_std__allocatorT_size_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVector_assign" "', argument " "1"" of type '" "std::vector< size_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< size_t > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IntVector_assign" "', argument " "2"" of type '" "std::vector< size_t >::size_type""'");
  } 
  arg2 = static_cast< std::vector< size_t >::size_type >(val2);
  ecode3 = SWIG_AsVal_size_t(args(2), &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IntVector_assign" "', argument " "3"" of type '" "std::vector< size_t >::value_type""'");
  } 
  temp3 = static_cast< std::vector< size_t >::value_type >(val3);
  arg3 = &temp3;
  (arg1)->assign(arg2,(std::vector< size_t >::value_type const &)*arg3);
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static octave_value_list _wrap_IntVector_resize__SWIG_1 (const octave_value_list& args, int nargout) {
  std::vector< size_t > *arg1 = (std::vector< size_t > *) 0 ;
  std::vector< size_t >::size_type arg2 ;
  std::vector< size_t >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  std::vector< size_t >::value_type temp3 ;
  size_t val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("IntVector_resize",args.length(),3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_std__vectorT_size_t_std__allocatorT_size_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVector_resize" "', argument " "1"" of type '" "std::vector< size_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< size_t > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IntVector_resize" "', argument " "2"" of type '" "std::vector< size_t >::size_type""'");
  } 
  arg2 = static_cast< std::vector< size_t >::size_type >(val2);
  ecode3 = SWIG_AsVal_size_t(args(2), &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IntVector_resize" "', argument " "3"" of type '" "std::vector< size_t >::value_type""'");
  } 
  temp3 = static_cast< std::vector< size_t >::value_type >(val3);
  arg3 = &temp3;
  (arg1)->resize(arg2,(std::vector< size_t >::value_type const &)*arg3);
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( IntVector_resize, _wrap_IntVector_resize, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[3]={
    octave_value_ref(args,0),octave_value_ref(args,1),octave_value_ref(args,2)
  };
  
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< size_t,std::allocator< size_t > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_IntVector_resize__SWIG_0(args, nargout);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< size_t,std::allocator< size_t > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_IntVector_resize__SWIG_1(args, nargout);
        }
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


static octave_value_list _wrap_IntVector_insert__SWIG_0 (const octave_value_list& args, int nargout) {
  std::vector< size_t > *arg1 = (std::vector< size_t > *) 0 ;
  std::vector< size_t >::iterator arg2 ;
  std::vector< size_t >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::OctSwigIterator *iter2 = 0 ;
  int res2 ;
  std::vector< size_t >::value_type temp3 ;
  size_t val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  std::vector< size_t >::iterator result;
  
  if (!SWIG_check_num_args("IntVector_insert",args.length(),3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_std__vectorT_size_t_std__allocatorT_size_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVector_insert" "', argument " "1"" of type '" "std::vector< size_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< size_t > * >(argp1);
  res2 = SWIG_ConvertPtr(args(1), SWIG_as_voidptrptr(&iter2), swig::OctSwigIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "IntVector_insert" "', argument " "2"" of type '" "std::vector< size_t >::iterator""'");
  } else {
    swig::OctSwigIterator_T<std::vector< size_t >::iterator > *iter_t = dynamic_cast<swig::OctSwigIterator_T<std::vector< size_t >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "IntVector_insert" "', argument " "2"" of type '" "std::vector< size_t >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(args(2), &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IntVector_insert" "', argument " "3"" of type '" "std::vector< size_t >::value_type""'");
  } 
  temp3 = static_cast< std::vector< size_t >::value_type >(val3);
  arg3 = &temp3;
  result = std_vector_Sl_size_t_Sg__insert__SWIG_0(arg1,arg2,(size_t const &)*arg3);
  _outv = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< size_t >::iterator & >(result)),
    swig::OctSwigIterator::descriptor(),SWIG_POINTER_OWN);
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static octave_value_list _wrap_IntVector_insert__SWIG_1 (const octave_value_list& args, int nargout) {
  std::vector< size_t > *arg1 = (std::vector< size_t > *) 0 ;
  std::vector< size_t >::iterator arg2 ;
  std::vector< size_t >::size_type arg3 ;
  std::vector< size_t >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::OctSwigIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  std::vector< size_t >::value_type temp4 ;
  size_t val4 ;
  int ecode4 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("IntVector_insert",args.length(),4,4,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_std__vectorT_size_t_std__allocatorT_size_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVector_insert" "', argument " "1"" of type '" "std::vector< size_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< size_t > * >(argp1);
  res2 = SWIG_ConvertPtr(args(1), SWIG_as_voidptrptr(&iter2), swig::OctSwigIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "IntVector_insert" "', argument " "2"" of type '" "std::vector< size_t >::iterator""'");
  } else {
    swig::OctSwigIterator_T<std::vector< size_t >::iterator > *iter_t = dynamic_cast<swig::OctSwigIterator_T<std::vector< size_t >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "IntVector_insert" "', argument " "2"" of type '" "std::vector< size_t >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(args(2), &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IntVector_insert" "', argument " "3"" of type '" "std::vector< size_t >::size_type""'");
  } 
  arg3 = static_cast< std::vector< size_t >::size_type >(val3);
  ecode4 = SWIG_AsVal_size_t(args(3), &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "IntVector_insert" "', argument " "4"" of type '" "std::vector< size_t >::value_type""'");
  } 
  temp4 = static_cast< std::vector< size_t >::value_type >(val4);
  arg4 = &temp4;
  std_vector_Sl_size_t_Sg__insert__SWIG_1(arg1,arg2,arg3,(size_t const &)*arg4);
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( IntVector_insert, _wrap_IntVector_insert, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[4]={
    octave_value_ref(args,0),octave_value_ref(args,1),octave_value_ref(args,2),octave_value_ref(args,3)
  };
  
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< size_t,std::allocator< size_t > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::OctSwigIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::OctSwigIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::OctSwigIterator_T<std::vector< size_t >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_IntVector_insert__SWIG_0(args, nargout);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< size_t,std::allocator< size_t > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::OctSwigIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::OctSwigIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::OctSwigIterator_T<std::vector< size_t >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_size_t(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_IntVector_insert__SWIG_1(args, nargout);
          }
        }
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


SWIG_DEFUN( IntVector_reserve, _wrap_IntVector_reserve, std::string() ) {
  std::vector< size_t > *arg1 = (std::vector< size_t > *) 0 ;
  std::vector< size_t >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("IntVector_reserve",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_std__vectorT_size_t_std__allocatorT_size_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVector_reserve" "', argument " "1"" of type '" "std::vector< size_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< size_t > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IntVector_reserve" "', argument " "2"" of type '" "std::vector< size_t >::size_type""'");
  } 
  arg2 = static_cast< std::vector< size_t >::size_type >(val2);
  (arg1)->reserve(arg2);
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( IntVector_capacity, _wrap_IntVector_capacity, std::string() ) {
  std::vector< size_t > *arg1 = (std::vector< size_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  std::vector< size_t >::size_type result;
  
  if (!SWIG_check_num_args("IntVector_capacity",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_std__vectorT_size_t_std__allocatorT_size_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVector_capacity" "', argument " "1"" of type '" "std::vector< size_t > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< size_t > * >(argp1);
  result = ((std::vector< size_t > const *)arg1)->capacity();
  _outv = SWIG_From_size_t(static_cast< size_t >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( delete_IntVector, _wrap_delete_IntVector, std::string() ) {
  std::vector< size_t > *arg1 = (std::vector< size_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("delete_IntVector",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_std__vectorT_size_t_std__allocatorT_size_t_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_IntVector" "', argument " "1"" of type '" "std::vector< size_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< size_t > * >(argp1);
  delete arg1;
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static swig_octave_member swig_IntVector_members[] = {
{"pop",_wrap_IntVector_pop,0,0,0,0},
{"__paren__",_wrap_IntVector___paren__,0,0,0,0},
{"__paren_asgn__",_wrap_IntVector___paren_asgn__,0,0,0,0},
{"append",_wrap_IntVector_append,0,0,0,0},
{"empty",_wrap_IntVector_empty,0,0,0,0},
{"size",_wrap_IntVector_size,0,0,0,0},
{"swap",_wrap_IntVector_swap,0,0,0,0},
{"begin",_wrap_IntVector_begin,0,0,0,0},
{"end",_wrap_IntVector_end,0,0,0,0},
{"rbegin",_wrap_IntVector_rbegin,0,0,0,0},
{"rend",_wrap_IntVector_rend,0,0,0,0},
{"clear",_wrap_IntVector_clear,0,0,0,0},
{"get_allocator",_wrap_IntVector_get_allocator,0,0,0,0},
{"pop_back",_wrap_IntVector_pop_back,0,0,0,0},
{"erase",_wrap_IntVector_erase,0,0,0,0},
{"push_back",_wrap_IntVector_push_back,0,0,0,0},
{"front",_wrap_IntVector_front,0,0,0,0},
{"back",_wrap_IntVector_back,0,0,0,0},
{"assign",_wrap_IntVector_assign,0,0,0,0},
{"resize",_wrap_IntVector_resize,0,0,0,0},
{"insert",_wrap_IntVector_insert,0,0,0,0},
{"reserve",_wrap_IntVector_reserve,0,0,0,0},
{"capacity",_wrap_IntVector_capacity,0,0,0,0},
{0,0,0,0,0,0}
};
static const char *swig_IntVector_base_names[] = {0};
static const swig_type_info *swig_IntVector_base[] = {0};
static swig_octave_class _wrap_class_IntVector = {"IntVector", &SWIGTYPE_p_std__vectorT_size_t_std__allocatorT_size_t_t_t,0,_wrap_new_IntVector,0,_wrap_delete_IntVector,swig_IntVector_members,swig_IntVector_base_names,swig_IntVector_base };

SWIG_DEFUN( BigInt_size_t, _wrap_BigInt_size_t, std::string() ) {
  dai::BigInt *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  size_t result;
  
  if (!SWIG_check_num_args("BigInt_size_t",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1, SWIGTYPE_p_mpz_class,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BigInt_size_t" "', argument " "1"" of type '" "dai::BigInt const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BigInt_size_t" "', argument " "1"" of type '" "dai::BigInt const &""'"); 
  }
  arg1 = reinterpret_cast< dai::BigInt * >(argp1);
  result = dai::BigInt_size_t((mpz_class const &)*arg1);
  _outv = SWIG_From_size_t(static_cast< size_t >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( isnan, _wrap_isnan, std::string() ) {
  dai::Real arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  bool result;
  
  if (!SWIG_check_num_args("isnan",args.length(),1,1,0)) {
    SWIG_fail;
  }
  ecode1 = SWIG_AsVal_double(args(0), &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "isnan" "', argument " "1"" of type '" "dai::Real""'");
  } 
  arg1 = static_cast< dai::Real >(val1);
  result = (bool)dai::isnan(arg1);
  _outv = SWIG_From_bool(static_cast< bool >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( log, _wrap_log, std::string() ) {
  dai::Real arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::Real result;
  
  if (!SWIG_check_num_args("log",args.length(),1,1,0)) {
    SWIG_fail;
  }
  ecode1 = SWIG_AsVal_double(args(0), &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "log" "', argument " "1"" of type '" "dai::Real""'");
  } 
  arg1 = static_cast< dai::Real >(val1);
  result = (dai::Real)dai::log(arg1);
  _outv = SWIG_From_double(static_cast< double >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( log0, _wrap_log0, std::string() ) {
  dai::Real arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::Real result;
  
  if (!SWIG_check_num_args("log0",args.length(),1,1,0)) {
    SWIG_fail;
  }
  ecode1 = SWIG_AsVal_double(args(0), &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "log0" "', argument " "1"" of type '" "dai::Real""'");
  } 
  arg1 = static_cast< dai::Real >(val1);
  result = (dai::Real)dai::log0(arg1);
  _outv = SWIG_From_double(static_cast< double >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( exp, _wrap_exp, std::string() ) {
  dai::Real arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::Real result;
  
  if (!SWIG_check_num_args("exp",args.length(),1,1,0)) {
    SWIG_fail;
  }
  ecode1 = SWIG_AsVal_double(args(0), &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "exp" "', argument " "1"" of type '" "dai::Real""'");
  } 
  arg1 = static_cast< dai::Real >(val1);
  result = (dai::Real)dai::exp(arg1);
  _outv = SWIG_From_double(static_cast< double >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( pow, _wrap_pow, std::string() ) {
  dai::Real arg1 ;
  dai::Real arg2 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::Real result;
  
  if (!SWIG_check_num_args("pow",args.length(),2,2,0)) {
    SWIG_fail;
  }
  ecode1 = SWIG_AsVal_double(args(0), &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "pow" "', argument " "1"" of type '" "dai::Real""'");
  } 
  arg1 = static_cast< dai::Real >(val1);
  ecode2 = SWIG_AsVal_double(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "pow" "', argument " "2"" of type '" "dai::Real""'");
  } 
  arg2 = static_cast< dai::Real >(val2);
  result = (dai::Real)dai::pow(arg1,arg2);
  _outv = SWIG_From_double(static_cast< double >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( toc, _wrap_toc, std::string() ) {
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  double result;
  
  if (!SWIG_check_num_args("toc",args.length(),0,0,0)) {
    SWIG_fail;
  }
  result = (double)dai::toc();
  _outv = SWIG_From_double(static_cast< double >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( rnd_seed, _wrap_rnd_seed, std::string() ) {
  size_t arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("rnd_seed",args.length(),1,1,0)) {
    SWIG_fail;
  }
  ecode1 = SWIG_AsVal_size_t(args(0), &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "rnd_seed" "', argument " "1"" of type '" "size_t""'");
  } 
  arg1 = static_cast< size_t >(val1);
  dai::rnd_seed(arg1);
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( rnd_uniform, _wrap_rnd_uniform, std::string() ) {
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::Real result;
  
  if (!SWIG_check_num_args("rnd_uniform",args.length(),0,0,0)) {
    SWIG_fail;
  }
  result = (dai::Real)dai::rnd_uniform();
  _outv = SWIG_From_double(static_cast< double >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( rnd_stdnormal, _wrap_rnd_stdnormal, std::string() ) {
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::Real result;
  
  if (!SWIG_check_num_args("rnd_stdnormal",args.length(),0,0,0)) {
    SWIG_fail;
  }
  result = (dai::Real)dai::rnd_stdnormal();
  _outv = SWIG_From_double(static_cast< double >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( rnd_int, _wrap_rnd_int, std::string() ) {
  int arg1 ;
  int arg2 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  int result;
  
  if (!SWIG_check_num_args("rnd_int",args.length(),2,2,0)) {
    SWIG_fail;
  }
  ecode1 = SWIG_AsVal_int(args(0), &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "rnd_int" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "rnd_int" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (int)dai::rnd_int(arg1,arg2);
  _outv = SWIG_From_int(static_cast< int >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( rnd, _wrap_rnd, std::string() ) {
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  int result;
  
  if (!SWIG_check_num_args("rnd",args.length(),1,1,0)) {
    SWIG_fail;
  }
  ecode1 = SWIG_AsVal_int(args(0), &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "rnd" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  result = (int)dai::rnd(arg1);
  _outv = SWIG_From_int(static_cast< int >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static octave_value_list _wrap_tokenizeString__SWIG_0 (const octave_value_list& args, int nargout) {
  std::string *arg1 = 0 ;
  bool arg2 ;
  std::string *arg3 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  bool val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  SwigValueWrapper< std::vector< std::string,std::allocator< std::string > > > result;
  
  if (!SWIG_check_num_args("tokenizeString",args.length(),3,3,0)) {
    SWIG_fail;
  }
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(args(0), &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tokenizeString" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "tokenizeString" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  ecode2 = SWIG_AsVal_bool(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tokenizeString" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(args(2), &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "tokenizeString" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "tokenizeString" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  result = dai::tokenizeString((std::string const &)*arg1,arg2,(std::string const &)*arg3);
  _outv = SWIG_NewPointerObj((new std::vector< std::string,std::allocator< std::string > >(static_cast< const std::vector< std::string,std::allocator< std::string > >& >(result))), SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, SWIG_POINTER_OWN |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return _out;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return octave_value_list();
}


static octave_value_list _wrap_tokenizeString__SWIG_1 (const octave_value_list& args, int nargout) {
  std::string *arg1 = 0 ;
  bool arg2 ;
  int res1 = SWIG_OLDOBJ ;
  bool val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  SwigValueWrapper< std::vector< std::string,std::allocator< std::string > > > result;
  
  if (!SWIG_check_num_args("tokenizeString",args.length(),2,2,0)) {
    SWIG_fail;
  }
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(args(0), &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tokenizeString" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "tokenizeString" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  ecode2 = SWIG_AsVal_bool(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tokenizeString" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  result = dai::tokenizeString((std::string const &)*arg1,arg2);
  _outv = SWIG_NewPointerObj((new std::vector< std::string,std::allocator< std::string > >(static_cast< const std::vector< std::string,std::allocator< std::string > >& >(result))), SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, SWIG_POINTER_OWN |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  if (SWIG_IsNewObj(res1)) delete arg1;
  return _out;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return octave_value_list();
}


SWIG_DEFUN( tokenizeString, _wrap_tokenizeString, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[3]={
    octave_value_ref(args,0),octave_value_ref(args,1),octave_value_ref(args,2)
  };
  
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_tokenizeString__SWIG_1(args, nargout);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_tokenizeString__SWIG_0(args, nargout);
        }
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


static octave_value_list _wrap_new_Var__SWIG_0 (const octave_value_list& args, int nargout) {
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::Var *result = 0 ;
  
  if (!SWIG_check_num_args("new_Var",args.length(),0,0,0)) {
    SWIG_fail;
  }
  result = (dai::Var *)new dai::Var();
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dai__Var, 1 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static octave_value_list _wrap_new_Var__SWIG_1 (const octave_value_list& args, int nargout) {
  size_t arg1 ;
  size_t arg2 ;
  size_t val1 ;
  int ecode1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::Var *result = 0 ;
  
  if (!SWIG_check_num_args("new_Var",args.length(),2,2,0)) {
    SWIG_fail;
  }
  ecode1 = SWIG_AsVal_size_t(args(0), &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Var" "', argument " "1"" of type '" "size_t""'");
  } 
  arg1 = static_cast< size_t >(val1);
  ecode2 = SWIG_AsVal_size_t(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Var" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  result = (dai::Var *)new dai::Var(arg1,arg2);
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dai__Var, 1 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( new_Var, _wrap_new_Var, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[2]={
    octave_value_ref(args,0),octave_value_ref(args,1)
  };
  
  if (argc == 0) {
    return _wrap_new_Var__SWIG_0(args, nargout);
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_Var__SWIG_1(args, nargout);
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


SWIG_DEFUN( Var_label, _wrap_Var_label, std::string() ) {
  dai::Var *arg1 = (dai::Var *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  size_t *result = 0 ;
  
  if (!SWIG_check_num_args("Var_label",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__Var, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Var_label" "', argument " "1"" of type '" "dai::Var *""'"); 
  }
  arg1 = reinterpret_cast< dai::Var * >(argp1);
  result = (size_t *) &(arg1)->label();
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_size_t, 0 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( Var_states, _wrap_Var_states, std::string() ) {
  dai::Var *arg1 = (dai::Var *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  size_t *result = 0 ;
  
  if (!SWIG_check_num_args("Var_states",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__Var, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Var_states" "', argument " "1"" of type '" "dai::Var *""'"); 
  }
  arg1 = reinterpret_cast< dai::Var * >(argp1);
  result = (size_t *) &(arg1)->states();
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_size_t, 0 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( Var___lt__, _wrap_Var___lt__, std::string() ) {
  dai::Var *arg1 = (dai::Var *) 0 ;
  dai::Var *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  bool result;
  
  if (!SWIG_check_num_args("Var___lt__",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__Var, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Var___lt__" "', argument " "1"" of type '" "dai::Var const *""'"); 
  }
  arg1 = reinterpret_cast< dai::Var * >(argp1);
  res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_dai__Var,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Var___lt__" "', argument " "2"" of type '" "dai::Var const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Var___lt__" "', argument " "2"" of type '" "dai::Var const &""'"); 
  }
  arg2 = reinterpret_cast< dai::Var * >(argp2);
  result = (bool)((dai::Var const *)arg1)->operator <((dai::Var const &)*arg2);
  _outv = SWIG_From_bool(static_cast< bool >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( Var___gt__, _wrap_Var___gt__, std::string() ) {
  dai::Var *arg1 = (dai::Var *) 0 ;
  dai::Var *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  bool result;
  
  if (!SWIG_check_num_args("Var___gt__",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__Var, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Var___gt__" "', argument " "1"" of type '" "dai::Var const *""'"); 
  }
  arg1 = reinterpret_cast< dai::Var * >(argp1);
  res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_dai__Var,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Var___gt__" "', argument " "2"" of type '" "dai::Var const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Var___gt__" "', argument " "2"" of type '" "dai::Var const &""'"); 
  }
  arg2 = reinterpret_cast< dai::Var * >(argp2);
  result = (bool)((dai::Var const *)arg1)->operator >((dai::Var const &)*arg2);
  _outv = SWIG_From_bool(static_cast< bool >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( Var___le__, _wrap_Var___le__, std::string() ) {
  dai::Var *arg1 = (dai::Var *) 0 ;
  dai::Var *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  bool result;
  
  if (!SWIG_check_num_args("Var___le__",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__Var, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Var___le__" "', argument " "1"" of type '" "dai::Var const *""'"); 
  }
  arg1 = reinterpret_cast< dai::Var * >(argp1);
  res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_dai__Var,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Var___le__" "', argument " "2"" of type '" "dai::Var const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Var___le__" "', argument " "2"" of type '" "dai::Var const &""'"); 
  }
  arg2 = reinterpret_cast< dai::Var * >(argp2);
  result = (bool)((dai::Var const *)arg1)->operator <=((dai::Var const &)*arg2);
  _outv = SWIG_From_bool(static_cast< bool >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( Var___ge__, _wrap_Var___ge__, std::string() ) {
  dai::Var *arg1 = (dai::Var *) 0 ;
  dai::Var *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  bool result;
  
  if (!SWIG_check_num_args("Var___ge__",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__Var, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Var___ge__" "', argument " "1"" of type '" "dai::Var const *""'"); 
  }
  arg1 = reinterpret_cast< dai::Var * >(argp1);
  res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_dai__Var,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Var___ge__" "', argument " "2"" of type '" "dai::Var const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Var___ge__" "', argument " "2"" of type '" "dai::Var const &""'"); 
  }
  arg2 = reinterpret_cast< dai::Var * >(argp2);
  result = (bool)((dai::Var const *)arg1)->operator >=((dai::Var const &)*arg2);
  _outv = SWIG_From_bool(static_cast< bool >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( Var___ne__, _wrap_Var___ne__, std::string() ) {
  dai::Var *arg1 = (dai::Var *) 0 ;
  dai::Var *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  bool result;
  
  if (!SWIG_check_num_args("Var___ne__",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__Var, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Var___ne__" "', argument " "1"" of type '" "dai::Var const *""'"); 
  }
  arg1 = reinterpret_cast< dai::Var * >(argp1);
  res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_dai__Var,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Var___ne__" "', argument " "2"" of type '" "dai::Var const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Var___ne__" "', argument " "2"" of type '" "dai::Var const &""'"); 
  }
  arg2 = reinterpret_cast< dai::Var * >(argp2);
  result = (bool)((dai::Var const *)arg1)->operator !=((dai::Var const &)*arg2);
  _outv = SWIG_From_bool(static_cast< bool >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( Var___eq__, _wrap_Var___eq__, std::string() ) {
  dai::Var *arg1 = (dai::Var *) 0 ;
  dai::Var *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  bool result;
  
  if (!SWIG_check_num_args("Var___eq__",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__Var, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Var___eq__" "', argument " "1"" of type '" "dai::Var const *""'"); 
  }
  arg1 = reinterpret_cast< dai::Var * >(argp1);
  res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_dai__Var,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Var___eq__" "', argument " "2"" of type '" "dai::Var const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Var___eq__" "', argument " "2"" of type '" "dai::Var const &""'"); 
  }
  arg2 = reinterpret_cast< dai::Var * >(argp2);
  result = (bool)((dai::Var const *)arg1)->operator ==((dai::Var const &)*arg2);
  _outv = SWIG_From_bool(static_cast< bool >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( Var_toString, _wrap_Var_toString, std::string() ) {
  dai::Var *arg1 = (dai::Var *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  std::string result;
  
  if (!SWIG_check_num_args("Var_toString",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__Var, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Var_toString" "', argument " "1"" of type '" "dai::Var const *""'"); 
  }
  arg1 = reinterpret_cast< dai::Var * >(argp1);
  result = ((dai::Var const *)arg1)->toString();
  _outv = SWIG_From_std_string(static_cast< std::string >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( Var___str__, _wrap_Var___str__, std::string() ) {
  dai::Var *arg1 = (dai::Var *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  char *result = 0 ;
  
  if (!SWIG_check_num_args("Var___str__",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__Var, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Var___str__" "', argument " "1"" of type '" "dai::Var const *""'"); 
  }
  arg1 = reinterpret_cast< dai::Var * >(argp1);
  result = (char *)dai_Var___str__((dai::Var const *)arg1);
  _outv = SWIG_FromCharPtr((const char *)result);
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( Var___str, _wrap_Var___str, std::string() ) {
  dai::Var *arg1 = (dai::Var *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  std::string result;
  
  if (!SWIG_check_num_args("Var___str",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__Var, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Var___str" "', argument " "1"" of type '" "dai::Var const *""'"); 
  }
  arg1 = reinterpret_cast< dai::Var * >(argp1);
  result = dai_Var___str((dai::Var const *)arg1);
  _outv = SWIG_From_std_string(static_cast< std::string >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( delete_Var, _wrap_delete_Var, std::string() ) {
  dai::Var *arg1 = (dai::Var *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("delete_Var",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__Var, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Var" "', argument " "1"" of type '" "dai::Var *""'"); 
  }
  arg1 = reinterpret_cast< dai::Var * >(argp1);
  delete arg1;
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static swig_octave_member swig_Var_members[] = {
{"label",_wrap_Var_label,0,0,0,0},
{"states",_wrap_Var_states,0,0,0,0},
{"__lt__",_wrap_Var___lt__,0,0,0,0},
{"__gt__",_wrap_Var___gt__,0,0,0,0},
{"__le__",_wrap_Var___le__,0,0,0,0},
{"__ge__",_wrap_Var___ge__,0,0,0,0},
{"__ne__",_wrap_Var___ne__,0,0,0,0},
{"__eq__",_wrap_Var___eq__,0,0,0,0},
{"toString",_wrap_Var_toString,0,0,0,0},
{"__str__",_wrap_Var___str__,0,0,0,0},
{"__str",_wrap_Var___str,0,0,0,0},
{0,0,0,0,0,0}
};
static const char *swig_Var_base_names[] = {0};
static const swig_type_info *swig_Var_base[] = {0};
static swig_octave_class _wrap_class_Var = {"Var", &SWIGTYPE_p_dai__Var,0,_wrap_new_Var,0,_wrap_delete_Var,swig_Var_members,swig_Var_base_names,swig_Var_base };

static octave_value_list _wrap_new_SmallSetVar__SWIG_0 (const octave_value_list& args, int nargout) {
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::SmallSet< dai::Var > *result = 0 ;
  
  if (!SWIG_check_num_args("new_SmallSetVar",args.length(),0,0,0)) {
    SWIG_fail;
  }
  result = (dai::SmallSet< dai::Var > *)new dai::SmallSet< dai::Var >();
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dai__SmallSetT_dai__Var_t, 1 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static octave_value_list _wrap_new_SmallSetVar__SWIG_1 (const octave_value_list& args, int nargout) {
  dai::Var *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::SmallSet< dai::Var > *result = 0 ;
  
  if (!SWIG_check_num_args("new_SmallSetVar",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1, SWIGTYPE_p_dai__Var,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SmallSetVar" "', argument " "1"" of type '" "dai::Var const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SmallSetVar" "', argument " "1"" of type '" "dai::Var const &""'"); 
  }
  arg1 = reinterpret_cast< dai::Var * >(argp1);
  result = (dai::SmallSet< dai::Var > *)new dai::SmallSet< dai::Var >((dai::Var const &)*arg1);
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dai__SmallSetT_dai__Var_t, 1 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static octave_value_list _wrap_new_SmallSetVar__SWIG_2 (const octave_value_list& args, int nargout) {
  dai::Var *arg1 = 0 ;
  dai::Var *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::SmallSet< dai::Var > *result = 0 ;
  
  if (!SWIG_check_num_args("new_SmallSetVar",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1, SWIGTYPE_p_dai__Var,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SmallSetVar" "', argument " "1"" of type '" "dai::Var const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SmallSetVar" "', argument " "1"" of type '" "dai::Var const &""'"); 
  }
  arg1 = reinterpret_cast< dai::Var * >(argp1);
  res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_dai__Var,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_SmallSetVar" "', argument " "2"" of type '" "dai::Var const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SmallSetVar" "', argument " "2"" of type '" "dai::Var const &""'"); 
  }
  arg2 = reinterpret_cast< dai::Var * >(argp2);
  result = (dai::SmallSet< dai::Var > *)new dai::SmallSet< dai::Var >((dai::Var const &)*arg1,(dai::Var const &)*arg2);
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dai__SmallSetT_dai__Var_t, 1 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( new_SmallSetVar, _wrap_new_SmallSetVar, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[2]={
    octave_value_ref(args,0),octave_value_ref(args,1)
  };
  
  if (argc == 0) {
    return _wrap_new_SmallSetVar__SWIG_0(args, nargout);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dai__Var, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_SmallSetVar__SWIG_1(args, nargout);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dai__Var, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_dai__Var, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_SmallSetVar__SWIG_2(args, nargout);
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


SWIG_DEFUN( SmallSetVar_insert, _wrap_SmallSetVar_insert, std::string() ) {
  dai::SmallSet< dai::Var > *arg1 = (dai::SmallSet< dai::Var > *) 0 ;
  dai::Var *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::SmallSet< dai::Var > *result = 0 ;
  
  if (!SWIG_check_num_args("SmallSetVar_insert",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__SmallSetT_dai__Var_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SmallSetVar_insert" "', argument " "1"" of type '" "dai::SmallSet< dai::Var > *""'"); 
  }
  arg1 = reinterpret_cast< dai::SmallSet< dai::Var > * >(argp1);
  res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_dai__Var,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SmallSetVar_insert" "', argument " "2"" of type '" "dai::Var const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SmallSetVar_insert" "', argument " "2"" of type '" "dai::Var const &""'"); 
  }
  arg2 = reinterpret_cast< dai::Var * >(argp2);
  result = (dai::SmallSet< dai::Var > *) &(arg1)->insert((dai::Var const &)*arg2);
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dai__SmallSetT_dai__Var_t, 0 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( SmallSetVar_erase, _wrap_SmallSetVar_erase, std::string() ) {
  dai::SmallSet< dai::Var > *arg1 = (dai::SmallSet< dai::Var > *) 0 ;
  dai::Var *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::SmallSet< dai::Var > *result = 0 ;
  
  if (!SWIG_check_num_args("SmallSetVar_erase",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__SmallSetT_dai__Var_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SmallSetVar_erase" "', argument " "1"" of type '" "dai::SmallSet< dai::Var > *""'"); 
  }
  arg1 = reinterpret_cast< dai::SmallSet< dai::Var > * >(argp1);
  res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_dai__Var,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SmallSetVar_erase" "', argument " "2"" of type '" "dai::Var const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SmallSetVar_erase" "', argument " "2"" of type '" "dai::Var const &""'"); 
  }
  arg2 = reinterpret_cast< dai::Var * >(argp2);
  result = (dai::SmallSet< dai::Var > *) &(arg1)->erase((dai::Var const &)*arg2);
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dai__SmallSetT_dai__Var_t, 0 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( SmallSetVar___div__, _wrap_SmallSetVar___div__, std::string() ) {
  dai::SmallSet< dai::Var > *arg1 = (dai::SmallSet< dai::Var > *) 0 ;
  dai::SmallSet< dai::Var > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::SmallSet< dai::Var > result;
  
  if (!SWIG_check_num_args("SmallSetVar___div__",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__SmallSetT_dai__Var_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SmallSetVar___div__" "', argument " "1"" of type '" "dai::SmallSet< dai::Var > const *""'"); 
  }
  arg1 = reinterpret_cast< dai::SmallSet< dai::Var > * >(argp1);
  res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_dai__SmallSetT_dai__Var_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SmallSetVar___div__" "', argument " "2"" of type '" "dai::SmallSet< dai::Var > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SmallSetVar___div__" "', argument " "2"" of type '" "dai::SmallSet< dai::Var > const &""'"); 
  }
  arg2 = reinterpret_cast< dai::SmallSet< dai::Var > * >(argp2);
  result = ((dai::SmallSet< dai::Var > const *)arg1)->operator /((dai::SmallSet< dai::Var > const &)*arg2);
  _outv = SWIG_NewPointerObj((new dai::SmallSet< dai::Var >(static_cast< const dai::SmallSet< dai::Var >& >(result))), SWIGTYPE_p_dai__SmallSetT_dai__Var_t, SWIG_POINTER_OWN |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( SmallSetVar_intersects, _wrap_SmallSetVar_intersects, std::string() ) {
  dai::SmallSet< dai::Var > *arg1 = (dai::SmallSet< dai::Var > *) 0 ;
  dai::SmallSet< dai::Var > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  bool result;
  
  if (!SWIG_check_num_args("SmallSetVar_intersects",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__SmallSetT_dai__Var_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SmallSetVar_intersects" "', argument " "1"" of type '" "dai::SmallSet< dai::Var > const *""'"); 
  }
  arg1 = reinterpret_cast< dai::SmallSet< dai::Var > * >(argp1);
  res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_dai__SmallSetT_dai__Var_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SmallSetVar_intersects" "', argument " "2"" of type '" "dai::SmallSet< dai::Var > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SmallSetVar_intersects" "', argument " "2"" of type '" "dai::SmallSet< dai::Var > const &""'"); 
  }
  arg2 = reinterpret_cast< dai::SmallSet< dai::Var > * >(argp2);
  result = (bool)((dai::SmallSet< dai::Var > const *)arg1)->intersects((dai::SmallSet< dai::Var > const &)*arg2);
  _outv = SWIG_From_bool(static_cast< bool >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( SmallSetVar_contains, _wrap_SmallSetVar_contains, std::string() ) {
  dai::SmallSet< dai::Var > *arg1 = (dai::SmallSet< dai::Var > *) 0 ;
  dai::Var *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  bool result;
  
  if (!SWIG_check_num_args("SmallSetVar_contains",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__SmallSetT_dai__Var_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SmallSetVar_contains" "', argument " "1"" of type '" "dai::SmallSet< dai::Var > const *""'"); 
  }
  arg1 = reinterpret_cast< dai::SmallSet< dai::Var > * >(argp1);
  res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_dai__Var,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SmallSetVar_contains" "', argument " "2"" of type '" "dai::Var const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SmallSetVar_contains" "', argument " "2"" of type '" "dai::Var const &""'"); 
  }
  arg2 = reinterpret_cast< dai::Var * >(argp2);
  result = (bool)((dai::SmallSet< dai::Var > const *)arg1)->contains((dai::Var const &)*arg2);
  _outv = SWIG_From_bool(static_cast< bool >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( SmallSetVar_size, _wrap_SmallSetVar_size, std::string() ) {
  dai::SmallSet< dai::Var > *arg1 = (dai::SmallSet< dai::Var > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  SwigValueWrapper< std::vector< dai::Var,std::allocator< dai::Var > >::size_type > result;
  
  if (!SWIG_check_num_args("SmallSetVar_size",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__SmallSetT_dai__Var_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SmallSetVar_size" "', argument " "1"" of type '" "dai::SmallSet< dai::Var > const *""'"); 
  }
  arg1 = reinterpret_cast< dai::SmallSet< dai::Var > * >(argp1);
  result = ((dai::SmallSet< dai::Var > const *)arg1)->size();
  _outv = SWIG_NewPointerObj((new std::vector< dai::Var,std::allocator< dai::Var > >::size_type(static_cast< const std::vector< dai::Var,std::allocator< dai::Var > >::size_type& >(result))), SWIGTYPE_p_std__vectorT_dai__Var_std__allocatorT_dai__Var_t_t__size_type, SWIG_POINTER_OWN |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( SmallSetVar_empty, _wrap_SmallSetVar_empty, std::string() ) {
  dai::SmallSet< dai::Var > *arg1 = (dai::SmallSet< dai::Var > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  bool result;
  
  if (!SWIG_check_num_args("SmallSetVar_empty",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__SmallSetT_dai__Var_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SmallSetVar_empty" "', argument " "1"" of type '" "dai::SmallSet< dai::Var > const *""'"); 
  }
  arg1 = reinterpret_cast< dai::SmallSet< dai::Var > * >(argp1);
  result = (bool)((dai::SmallSet< dai::Var > const *)arg1)->empty();
  _outv = SWIG_From_bool(static_cast< bool >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static octave_value_list _wrap_SmallSetVar_elements__SWIG_0 (const octave_value_list& args, int nargout) {
  dai::SmallSet< dai::Var > *arg1 = (dai::SmallSet< dai::Var > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  std::vector< dai::Var,std::allocator< dai::Var > > *result = 0 ;
  
  if (!SWIG_check_num_args("SmallSetVar_elements",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__SmallSetT_dai__Var_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SmallSetVar_elements" "', argument " "1"" of type '" "dai::SmallSet< dai::Var > *""'"); 
  }
  arg1 = reinterpret_cast< dai::SmallSet< dai::Var > * >(argp1);
  result = (std::vector< dai::Var,std::allocator< dai::Var > > *) &(arg1)->elements();
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_dai__Var_std__allocatorT_dai__Var_t_t, 0 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static octave_value_list _wrap_SmallSetVar_elements__SWIG_1 (const octave_value_list& args, int nargout) {
  dai::SmallSet< dai::Var > *arg1 = (dai::SmallSet< dai::Var > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  std::vector< dai::Var,std::allocator< dai::Var > > *result = 0 ;
  
  if (!SWIG_check_num_args("SmallSetVar_elements",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__SmallSetT_dai__Var_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SmallSetVar_elements" "', argument " "1"" of type '" "dai::SmallSet< dai::Var > const *""'"); 
  }
  arg1 = reinterpret_cast< dai::SmallSet< dai::Var > * >(argp1);
  result = (std::vector< dai::Var,std::allocator< dai::Var > > *) &((dai::SmallSet< dai::Var > const *)arg1)->elements();
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_dai__Var_std__allocatorT_dai__Var_t_t, 0 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( SmallSetVar_elements, _wrap_SmallSetVar_elements, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[1]={
    octave_value_ref(args,0)
  };
  
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dai__SmallSetT_dai__Var_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SmallSetVar_elements__SWIG_0(args, nargout);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dai__SmallSetT_dai__Var_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SmallSetVar_elements__SWIG_1(args, nargout);
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


static octave_value_list _wrap_SmallSetVar_begin__SWIG_0 (const octave_value_list& args, int nargout) {
  dai::SmallSet< dai::Var > *arg1 = (dai::SmallSet< dai::Var > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  SwigValueWrapper< std::vector< dai::Var,std::allocator< dai::Var > >::iterator > result;
  
  if (!SWIG_check_num_args("SmallSetVar_begin",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__SmallSetT_dai__Var_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SmallSetVar_begin" "', argument " "1"" of type '" "dai::SmallSet< dai::Var > *""'"); 
  }
  arg1 = reinterpret_cast< dai::SmallSet< dai::Var > * >(argp1);
  result = (arg1)->begin();
  _outv = SWIG_NewPointerObj((new dai::SmallSet< dai::Var >::iterator(static_cast< const dai::SmallSet< dai::Var >::iterator& >(result))), SWIGTYPE_p_std__vectorT_dai__Var_std__allocatorT_dai__Var_t_t__iterator, SWIG_POINTER_OWN |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static octave_value_list _wrap_SmallSetVar_begin__SWIG_1 (const octave_value_list& args, int nargout) {
  dai::SmallSet< dai::Var > *arg1 = (dai::SmallSet< dai::Var > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  SwigValueWrapper< std::vector< dai::Var,std::allocator< dai::Var > >::const_iterator > result;
  
  if (!SWIG_check_num_args("SmallSetVar_begin",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__SmallSetT_dai__Var_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SmallSetVar_begin" "', argument " "1"" of type '" "dai::SmallSet< dai::Var > const *""'"); 
  }
  arg1 = reinterpret_cast< dai::SmallSet< dai::Var > * >(argp1);
  result = ((dai::SmallSet< dai::Var > const *)arg1)->begin();
  _outv = SWIG_NewPointerObj((new dai::SmallSet< dai::Var >::const_iterator(static_cast< const dai::SmallSet< dai::Var >::const_iterator& >(result))), SWIGTYPE_p_std__vectorT_dai__Var_std__allocatorT_dai__Var_t_t__const_iterator, SWIG_POINTER_OWN |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( SmallSetVar_begin, _wrap_SmallSetVar_begin, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[1]={
    octave_value_ref(args,0)
  };
  
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dai__SmallSetT_dai__Var_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SmallSetVar_begin__SWIG_0(args, nargout);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dai__SmallSetT_dai__Var_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SmallSetVar_begin__SWIG_1(args, nargout);
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


static octave_value_list _wrap_SmallSetVar_end__SWIG_0 (const octave_value_list& args, int nargout) {
  dai::SmallSet< dai::Var > *arg1 = (dai::SmallSet< dai::Var > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  SwigValueWrapper< std::vector< dai::Var,std::allocator< dai::Var > >::iterator > result;
  
  if (!SWIG_check_num_args("SmallSetVar_end",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__SmallSetT_dai__Var_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SmallSetVar_end" "', argument " "1"" of type '" "dai::SmallSet< dai::Var > *""'"); 
  }
  arg1 = reinterpret_cast< dai::SmallSet< dai::Var > * >(argp1);
  result = (arg1)->end();
  _outv = SWIG_NewPointerObj((new dai::SmallSet< dai::Var >::iterator(static_cast< const dai::SmallSet< dai::Var >::iterator& >(result))), SWIGTYPE_p_std__vectorT_dai__Var_std__allocatorT_dai__Var_t_t__iterator, SWIG_POINTER_OWN |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static octave_value_list _wrap_SmallSetVar_end__SWIG_1 (const octave_value_list& args, int nargout) {
  dai::SmallSet< dai::Var > *arg1 = (dai::SmallSet< dai::Var > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  SwigValueWrapper< std::vector< dai::Var,std::allocator< dai::Var > >::const_iterator > result;
  
  if (!SWIG_check_num_args("SmallSetVar_end",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__SmallSetT_dai__Var_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SmallSetVar_end" "', argument " "1"" of type '" "dai::SmallSet< dai::Var > const *""'"); 
  }
  arg1 = reinterpret_cast< dai::SmallSet< dai::Var > * >(argp1);
  result = ((dai::SmallSet< dai::Var > const *)arg1)->end();
  _outv = SWIG_NewPointerObj((new dai::SmallSet< dai::Var >::const_iterator(static_cast< const dai::SmallSet< dai::Var >::const_iterator& >(result))), SWIGTYPE_p_std__vectorT_dai__Var_std__allocatorT_dai__Var_t_t__const_iterator, SWIG_POINTER_OWN |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( SmallSetVar_end, _wrap_SmallSetVar_end, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[1]={
    octave_value_ref(args,0)
  };
  
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dai__SmallSetT_dai__Var_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SmallSetVar_end__SWIG_0(args, nargout);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dai__SmallSetT_dai__Var_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SmallSetVar_end__SWIG_1(args, nargout);
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


static octave_value_list _wrap_SmallSetVar_rbegin__SWIG_0 (const octave_value_list& args, int nargout) {
  dai::SmallSet< dai::Var > *arg1 = (dai::SmallSet< dai::Var > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  SwigValueWrapper< std::vector< dai::Var,std::allocator< dai::Var > >::reverse_iterator > result;
  
  if (!SWIG_check_num_args("SmallSetVar_rbegin",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__SmallSetT_dai__Var_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SmallSetVar_rbegin" "', argument " "1"" of type '" "dai::SmallSet< dai::Var > *""'"); 
  }
  arg1 = reinterpret_cast< dai::SmallSet< dai::Var > * >(argp1);
  result = (arg1)->rbegin();
  _outv = SWIG_NewPointerObj((new dai::SmallSet< dai::Var >::reverse_iterator(static_cast< const dai::SmallSet< dai::Var >::reverse_iterator& >(result))), SWIGTYPE_p_std__vectorT_dai__Var_std__allocatorT_dai__Var_t_t__reverse_iterator, SWIG_POINTER_OWN |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static octave_value_list _wrap_SmallSetVar_rbegin__SWIG_1 (const octave_value_list& args, int nargout) {
  dai::SmallSet< dai::Var > *arg1 = (dai::SmallSet< dai::Var > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  SwigValueWrapper< std::vector< dai::Var,std::allocator< dai::Var > >::const_reverse_iterator > result;
  
  if (!SWIG_check_num_args("SmallSetVar_rbegin",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__SmallSetT_dai__Var_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SmallSetVar_rbegin" "', argument " "1"" of type '" "dai::SmallSet< dai::Var > const *""'"); 
  }
  arg1 = reinterpret_cast< dai::SmallSet< dai::Var > * >(argp1);
  result = ((dai::SmallSet< dai::Var > const *)arg1)->rbegin();
  _outv = SWIG_NewPointerObj((new dai::SmallSet< dai::Var >::const_reverse_iterator(static_cast< const dai::SmallSet< dai::Var >::const_reverse_iterator& >(result))), SWIGTYPE_p_std__vectorT_dai__Var_std__allocatorT_dai__Var_t_t__const_reverse_iterator, SWIG_POINTER_OWN |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( SmallSetVar_rbegin, _wrap_SmallSetVar_rbegin, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[1]={
    octave_value_ref(args,0)
  };
  
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dai__SmallSetT_dai__Var_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SmallSetVar_rbegin__SWIG_0(args, nargout);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dai__SmallSetT_dai__Var_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SmallSetVar_rbegin__SWIG_1(args, nargout);
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


static octave_value_list _wrap_SmallSetVar_rend__SWIG_0 (const octave_value_list& args, int nargout) {
  dai::SmallSet< dai::Var > *arg1 = (dai::SmallSet< dai::Var > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  SwigValueWrapper< std::vector< dai::Var,std::allocator< dai::Var > >::reverse_iterator > result;
  
  if (!SWIG_check_num_args("SmallSetVar_rend",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__SmallSetT_dai__Var_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SmallSetVar_rend" "', argument " "1"" of type '" "dai::SmallSet< dai::Var > *""'"); 
  }
  arg1 = reinterpret_cast< dai::SmallSet< dai::Var > * >(argp1);
  result = (arg1)->rend();
  _outv = SWIG_NewPointerObj((new dai::SmallSet< dai::Var >::reverse_iterator(static_cast< const dai::SmallSet< dai::Var >::reverse_iterator& >(result))), SWIGTYPE_p_std__vectorT_dai__Var_std__allocatorT_dai__Var_t_t__reverse_iterator, SWIG_POINTER_OWN |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static octave_value_list _wrap_SmallSetVar_rend__SWIG_1 (const octave_value_list& args, int nargout) {
  dai::SmallSet< dai::Var > *arg1 = (dai::SmallSet< dai::Var > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  SwigValueWrapper< std::vector< dai::Var,std::allocator< dai::Var > >::const_reverse_iterator > result;
  
  if (!SWIG_check_num_args("SmallSetVar_rend",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__SmallSetT_dai__Var_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SmallSetVar_rend" "', argument " "1"" of type '" "dai::SmallSet< dai::Var > const *""'"); 
  }
  arg1 = reinterpret_cast< dai::SmallSet< dai::Var > * >(argp1);
  result = ((dai::SmallSet< dai::Var > const *)arg1)->rend();
  _outv = SWIG_NewPointerObj((new dai::SmallSet< dai::Var >::const_reverse_iterator(static_cast< const dai::SmallSet< dai::Var >::const_reverse_iterator& >(result))), SWIGTYPE_p_std__vectorT_dai__Var_std__allocatorT_dai__Var_t_t__const_reverse_iterator, SWIG_POINTER_OWN |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( SmallSetVar_rend, _wrap_SmallSetVar_rend, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[1]={
    octave_value_ref(args,0)
  };
  
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dai__SmallSetT_dai__Var_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SmallSetVar_rend__SWIG_0(args, nargout);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dai__SmallSetT_dai__Var_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SmallSetVar_rend__SWIG_1(args, nargout);
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


static octave_value_list _wrap_SmallSetVar_front__SWIG_0 (const octave_value_list& args, int nargout) {
  dai::SmallSet< dai::Var > *arg1 = (dai::SmallSet< dai::Var > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::Var *result = 0 ;
  
  if (!SWIG_check_num_args("SmallSetVar_front",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__SmallSetT_dai__Var_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SmallSetVar_front" "', argument " "1"" of type '" "dai::SmallSet< dai::Var > *""'"); 
  }
  arg1 = reinterpret_cast< dai::SmallSet< dai::Var > * >(argp1);
  result = (dai::Var *) &(arg1)->front();
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dai__Var, 0 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static octave_value_list _wrap_SmallSetVar_front__SWIG_1 (const octave_value_list& args, int nargout) {
  dai::SmallSet< dai::Var > *arg1 = (dai::SmallSet< dai::Var > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::Var *result = 0 ;
  
  if (!SWIG_check_num_args("SmallSetVar_front",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__SmallSetT_dai__Var_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SmallSetVar_front" "', argument " "1"" of type '" "dai::SmallSet< dai::Var > const *""'"); 
  }
  arg1 = reinterpret_cast< dai::SmallSet< dai::Var > * >(argp1);
  result = (dai::Var *) &((dai::SmallSet< dai::Var > const *)arg1)->front();
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dai__Var, 0 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( SmallSetVar_front, _wrap_SmallSetVar_front, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[1]={
    octave_value_ref(args,0)
  };
  
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dai__SmallSetT_dai__Var_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SmallSetVar_front__SWIG_0(args, nargout);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dai__SmallSetT_dai__Var_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SmallSetVar_front__SWIG_1(args, nargout);
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


static octave_value_list _wrap_SmallSetVar_back__SWIG_0 (const octave_value_list& args, int nargout) {
  dai::SmallSet< dai::Var > *arg1 = (dai::SmallSet< dai::Var > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::Var *result = 0 ;
  
  if (!SWIG_check_num_args("SmallSetVar_back",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__SmallSetT_dai__Var_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SmallSetVar_back" "', argument " "1"" of type '" "dai::SmallSet< dai::Var > *""'"); 
  }
  arg1 = reinterpret_cast< dai::SmallSet< dai::Var > * >(argp1);
  result = (dai::Var *) &(arg1)->back();
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dai__Var, 0 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static octave_value_list _wrap_SmallSetVar_back__SWIG_1 (const octave_value_list& args, int nargout) {
  dai::SmallSet< dai::Var > *arg1 = (dai::SmallSet< dai::Var > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::Var *result = 0 ;
  
  if (!SWIG_check_num_args("SmallSetVar_back",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__SmallSetT_dai__Var_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SmallSetVar_back" "', argument " "1"" of type '" "dai::SmallSet< dai::Var > const *""'"); 
  }
  arg1 = reinterpret_cast< dai::SmallSet< dai::Var > * >(argp1);
  result = (dai::Var *) &((dai::SmallSet< dai::Var > const *)arg1)->back();
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dai__Var, 0 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( SmallSetVar_back, _wrap_SmallSetVar_back, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[1]={
    octave_value_ref(args,0)
  };
  
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dai__SmallSetT_dai__Var_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SmallSetVar_back__SWIG_0(args, nargout);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dai__SmallSetT_dai__Var_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SmallSetVar_back__SWIG_1(args, nargout);
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


static octave_value_list _wrap___eq____SWIG_1 (const octave_value_list& args, int nargout) {
  dai::SmallSet< dai::Var > *arg1 = 0 ;
  dai::SmallSet< dai::Var > *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  bool result;
  
  if (!SWIG_check_num_args("__eq__",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1, SWIGTYPE_p_dai__SmallSetT_dai__Var_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__eq__" "', argument " "1"" of type '" "dai::SmallSet< dai::Var > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__eq__" "', argument " "1"" of type '" "dai::SmallSet< dai::Var > const &""'"); 
  }
  arg1 = reinterpret_cast< dai::SmallSet< dai::Var > * >(argp1);
  res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_dai__SmallSetT_dai__Var_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "__eq__" "', argument " "2"" of type '" "dai::SmallSet< dai::Var > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__eq__" "', argument " "2"" of type '" "dai::SmallSet< dai::Var > const &""'"); 
  }
  arg2 = reinterpret_cast< dai::SmallSet< dai::Var > * >(argp2);
  result = (bool)operator ==((dai::SmallSet< dai::Var > const &)*arg1,(dai::SmallSet< dai::Var > const &)*arg2);
  _outv = SWIG_From_bool(static_cast< bool >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( __eq__, _wrap___eq__, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[2]={
    octave_value_ref(args,0),octave_value_ref(args,1)
  };
  
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dai__SmallSetT_dai__Var_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_dai__SmallSetT_dai__Var_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap___eq____SWIG_1(args, nargout);
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


static octave_value_list _wrap___ne____SWIG_1 (const octave_value_list& args, int nargout) {
  dai::SmallSet< dai::Var > *arg1 = 0 ;
  dai::SmallSet< dai::Var > *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  bool result;
  
  if (!SWIG_check_num_args("__ne__",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1, SWIGTYPE_p_dai__SmallSetT_dai__Var_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__ne__" "', argument " "1"" of type '" "dai::SmallSet< dai::Var > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__ne__" "', argument " "1"" of type '" "dai::SmallSet< dai::Var > const &""'"); 
  }
  arg1 = reinterpret_cast< dai::SmallSet< dai::Var > * >(argp1);
  res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_dai__SmallSetT_dai__Var_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "__ne__" "', argument " "2"" of type '" "dai::SmallSet< dai::Var > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__ne__" "', argument " "2"" of type '" "dai::SmallSet< dai::Var > const &""'"); 
  }
  arg2 = reinterpret_cast< dai::SmallSet< dai::Var > * >(argp2);
  result = (bool)operator !=((dai::SmallSet< dai::Var > const &)*arg1,(dai::SmallSet< dai::Var > const &)*arg2);
  _outv = SWIG_From_bool(static_cast< bool >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( __ne__, _wrap___ne__, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[2]={
    octave_value_ref(args,0),octave_value_ref(args,1)
  };
  
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dai__SmallSetT_dai__Var_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_dai__SmallSetT_dai__Var_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap___ne____SWIG_1(args, nargout);
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


static octave_value_list _wrap___lt____SWIG_1 (const octave_value_list& args, int nargout) {
  dai::SmallSet< dai::Var > *arg1 = 0 ;
  dai::SmallSet< dai::Var > *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  bool result;
  
  if (!SWIG_check_num_args("__lt__",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1, SWIGTYPE_p_dai__SmallSetT_dai__Var_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__lt__" "', argument " "1"" of type '" "dai::SmallSet< dai::Var > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__lt__" "', argument " "1"" of type '" "dai::SmallSet< dai::Var > const &""'"); 
  }
  arg1 = reinterpret_cast< dai::SmallSet< dai::Var > * >(argp1);
  res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_dai__SmallSetT_dai__Var_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "__lt__" "', argument " "2"" of type '" "dai::SmallSet< dai::Var > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__lt__" "', argument " "2"" of type '" "dai::SmallSet< dai::Var > const &""'"); 
  }
  arg2 = reinterpret_cast< dai::SmallSet< dai::Var > * >(argp2);
  result = (bool)operator <((dai::SmallSet< dai::Var > const &)*arg1,(dai::SmallSet< dai::Var > const &)*arg2);
  _outv = SWIG_From_bool(static_cast< bool >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( __lt__, _wrap___lt__, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[2]={
    octave_value_ref(args,0),octave_value_ref(args,1)
  };
  
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dai__SmallSetT_dai__Var_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_dai__SmallSetT_dai__Var_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap___lt____SWIG_1(args, nargout);
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


SWIG_DEFUN( SmallSetVar_toString, _wrap_SmallSetVar_toString, std::string() ) {
  dai::SmallSet< dai::Var > *arg1 = (dai::SmallSet< dai::Var > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  std::string result;
  
  if (!SWIG_check_num_args("SmallSetVar_toString",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__SmallSetT_dai__Var_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SmallSetVar_toString" "', argument " "1"" of type '" "dai::SmallSet< dai::Var > const *""'"); 
  }
  arg1 = reinterpret_cast< dai::SmallSet< dai::Var > * >(argp1);
  result = ((dai::SmallSet< dai::Var > const *)arg1)->toString();
  _outv = SWIG_From_std_string(static_cast< std::string >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( SmallSetVar___str__, _wrap_SmallSetVar___str__, std::string() ) {
  dai::SmallSet< dai::Var > *arg1 = (dai::SmallSet< dai::Var > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  char *result = 0 ;
  
  if (!SWIG_check_num_args("SmallSetVar___str__",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__SmallSetT_dai__Var_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SmallSetVar___str__" "', argument " "1"" of type '" "dai::SmallSet< dai::Var > const *""'"); 
  }
  arg1 = reinterpret_cast< dai::SmallSet< dai::Var > * >(argp1);
  result = (char *)dai_SmallSet_Sl_dai_Var_Sg____str__((dai::SmallSet< dai::Var > const *)arg1);
  _outv = SWIG_FromCharPtr((const char *)result);
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( SmallSetVar___str, _wrap_SmallSetVar___str, std::string() ) {
  dai::SmallSet< dai::Var > *arg1 = (dai::SmallSet< dai::Var > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  std::string result;
  
  if (!SWIG_check_num_args("SmallSetVar___str",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__SmallSetT_dai__Var_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SmallSetVar___str" "', argument " "1"" of type '" "dai::SmallSet< dai::Var > const *""'"); 
  }
  arg1 = reinterpret_cast< dai::SmallSet< dai::Var > * >(argp1);
  result = dai_SmallSet_Sl_dai_Var_Sg____str((dai::SmallSet< dai::Var > const *)arg1);
  _outv = SWIG_From_std_string(static_cast< std::string >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( delete_SmallSetVar, _wrap_delete_SmallSetVar, std::string() ) {
  dai::SmallSet< dai::Var > *arg1 = (dai::SmallSet< dai::Var > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("delete_SmallSetVar",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__SmallSetT_dai__Var_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SmallSetVar" "', argument " "1"" of type '" "dai::SmallSet< dai::Var > *""'"); 
  }
  arg1 = reinterpret_cast< dai::SmallSet< dai::Var > * >(argp1);
  delete arg1;
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static swig_octave_member swig_SmallSetVar_members[] = {
{"insert",_wrap_SmallSetVar_insert,0,0,0,0},
{"erase",_wrap_SmallSetVar_erase,0,0,0,0},
{"__div__",_wrap_SmallSetVar___div__,0,0,0,0},
{"intersects",_wrap_SmallSetVar_intersects,0,0,0,0},
{"contains",_wrap_SmallSetVar_contains,0,0,0,0},
{"size",_wrap_SmallSetVar_size,0,0,0,0},
{"empty",_wrap_SmallSetVar_empty,0,0,0,0},
{"elements",_wrap_SmallSetVar_elements,0,0,0,0},
{"begin",_wrap_SmallSetVar_begin,0,0,0,0},
{"end",_wrap_SmallSetVar_end,0,0,0,0},
{"rbegin",_wrap_SmallSetVar_rbegin,0,0,0,0},
{"rend",_wrap_SmallSetVar_rend,0,0,0,0},
{"front",_wrap_SmallSetVar_front,0,0,0,0},
{"back",_wrap_SmallSetVar_back,0,0,0,0},
{"toString",_wrap_SmallSetVar_toString,0,0,0,0},
{"__str__",_wrap_SmallSetVar___str__,0,0,0,0},
{"__str",_wrap_SmallSetVar___str,0,0,0,0},
{0,0,0,0,0,0}
};
static const char *swig_SmallSetVar_base_names[] = {0};
static const swig_type_info *swig_SmallSetVar_base[] = {0};
static swig_octave_class _wrap_class_SmallSetVar = {"SmallSetVar", &SWIGTYPE_p_dai__SmallSetT_dai__Var_t,0,_wrap_new_SmallSetVar,0,_wrap_delete_SmallSetVar,swig_SmallSetVar_members,swig_SmallSetVar_base_names,swig_SmallSetVar_base };

SWIG_DEFUN( calcLinearState, _wrap_calcLinearState, std::string() ) {
  dai::VarSet *arg1 = 0 ;
  std::map< dai::Var,size_t > *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  size_t result;
  
  if (!SWIG_check_num_args("calcLinearState",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1, SWIGTYPE_p_dai__VarSet,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "calcLinearState" "', argument " "1"" of type '" "dai::VarSet const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "calcLinearState" "', argument " "1"" of type '" "dai::VarSet const &""'"); 
  }
  arg1 = reinterpret_cast< dai::VarSet * >(argp1);
  res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_std__mapT_dai__Var_size_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "calcLinearState" "', argument " "2"" of type '" "std::map< dai::Var,size_t > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "calcLinearState" "', argument " "2"" of type '" "std::map< dai::Var,size_t > const &""'"); 
  }
  arg2 = reinterpret_cast< std::map< dai::Var,size_t > * >(argp2);
  result = dai::calcLinearState((dai::VarSet const &)*arg1,(std::map< dai::Var,size_t > const &)*arg2);
  _outv = SWIG_From_size_t(static_cast< size_t >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( calcState, _wrap_calcState, std::string() ) {
  dai::VarSet *arg1 = 0 ;
  size_t arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  std::map< dai::Var,size_t > result;
  
  if (!SWIG_check_num_args("calcState",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1, SWIGTYPE_p_dai__VarSet,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "calcState" "', argument " "1"" of type '" "dai::VarSet const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "calcState" "', argument " "1"" of type '" "dai::VarSet const &""'"); 
  }
  arg1 = reinterpret_cast< dai::VarSet * >(argp1);
  ecode2 = SWIG_AsVal_size_t(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "calcState" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  result = dai::calcState((dai::VarSet const &)*arg1,arg2);
  _outv = SWIG_NewPointerObj((new std::map< dai::Var,size_t >(static_cast< const std::map< dai::Var,size_t >& >(result))), SWIGTYPE_p_std__mapT_dai__Var_size_t_t, SWIG_POINTER_OWN |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static octave_value_list _wrap_new_VarSet__SWIG_0 (const octave_value_list& args, int nargout) {
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::VarSet *result = 0 ;
  
  if (!SWIG_check_num_args("new_VarSet",args.length(),0,0,0)) {
    SWIG_fail;
  }
  result = (dai::VarSet *)new dai::VarSet();
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dai__VarSet, 1 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static octave_value_list _wrap_new_VarSet__SWIG_1 (const octave_value_list& args, int nargout) {
  dai::SmallSet< dai::Var > *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::VarSet *result = 0 ;
  
  if (!SWIG_check_num_args("new_VarSet",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1, SWIGTYPE_p_dai__SmallSetT_dai__Var_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_VarSet" "', argument " "1"" of type '" "dai::SmallSet< dai::Var > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_VarSet" "', argument " "1"" of type '" "dai::SmallSet< dai::Var > const &""'"); 
  }
  arg1 = reinterpret_cast< dai::SmallSet< dai::Var > * >(argp1);
  result = (dai::VarSet *)new dai::VarSet((dai::SmallSet< dai::Var > const &)*arg1);
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dai__VarSet, 1 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static octave_value_list _wrap_new_VarSet__SWIG_2 (const octave_value_list& args, int nargout) {
  dai::Var *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::VarSet *result = 0 ;
  
  if (!SWIG_check_num_args("new_VarSet",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1, SWIGTYPE_p_dai__Var,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_VarSet" "', argument " "1"" of type '" "dai::Var const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_VarSet" "', argument " "1"" of type '" "dai::Var const &""'"); 
  }
  arg1 = reinterpret_cast< dai::Var * >(argp1);
  result = (dai::VarSet *)new dai::VarSet((dai::Var const &)*arg1);
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dai__VarSet, 1 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static octave_value_list _wrap_new_VarSet__SWIG_3 (const octave_value_list& args, int nargout) {
  dai::Var *arg1 = 0 ;
  dai::Var *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::VarSet *result = 0 ;
  
  if (!SWIG_check_num_args("new_VarSet",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1, SWIGTYPE_p_dai__Var,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_VarSet" "', argument " "1"" of type '" "dai::Var const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_VarSet" "', argument " "1"" of type '" "dai::Var const &""'"); 
  }
  arg1 = reinterpret_cast< dai::Var * >(argp1);
  res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_dai__Var,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_VarSet" "', argument " "2"" of type '" "dai::Var const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_VarSet" "', argument " "2"" of type '" "dai::Var const &""'"); 
  }
  arg2 = reinterpret_cast< dai::Var * >(argp2);
  result = (dai::VarSet *)new dai::VarSet((dai::Var const &)*arg1,(dai::Var const &)*arg2);
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dai__VarSet, 1 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( new_VarSet, _wrap_new_VarSet, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[2]={
    octave_value_ref(args,0),octave_value_ref(args,1)
  };
  
  if (argc == 0) {
    return _wrap_new_VarSet__SWIG_0(args, nargout);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dai__SmallSetT_dai__Var_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_VarSet__SWIG_1(args, nargout);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dai__Var, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_VarSet__SWIG_2(args, nargout);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dai__Var, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_dai__Var, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_VarSet__SWIG_3(args, nargout);
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


SWIG_DEFUN( VarSet_nrStates, _wrap_VarSet_nrStates, std::string() ) {
  dai::VarSet *arg1 = (dai::VarSet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::BigInt result;
  
  if (!SWIG_check_num_args("VarSet_nrStates",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__VarSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VarSet_nrStates" "', argument " "1"" of type '" "dai::VarSet const *""'"); 
  }
  arg1 = reinterpret_cast< dai::VarSet * >(argp1);
  result = ((dai::VarSet const *)arg1)->nrStates();
  _outv = SWIG_NewPointerObj((new dai::BigInt(static_cast< const dai::BigInt& >(result))), SWIGTYPE_p_mpz_class, SWIG_POINTER_OWN |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( VarSet_toString, _wrap_VarSet_toString, std::string() ) {
  dai::VarSet *arg1 = (dai::VarSet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  std::string result;
  
  if (!SWIG_check_num_args("VarSet_toString",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__VarSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VarSet_toString" "', argument " "1"" of type '" "dai::VarSet const *""'"); 
  }
  arg1 = reinterpret_cast< dai::VarSet * >(argp1);
  result = ((dai::VarSet const *)arg1)->toString();
  _outv = SWIG_From_std_string(static_cast< std::string >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( VarSet_append, _wrap_VarSet_append, std::string() ) {
  dai::VarSet *arg1 = (dai::VarSet *) 0 ;
  dai::Var *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("VarSet_append",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__VarSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VarSet_append" "', argument " "1"" of type '" "dai::VarSet *""'"); 
  }
  arg1 = reinterpret_cast< dai::VarSet * >(argp1);
  res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_dai__Var,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VarSet_append" "', argument " "2"" of type '" "dai::Var const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VarSet_append" "', argument " "2"" of type '" "dai::Var const &""'"); 
  }
  arg2 = reinterpret_cast< dai::Var * >(argp2);
  dai_VarSet_append(arg1,(dai::Var const &)*arg2);
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( VarSet___str__, _wrap_VarSet___str__, std::string() ) {
  dai::VarSet *arg1 = (dai::VarSet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  char *result = 0 ;
  
  if (!SWIG_check_num_args("VarSet___str__",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__VarSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VarSet___str__" "', argument " "1"" of type '" "dai::VarSet const *""'"); 
  }
  arg1 = reinterpret_cast< dai::VarSet * >(argp1);
  result = (char *)dai_VarSet___str__((dai::VarSet const *)arg1);
  _outv = SWIG_FromCharPtr((const char *)result);
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( VarSet___str, _wrap_VarSet___str, std::string() ) {
  dai::VarSet *arg1 = (dai::VarSet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  std::string result;
  
  if (!SWIG_check_num_args("VarSet___str",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__VarSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VarSet___str" "', argument " "1"" of type '" "dai::VarSet const *""'"); 
  }
  arg1 = reinterpret_cast< dai::VarSet * >(argp1);
  result = dai_VarSet___str((dai::VarSet const *)arg1);
  _outv = SWIG_From_std_string(static_cast< std::string >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( delete_VarSet, _wrap_delete_VarSet, std::string() ) {
  dai::VarSet *arg1 = (dai::VarSet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("delete_VarSet",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__VarSet, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_VarSet" "', argument " "1"" of type '" "dai::VarSet *""'"); 
  }
  arg1 = reinterpret_cast< dai::VarSet * >(argp1);
  delete arg1;
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static swig_octave_member swig_VarSet_members[] = {
{"nrStates",_wrap_VarSet_nrStates,0,0,0,0},
{"toString",_wrap_VarSet_toString,0,0,0,0},
{"append",_wrap_VarSet_append,0,0,0,0},
{"__str__",_wrap_VarSet___str__,0,0,0,0},
{"__str",_wrap_VarSet___str,0,0,0,0},
{0,0,0,0,0,0}
};
static const char *swig_VarSet_base_names[] = {"_p_dai__SmallSetT_dai__Var_t",0};
static const swig_type_info *swig_VarSet_base[] = {0,0};
static swig_octave_class _wrap_class_VarSet = {"VarSet", &SWIGTYPE_p_dai__VarSet,0,_wrap_new_VarSet,0,_wrap_delete_VarSet,swig_VarSet_members,swig_VarSet_base_names,swig_VarSet_base };

static octave_value_list _wrap_new_Prob__SWIG_0 (const octave_value_list& args, int nargout) {
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::TProb< dai::Real > *result = 0 ;
  
  if (!SWIG_check_num_args("new_Prob",args.length(),0,0,0)) {
    SWIG_fail;
  }
  result = (dai::TProb< dai::Real > *)new dai::TProb< dai::Real >();
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dai__TProbT_double_t, 1 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static octave_value_list _wrap_new_Prob__SWIG_1 (const octave_value_list& args, int nargout) {
  size_t arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::TProb< dai::Real > *result = 0 ;
  
  if (!SWIG_check_num_args("new_Prob",args.length(),1,1,0)) {
    SWIG_fail;
  }
  ecode1 = SWIG_AsVal_size_t(args(0), &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Prob" "', argument " "1"" of type '" "size_t""'");
  } 
  arg1 = static_cast< size_t >(val1);
  result = (dai::TProb< dai::Real > *)new dai::TProb< dai::Real >(arg1);
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dai__TProbT_double_t, 1 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static octave_value_list _wrap_new_Prob__SWIG_2 (const octave_value_list& args, int nargout) {
  size_t arg1 ;
  double arg2 ;
  size_t val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::TProb< dai::Real > *result = 0 ;
  
  if (!SWIG_check_num_args("new_Prob",args.length(),2,2,0)) {
    SWIG_fail;
  }
  ecode1 = SWIG_AsVal_size_t(args(0), &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Prob" "', argument " "1"" of type '" "size_t""'");
  } 
  arg1 = static_cast< size_t >(val1);
  ecode2 = SWIG_AsVal_double(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Prob" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  result = (dai::TProb< dai::Real > *)new dai::TProb< dai::Real >(arg1,arg2);
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dai__TProbT_double_t, 1 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( new_Prob, _wrap_new_Prob, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[2]={
    octave_value_ref(args,0),octave_value_ref(args,1)
  };
  
  if (argc == 0) {
    return _wrap_new_Prob__SWIG_0(args, nargout);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_Prob__SWIG_1(args, nargout);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_Prob__SWIG_2(args, nargout);
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


static octave_value_list _wrap_Prob_begin__SWIG_0 (const octave_value_list& args, int nargout) {
  dai::TProb< dai::Real > *arg1 = (dai::TProb< dai::Real > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  SwigValueWrapper< std::vector< double,std::allocator< double > >::iterator > result;
  
  if (!SWIG_check_num_args("Prob_begin",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__TProbT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Prob_begin" "', argument " "1"" of type '" "dai::TProb< dai::Real > *""'"); 
  }
  arg1 = reinterpret_cast< dai::TProb< dai::Real > * >(argp1);
  result = (arg1)->begin();
  _outv = SWIG_NewPointerObj((new dai::TProb< double >::iterator(static_cast< const dai::TProb< double >::iterator& >(result))), SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t__iterator, SWIG_POINTER_OWN |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static octave_value_list _wrap_Prob_begin__SWIG_1 (const octave_value_list& args, int nargout) {
  dai::TProb< dai::Real > *arg1 = (dai::TProb< dai::Real > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  SwigValueWrapper< std::vector< double,std::allocator< double > >::const_iterator > result;
  
  if (!SWIG_check_num_args("Prob_begin",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__TProbT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Prob_begin" "', argument " "1"" of type '" "dai::TProb< dai::Real > const *""'"); 
  }
  arg1 = reinterpret_cast< dai::TProb< dai::Real > * >(argp1);
  result = ((dai::TProb< dai::Real > const *)arg1)->begin();
  _outv = SWIG_NewPointerObj((new dai::TProb< double >::const_iterator(static_cast< const dai::TProb< double >::const_iterator& >(result))), SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t__const_iterator, SWIG_POINTER_OWN |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( Prob_begin, _wrap_Prob_begin, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[1]={
    octave_value_ref(args,0)
  };
  
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dai__TProbT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Prob_begin__SWIG_0(args, nargout);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dai__TProbT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Prob_begin__SWIG_1(args, nargout);
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


static octave_value_list _wrap_Prob_end__SWIG_0 (const octave_value_list& args, int nargout) {
  dai::TProb< dai::Real > *arg1 = (dai::TProb< dai::Real > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  SwigValueWrapper< std::vector< double,std::allocator< double > >::iterator > result;
  
  if (!SWIG_check_num_args("Prob_end",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__TProbT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Prob_end" "', argument " "1"" of type '" "dai::TProb< dai::Real > *""'"); 
  }
  arg1 = reinterpret_cast< dai::TProb< dai::Real > * >(argp1);
  result = (arg1)->end();
  _outv = SWIG_NewPointerObj((new dai::TProb< double >::iterator(static_cast< const dai::TProb< double >::iterator& >(result))), SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t__iterator, SWIG_POINTER_OWN |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static octave_value_list _wrap_Prob_end__SWIG_1 (const octave_value_list& args, int nargout) {
  dai::TProb< dai::Real > *arg1 = (dai::TProb< dai::Real > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  SwigValueWrapper< std::vector< double,std::allocator< double > >::const_iterator > result;
  
  if (!SWIG_check_num_args("Prob_end",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__TProbT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Prob_end" "', argument " "1"" of type '" "dai::TProb< dai::Real > const *""'"); 
  }
  arg1 = reinterpret_cast< dai::TProb< dai::Real > * >(argp1);
  result = ((dai::TProb< dai::Real > const *)arg1)->end();
  _outv = SWIG_NewPointerObj((new dai::TProb< double >::const_iterator(static_cast< const dai::TProb< double >::const_iterator& >(result))), SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t__const_iterator, SWIG_POINTER_OWN |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( Prob_end, _wrap_Prob_end, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[1]={
    octave_value_ref(args,0)
  };
  
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dai__TProbT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Prob_end__SWIG_0(args, nargout);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dai__TProbT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Prob_end__SWIG_1(args, nargout);
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


static octave_value_list _wrap_Prob_rbegin__SWIG_0 (const octave_value_list& args, int nargout) {
  dai::TProb< dai::Real > *arg1 = (dai::TProb< dai::Real > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  SwigValueWrapper< std::vector< double,std::allocator< double > >::reverse_iterator > result;
  
  if (!SWIG_check_num_args("Prob_rbegin",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__TProbT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Prob_rbegin" "', argument " "1"" of type '" "dai::TProb< dai::Real > *""'"); 
  }
  arg1 = reinterpret_cast< dai::TProb< dai::Real > * >(argp1);
  result = (arg1)->rbegin();
  _outv = SWIG_NewPointerObj((new dai::TProb< double >::reverse_iterator(static_cast< const dai::TProb< double >::reverse_iterator& >(result))), SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t__reverse_iterator, SWIG_POINTER_OWN |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static octave_value_list _wrap_Prob_rbegin__SWIG_1 (const octave_value_list& args, int nargout) {
  dai::TProb< dai::Real > *arg1 = (dai::TProb< dai::Real > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  SwigValueWrapper< std::vector< double,std::allocator< double > >::const_reverse_iterator > result;
  
  if (!SWIG_check_num_args("Prob_rbegin",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__TProbT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Prob_rbegin" "', argument " "1"" of type '" "dai::TProb< dai::Real > const *""'"); 
  }
  arg1 = reinterpret_cast< dai::TProb< dai::Real > * >(argp1);
  result = ((dai::TProb< dai::Real > const *)arg1)->rbegin();
  _outv = SWIG_NewPointerObj((new dai::TProb< double >::const_reverse_iterator(static_cast< const dai::TProb< double >::const_reverse_iterator& >(result))), SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t__const_reverse_iterator, SWIG_POINTER_OWN |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( Prob_rbegin, _wrap_Prob_rbegin, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[1]={
    octave_value_ref(args,0)
  };
  
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dai__TProbT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Prob_rbegin__SWIG_0(args, nargout);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dai__TProbT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Prob_rbegin__SWIG_1(args, nargout);
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


static octave_value_list _wrap_Prob_rend__SWIG_0 (const octave_value_list& args, int nargout) {
  dai::TProb< dai::Real > *arg1 = (dai::TProb< dai::Real > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  SwigValueWrapper< std::vector< double,std::allocator< double > >::reverse_iterator > result;
  
  if (!SWIG_check_num_args("Prob_rend",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__TProbT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Prob_rend" "', argument " "1"" of type '" "dai::TProb< dai::Real > *""'"); 
  }
  arg1 = reinterpret_cast< dai::TProb< dai::Real > * >(argp1);
  result = (arg1)->rend();
  _outv = SWIG_NewPointerObj((new dai::TProb< double >::reverse_iterator(static_cast< const dai::TProb< double >::reverse_iterator& >(result))), SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t__reverse_iterator, SWIG_POINTER_OWN |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static octave_value_list _wrap_Prob_rend__SWIG_1 (const octave_value_list& args, int nargout) {
  dai::TProb< dai::Real > *arg1 = (dai::TProb< dai::Real > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  SwigValueWrapper< std::vector< double,std::allocator< double > >::const_reverse_iterator > result;
  
  if (!SWIG_check_num_args("Prob_rend",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__TProbT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Prob_rend" "', argument " "1"" of type '" "dai::TProb< dai::Real > const *""'"); 
  }
  arg1 = reinterpret_cast< dai::TProb< dai::Real > * >(argp1);
  result = ((dai::TProb< dai::Real > const *)arg1)->rend();
  _outv = SWIG_NewPointerObj((new dai::TProb< double >::const_reverse_iterator(static_cast< const dai::TProb< double >::const_reverse_iterator& >(result))), SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t__const_reverse_iterator, SWIG_POINTER_OWN |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( Prob_rend, _wrap_Prob_rend, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[1]={
    octave_value_ref(args,0)
  };
  
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dai__TProbT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Prob_rend__SWIG_0(args, nargout);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dai__TProbT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Prob_rend__SWIG_1(args, nargout);
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


SWIG_DEFUN( Prob_resize, _wrap_Prob_resize, std::string() ) {
  dai::TProb< dai::Real > *arg1 = (dai::TProb< dai::Real > *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("Prob_resize",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__TProbT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Prob_resize" "', argument " "1"" of type '" "dai::TProb< dai::Real > *""'"); 
  }
  arg1 = reinterpret_cast< dai::TProb< dai::Real > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Prob_resize" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  (arg1)->resize(arg2);
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( Prob_get, _wrap_Prob_get, std::string() ) {
  dai::TProb< dai::Real > *arg1 = (dai::TProb< dai::Real > *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  double result;
  
  if (!SWIG_check_num_args("Prob_get",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__TProbT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Prob_get" "', argument " "1"" of type '" "dai::TProb< dai::Real > const *""'"); 
  }
  arg1 = reinterpret_cast< dai::TProb< dai::Real > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Prob_get" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  result = (double)((dai::TProb< dai::Real > const *)arg1)->get(arg2);
  _outv = SWIG_From_double(static_cast< double >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( Prob_set, _wrap_Prob_set, std::string() ) {
  dai::TProb< dai::Real > *arg1 = (dai::TProb< dai::Real > *) 0 ;
  size_t arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("Prob_set",args.length(),3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__TProbT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Prob_set" "', argument " "1"" of type '" "dai::TProb< dai::Real > *""'"); 
  }
  arg1 = reinterpret_cast< dai::TProb< dai::Real > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Prob_set" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  ecode3 = SWIG_AsVal_double(args(2), &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Prob_set" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  (arg1)->set(arg2,arg3);
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static octave_value_list _wrap_Prob_p__SWIG_0 (const octave_value_list& args, int nargout) {
  dai::TProb< dai::Real > *arg1 = (dai::TProb< dai::Real > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::TProb< double >::container_type *result = 0 ;
  
  if (!SWIG_check_num_args("Prob_p",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__TProbT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Prob_p" "', argument " "1"" of type '" "dai::TProb< dai::Real > const *""'"); 
  }
  arg1 = reinterpret_cast< dai::TProb< dai::Real > * >(argp1);
  result = (dai::TProb< double >::container_type *) &((dai::TProb< dai::Real > const *)arg1)->p();
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static octave_value_list _wrap_Prob_p__SWIG_1 (const octave_value_list& args, int nargout) {
  dai::TProb< dai::Real > *arg1 = (dai::TProb< dai::Real > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::TProb< double >::container_type *result = 0 ;
  
  if (!SWIG_check_num_args("Prob_p",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__TProbT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Prob_p" "', argument " "1"" of type '" "dai::TProb< dai::Real > *""'"); 
  }
  arg1 = reinterpret_cast< dai::TProb< dai::Real > * >(argp1);
  result = (dai::TProb< double >::container_type *) &(arg1)->p();
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( Prob_p, _wrap_Prob_p, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[1]={
    octave_value_ref(args,0)
  };
  
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dai__TProbT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Prob_p__SWIG_1(args, nargout);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dai__TProbT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Prob_p__SWIG_0(args, nargout);
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


SWIG_DEFUN( Prob_size, _wrap_Prob_size, std::string() ) {
  dai::TProb< dai::Real > *arg1 = (dai::TProb< dai::Real > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  size_t result;
  
  if (!SWIG_check_num_args("Prob_size",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__TProbT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Prob_size" "', argument " "1"" of type '" "dai::TProb< dai::Real > const *""'"); 
  }
  arg1 = reinterpret_cast< dai::TProb< dai::Real > * >(argp1);
  result = ((dai::TProb< dai::Real > const *)arg1)->size();
  _outv = SWIG_From_size_t(static_cast< size_t >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( Prob_entropy, _wrap_Prob_entropy, std::string() ) {
  dai::TProb< dai::Real > *arg1 = (dai::TProb< dai::Real > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  double result;
  
  if (!SWIG_check_num_args("Prob_entropy",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__TProbT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Prob_entropy" "', argument " "1"" of type '" "dai::TProb< dai::Real > const *""'"); 
  }
  arg1 = reinterpret_cast< dai::TProb< dai::Real > * >(argp1);
  result = (double)((dai::TProb< dai::Real > const *)arg1)->entropy();
  _outv = SWIG_From_double(static_cast< double >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( Prob_max, _wrap_Prob_max, std::string() ) {
  dai::TProb< dai::Real > *arg1 = (dai::TProb< dai::Real > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  double result;
  
  if (!SWIG_check_num_args("Prob_max",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__TProbT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Prob_max" "', argument " "1"" of type '" "dai::TProb< dai::Real > const *""'"); 
  }
  arg1 = reinterpret_cast< dai::TProb< dai::Real > * >(argp1);
  result = (double)((dai::TProb< dai::Real > const *)arg1)->max();
  _outv = SWIG_From_double(static_cast< double >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( Prob_min, _wrap_Prob_min, std::string() ) {
  dai::TProb< dai::Real > *arg1 = (dai::TProb< dai::Real > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  double result;
  
  if (!SWIG_check_num_args("Prob_min",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__TProbT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Prob_min" "', argument " "1"" of type '" "dai::TProb< dai::Real > const *""'"); 
  }
  arg1 = reinterpret_cast< dai::TProb< dai::Real > * >(argp1);
  result = (double)((dai::TProb< dai::Real > const *)arg1)->min();
  _outv = SWIG_From_double(static_cast< double >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( Prob_sum, _wrap_Prob_sum, std::string() ) {
  dai::TProb< dai::Real > *arg1 = (dai::TProb< dai::Real > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  double result;
  
  if (!SWIG_check_num_args("Prob_sum",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__TProbT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Prob_sum" "', argument " "1"" of type '" "dai::TProb< dai::Real > const *""'"); 
  }
  arg1 = reinterpret_cast< dai::TProb< dai::Real > * >(argp1);
  result = (double)((dai::TProb< dai::Real > const *)arg1)->sum();
  _outv = SWIG_From_double(static_cast< double >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( Prob_sumAbs, _wrap_Prob_sumAbs, std::string() ) {
  dai::TProb< dai::Real > *arg1 = (dai::TProb< dai::Real > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  double result;
  
  if (!SWIG_check_num_args("Prob_sumAbs",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__TProbT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Prob_sumAbs" "', argument " "1"" of type '" "dai::TProb< dai::Real > const *""'"); 
  }
  arg1 = reinterpret_cast< dai::TProb< dai::Real > * >(argp1);
  result = (double)((dai::TProb< dai::Real > const *)arg1)->sumAbs();
  _outv = SWIG_From_double(static_cast< double >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( Prob_maxAbs, _wrap_Prob_maxAbs, std::string() ) {
  dai::TProb< dai::Real > *arg1 = (dai::TProb< dai::Real > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  double result;
  
  if (!SWIG_check_num_args("Prob_maxAbs",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__TProbT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Prob_maxAbs" "', argument " "1"" of type '" "dai::TProb< dai::Real > const *""'"); 
  }
  arg1 = reinterpret_cast< dai::TProb< dai::Real > * >(argp1);
  result = (double)((dai::TProb< dai::Real > const *)arg1)->maxAbs();
  _outv = SWIG_From_double(static_cast< double >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( Prob_hasNaNs, _wrap_Prob_hasNaNs, std::string() ) {
  dai::TProb< dai::Real > *arg1 = (dai::TProb< dai::Real > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  bool result;
  
  if (!SWIG_check_num_args("Prob_hasNaNs",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__TProbT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Prob_hasNaNs" "', argument " "1"" of type '" "dai::TProb< dai::Real > const *""'"); 
  }
  arg1 = reinterpret_cast< dai::TProb< dai::Real > * >(argp1);
  result = (bool)((dai::TProb< dai::Real > const *)arg1)->hasNaNs();
  _outv = SWIG_From_bool(static_cast< bool >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( Prob_hasNegatives, _wrap_Prob_hasNegatives, std::string() ) {
  dai::TProb< dai::Real > *arg1 = (dai::TProb< dai::Real > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  bool result;
  
  if (!SWIG_check_num_args("Prob_hasNegatives",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__TProbT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Prob_hasNegatives" "', argument " "1"" of type '" "dai::TProb< dai::Real > const *""'"); 
  }
  arg1 = reinterpret_cast< dai::TProb< dai::Real > * >(argp1);
  result = (bool)((dai::TProb< dai::Real > const *)arg1)->hasNegatives();
  _outv = SWIG_From_bool(static_cast< bool >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( Prob_argmax, _wrap_Prob_argmax, std::string() ) {
  dai::TProb< dai::Real > *arg1 = (dai::TProb< dai::Real > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  SwigValueWrapper< std::pair< size_t,double > > result;
  
  if (!SWIG_check_num_args("Prob_argmax",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__TProbT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Prob_argmax" "', argument " "1"" of type '" "dai::TProb< dai::Real > const *""'"); 
  }
  arg1 = reinterpret_cast< dai::TProb< dai::Real > * >(argp1);
  result = ((dai::TProb< dai::Real > const *)arg1)->argmax();
  _outv = SWIG_NewPointerObj((new std::pair< size_t,double >(static_cast< const std::pair< size_t,double >& >(result))), SWIGTYPE_p_std__pairT_size_t_double_t, SWIG_POINTER_OWN |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( Prob_draw, _wrap_Prob_draw, std::string() ) {
  dai::TProb< dai::Real > *arg1 = (dai::TProb< dai::Real > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  size_t result;
  
  if (!SWIG_check_num_args("Prob_draw",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__TProbT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Prob_draw" "', argument " "1"" of type '" "dai::TProb< dai::Real > *""'"); 
  }
  arg1 = reinterpret_cast< dai::TProb< dai::Real > * >(argp1);
  result = (arg1)->draw();
  _outv = SWIG_From_size_t(static_cast< size_t >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( Prob___lt__, _wrap_Prob___lt__, std::string() ) {
  dai::TProb< dai::Real > *arg1 = (dai::TProb< dai::Real > *) 0 ;
  dai::TProb< double >::this_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  bool result;
  
  if (!SWIG_check_num_args("Prob___lt__",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__TProbT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Prob___lt__" "', argument " "1"" of type '" "dai::TProb< dai::Real > const *""'"); 
  }
  arg1 = reinterpret_cast< dai::TProb< dai::Real > * >(argp1);
  res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_dai__TProbT_double_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Prob___lt__" "', argument " "2"" of type '" "dai::TProb< double >::this_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Prob___lt__" "', argument " "2"" of type '" "dai::TProb< double >::this_type const &""'"); 
  }
  arg2 = reinterpret_cast< dai::TProb< double >::this_type * >(argp2);
  result = (bool)((dai::TProb< dai::Real > const *)arg1)->operator <((dai::TProb< double >::this_type const &)*arg2);
  _outv = SWIG_From_bool(static_cast< bool >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( Prob___eq__, _wrap_Prob___eq__, std::string() ) {
  dai::TProb< dai::Real > *arg1 = (dai::TProb< dai::Real > *) 0 ;
  dai::TProb< double >::this_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  bool result;
  
  if (!SWIG_check_num_args("Prob___eq__",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__TProbT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Prob___eq__" "', argument " "1"" of type '" "dai::TProb< dai::Real > const *""'"); 
  }
  arg1 = reinterpret_cast< dai::TProb< dai::Real > * >(argp1);
  res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_dai__TProbT_double_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Prob___eq__" "', argument " "2"" of type '" "dai::TProb< double >::this_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Prob___eq__" "', argument " "2"" of type '" "dai::TProb< double >::this_type const &""'"); 
  }
  arg2 = reinterpret_cast< dai::TProb< double >::this_type * >(argp2);
  result = (bool)((dai::TProb< dai::Real > const *)arg1)->operator ==((dai::TProb< double >::this_type const &)*arg2);
  _outv = SWIG_From_bool(static_cast< bool >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( Prob_toString, _wrap_Prob_toString, std::string() ) {
  dai::TProb< dai::Real > *arg1 = (dai::TProb< dai::Real > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  std::string result;
  
  if (!SWIG_check_num_args("Prob_toString",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__TProbT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Prob_toString" "', argument " "1"" of type '" "dai::TProb< dai::Real > const *""'"); 
  }
  arg1 = reinterpret_cast< dai::TProb< dai::Real > * >(argp1);
  result = ((dai::TProb< dai::Real > const *)arg1)->toString();
  _outv = SWIG_From_std_string(static_cast< std::string >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( Prob___uminus__, _wrap_Prob___uminus__, std::string() ) {
  dai::TProb< dai::Real > *arg1 = (dai::TProb< dai::Real > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::TProb< double >::this_type result;
  
  if (!SWIG_check_num_args("Prob___uminus__",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__TProbT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Prob___uminus__" "', argument " "1"" of type '" "dai::TProb< dai::Real > const *""'"); 
  }
  arg1 = reinterpret_cast< dai::TProb< dai::Real > * >(argp1);
  result = ((dai::TProb< dai::Real > const *)arg1)->operator -();
  _outv = SWIG_NewPointerObj((new dai::TProb< double >::this_type(static_cast< const dai::TProb< double >::this_type& >(result))), SWIGTYPE_p_dai__TProbT_double_t, SWIG_POINTER_OWN |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( Prob_abs, _wrap_Prob_abs, std::string() ) {
  dai::TProb< dai::Real > *arg1 = (dai::TProb< dai::Real > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::TProb< double >::this_type result;
  
  if (!SWIG_check_num_args("Prob_abs",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__TProbT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Prob_abs" "', argument " "1"" of type '" "dai::TProb< dai::Real > const *""'"); 
  }
  arg1 = reinterpret_cast< dai::TProb< dai::Real > * >(argp1);
  result = ((dai::TProb< dai::Real > const *)arg1)->abs();
  _outv = SWIG_NewPointerObj((new dai::TProb< double >::this_type(static_cast< const dai::TProb< double >::this_type& >(result))), SWIGTYPE_p_dai__TProbT_double_t, SWIG_POINTER_OWN |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( Prob_exp, _wrap_Prob_exp, std::string() ) {
  dai::TProb< dai::Real > *arg1 = (dai::TProb< dai::Real > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::TProb< double >::this_type result;
  
  if (!SWIG_check_num_args("Prob_exp",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__TProbT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Prob_exp" "', argument " "1"" of type '" "dai::TProb< dai::Real > const *""'"); 
  }
  arg1 = reinterpret_cast< dai::TProb< dai::Real > * >(argp1);
  result = ((dai::TProb< dai::Real > const *)arg1)->exp();
  _outv = SWIG_NewPointerObj((new dai::TProb< double >::this_type(static_cast< const dai::TProb< double >::this_type& >(result))), SWIGTYPE_p_dai__TProbT_double_t, SWIG_POINTER_OWN |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static octave_value_list _wrap_Prob_log__SWIG_0 (const octave_value_list& args, int nargout) {
  dai::TProb< dai::Real > *arg1 = (dai::TProb< dai::Real > *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::TProb< double >::this_type result;
  
  if (!SWIG_check_num_args("Prob_log",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__TProbT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Prob_log" "', argument " "1"" of type '" "dai::TProb< dai::Real > const *""'"); 
  }
  arg1 = reinterpret_cast< dai::TProb< dai::Real > * >(argp1);
  ecode2 = SWIG_AsVal_bool(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Prob_log" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  result = ((dai::TProb< dai::Real > const *)arg1)->log(arg2);
  _outv = SWIG_NewPointerObj((new dai::TProb< double >::this_type(static_cast< const dai::TProb< double >::this_type& >(result))), SWIGTYPE_p_dai__TProbT_double_t, SWIG_POINTER_OWN |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static octave_value_list _wrap_Prob_log__SWIG_1 (const octave_value_list& args, int nargout) {
  dai::TProb< dai::Real > *arg1 = (dai::TProb< dai::Real > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::TProb< double >::this_type result;
  
  if (!SWIG_check_num_args("Prob_log",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__TProbT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Prob_log" "', argument " "1"" of type '" "dai::TProb< dai::Real > const *""'"); 
  }
  arg1 = reinterpret_cast< dai::TProb< dai::Real > * >(argp1);
  result = ((dai::TProb< dai::Real > const *)arg1)->log();
  _outv = SWIG_NewPointerObj((new dai::TProb< double >::this_type(static_cast< const dai::TProb< double >::this_type& >(result))), SWIGTYPE_p_dai__TProbT_double_t, SWIG_POINTER_OWN |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( Prob_log, _wrap_Prob_log, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[2]={
    octave_value_ref(args,0),octave_value_ref(args,1)
  };
  
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dai__TProbT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Prob_log__SWIG_1(args, nargout);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dai__TProbT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Prob_log__SWIG_0(args, nargout);
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


static octave_value_list _wrap_Prob_inverse__SWIG_0 (const octave_value_list& args, int nargout) {
  dai::TProb< dai::Real > *arg1 = (dai::TProb< dai::Real > *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::TProb< double >::this_type result;
  
  if (!SWIG_check_num_args("Prob_inverse",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__TProbT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Prob_inverse" "', argument " "1"" of type '" "dai::TProb< dai::Real > const *""'"); 
  }
  arg1 = reinterpret_cast< dai::TProb< dai::Real > * >(argp1);
  ecode2 = SWIG_AsVal_bool(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Prob_inverse" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  result = ((dai::TProb< dai::Real > const *)arg1)->inverse(arg2);
  _outv = SWIG_NewPointerObj((new dai::TProb< double >::this_type(static_cast< const dai::TProb< double >::this_type& >(result))), SWIGTYPE_p_dai__TProbT_double_t, SWIG_POINTER_OWN |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static octave_value_list _wrap_Prob_inverse__SWIG_1 (const octave_value_list& args, int nargout) {
  dai::TProb< dai::Real > *arg1 = (dai::TProb< dai::Real > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::TProb< double >::this_type result;
  
  if (!SWIG_check_num_args("Prob_inverse",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__TProbT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Prob_inverse" "', argument " "1"" of type '" "dai::TProb< dai::Real > const *""'"); 
  }
  arg1 = reinterpret_cast< dai::TProb< dai::Real > * >(argp1);
  result = ((dai::TProb< dai::Real > const *)arg1)->inverse();
  _outv = SWIG_NewPointerObj((new dai::TProb< double >::this_type(static_cast< const dai::TProb< double >::this_type& >(result))), SWIGTYPE_p_dai__TProbT_double_t, SWIG_POINTER_OWN |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( Prob_inverse, _wrap_Prob_inverse, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[2]={
    octave_value_ref(args,0),octave_value_ref(args,1)
  };
  
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dai__TProbT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Prob_inverse__SWIG_1(args, nargout);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dai__TProbT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Prob_inverse__SWIG_0(args, nargout);
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


static octave_value_list _wrap_Prob_normalized__SWIG_0 (const octave_value_list& args, int nargout) {
  dai::TProb< dai::Real > *arg1 = (dai::TProb< dai::Real > *) 0 ;
  dai::ProbNormType arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::TProb< double >::this_type result;
  
  if (!SWIG_check_num_args("Prob_normalized",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__TProbT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Prob_normalized" "', argument " "1"" of type '" "dai::TProb< dai::Real > const *""'"); 
  }
  arg1 = reinterpret_cast< dai::TProb< dai::Real > * >(argp1);
  ecode2 = SWIG_AsVal_int(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Prob_normalized" "', argument " "2"" of type '" "dai::ProbNormType""'");
  } 
  arg2 = static_cast< dai::ProbNormType >(val2);
  result = ((dai::TProb< dai::Real > const *)arg1)->normalized(arg2);
  _outv = SWIG_NewPointerObj((new dai::TProb< double >::this_type(static_cast< const dai::TProb< double >::this_type& >(result))), SWIGTYPE_p_dai__TProbT_double_t, SWIG_POINTER_OWN |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static octave_value_list _wrap_Prob_normalized__SWIG_1 (const octave_value_list& args, int nargout) {
  dai::TProb< dai::Real > *arg1 = (dai::TProb< dai::Real > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::TProb< double >::this_type result;
  
  if (!SWIG_check_num_args("Prob_normalized",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__TProbT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Prob_normalized" "', argument " "1"" of type '" "dai::TProb< dai::Real > const *""'"); 
  }
  arg1 = reinterpret_cast< dai::TProb< dai::Real > * >(argp1);
  result = ((dai::TProb< dai::Real > const *)arg1)->normalized();
  _outv = SWIG_NewPointerObj((new dai::TProb< double >::this_type(static_cast< const dai::TProb< double >::this_type& >(result))), SWIGTYPE_p_dai__TProbT_double_t, SWIG_POINTER_OWN |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( Prob_normalized, _wrap_Prob_normalized, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[2]={
    octave_value_ref(args,0),octave_value_ref(args,1)
  };
  
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dai__TProbT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Prob_normalized__SWIG_1(args, nargout);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dai__TProbT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Prob_normalized__SWIG_0(args, nargout);
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


SWIG_DEFUN( Prob_randomize, _wrap_Prob_randomize, std::string() ) {
  dai::TProb< dai::Real > *arg1 = (dai::TProb< dai::Real > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::TProb< double >::this_type *result = 0 ;
  
  if (!SWIG_check_num_args("Prob_randomize",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__TProbT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Prob_randomize" "', argument " "1"" of type '" "dai::TProb< dai::Real > *""'"); 
  }
  arg1 = reinterpret_cast< dai::TProb< dai::Real > * >(argp1);
  result = (dai::TProb< double >::this_type *) &(arg1)->randomize();
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dai__TProbT_double_t, 0 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( Prob_setUniform, _wrap_Prob_setUniform, std::string() ) {
  dai::TProb< dai::Real > *arg1 = (dai::TProb< dai::Real > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::TProb< double >::this_type *result = 0 ;
  
  if (!SWIG_check_num_args("Prob_setUniform",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__TProbT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Prob_setUniform" "', argument " "1"" of type '" "dai::TProb< dai::Real > *""'"); 
  }
  arg1 = reinterpret_cast< dai::TProb< dai::Real > * >(argp1);
  result = (dai::TProb< double >::this_type *) &(arg1)->setUniform();
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dai__TProbT_double_t, 0 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( Prob_takeAbs, _wrap_Prob_takeAbs, std::string() ) {
  dai::TProb< dai::Real > *arg1 = (dai::TProb< dai::Real > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::TProb< double >::this_type *result = 0 ;
  
  if (!SWIG_check_num_args("Prob_takeAbs",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__TProbT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Prob_takeAbs" "', argument " "1"" of type '" "dai::TProb< dai::Real > *""'"); 
  }
  arg1 = reinterpret_cast< dai::TProb< dai::Real > * >(argp1);
  result = (dai::TProb< double >::this_type *) &(arg1)->takeAbs();
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dai__TProbT_double_t, 0 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( Prob_takeExp, _wrap_Prob_takeExp, std::string() ) {
  dai::TProb< dai::Real > *arg1 = (dai::TProb< dai::Real > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::TProb< double >::this_type *result = 0 ;
  
  if (!SWIG_check_num_args("Prob_takeExp",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__TProbT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Prob_takeExp" "', argument " "1"" of type '" "dai::TProb< dai::Real > *""'"); 
  }
  arg1 = reinterpret_cast< dai::TProb< dai::Real > * >(argp1);
  result = (dai::TProb< double >::this_type *) &(arg1)->takeExp();
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dai__TProbT_double_t, 0 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static octave_value_list _wrap_Prob_takeLog__SWIG_0 (const octave_value_list& args, int nargout) {
  dai::TProb< dai::Real > *arg1 = (dai::TProb< dai::Real > *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::TProb< double >::this_type *result = 0 ;
  
  if (!SWIG_check_num_args("Prob_takeLog",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__TProbT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Prob_takeLog" "', argument " "1"" of type '" "dai::TProb< dai::Real > *""'"); 
  }
  arg1 = reinterpret_cast< dai::TProb< dai::Real > * >(argp1);
  ecode2 = SWIG_AsVal_bool(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Prob_takeLog" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  result = (dai::TProb< double >::this_type *) &(arg1)->takeLog(arg2);
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dai__TProbT_double_t, 0 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static octave_value_list _wrap_Prob_takeLog__SWIG_1 (const octave_value_list& args, int nargout) {
  dai::TProb< dai::Real > *arg1 = (dai::TProb< dai::Real > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::TProb< double >::this_type *result = 0 ;
  
  if (!SWIG_check_num_args("Prob_takeLog",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__TProbT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Prob_takeLog" "', argument " "1"" of type '" "dai::TProb< dai::Real > *""'"); 
  }
  arg1 = reinterpret_cast< dai::TProb< dai::Real > * >(argp1);
  result = (dai::TProb< double >::this_type *) &(arg1)->takeLog();
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dai__TProbT_double_t, 0 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( Prob_takeLog, _wrap_Prob_takeLog, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[2]={
    octave_value_ref(args,0),octave_value_ref(args,1)
  };
  
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dai__TProbT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Prob_takeLog__SWIG_1(args, nargout);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dai__TProbT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Prob_takeLog__SWIG_0(args, nargout);
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


static octave_value_list _wrap_Prob_normalize__SWIG_0 (const octave_value_list& args, int nargout) {
  dai::TProb< dai::Real > *arg1 = (dai::TProb< dai::Real > *) 0 ;
  dai::ProbNormType arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  double result;
  
  if (!SWIG_check_num_args("Prob_normalize",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__TProbT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Prob_normalize" "', argument " "1"" of type '" "dai::TProb< dai::Real > *""'"); 
  }
  arg1 = reinterpret_cast< dai::TProb< dai::Real > * >(argp1);
  ecode2 = SWIG_AsVal_int(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Prob_normalize" "', argument " "2"" of type '" "dai::ProbNormType""'");
  } 
  arg2 = static_cast< dai::ProbNormType >(val2);
  result = (double)(arg1)->normalize(arg2);
  _outv = SWIG_From_double(static_cast< double >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static octave_value_list _wrap_Prob_normalize__SWIG_1 (const octave_value_list& args, int nargout) {
  dai::TProb< dai::Real > *arg1 = (dai::TProb< dai::Real > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  double result;
  
  if (!SWIG_check_num_args("Prob_normalize",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__TProbT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Prob_normalize" "', argument " "1"" of type '" "dai::TProb< dai::Real > *""'"); 
  }
  arg1 = reinterpret_cast< dai::TProb< dai::Real > * >(argp1);
  result = (double)(arg1)->normalize();
  _outv = SWIG_From_double(static_cast< double >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( Prob_normalize, _wrap_Prob_normalize, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[2]={
    octave_value_ref(args,0),octave_value_ref(args,1)
  };
  
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dai__TProbT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Prob_normalize__SWIG_1(args, nargout);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dai__TProbT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Prob_normalize__SWIG_0(args, nargout);
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


SWIG_DEFUN( Prob_fill, _wrap_Prob_fill, std::string() ) {
  dai::TProb< dai::Real > *arg1 = (dai::TProb< dai::Real > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::TProb< double >::this_type *result = 0 ;
  
  if (!SWIG_check_num_args("Prob_fill",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__TProbT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Prob_fill" "', argument " "1"" of type '" "dai::TProb< dai::Real > *""'"); 
  }
  arg1 = reinterpret_cast< dai::TProb< dai::Real > * >(argp1);
  ecode2 = SWIG_AsVal_double(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Prob_fill" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  result = (dai::TProb< double >::this_type *) &(arg1)->fill(arg2);
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dai__TProbT_double_t, 0 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static octave_value_list _wrap_Prob___add____SWIG_0 (const octave_value_list& args, int nargout) {
  dai::TProb< dai::Real > *arg1 = (dai::TProb< dai::Real > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::TProb< double >::this_type result;
  
  if (!SWIG_check_num_args("Prob___add__",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__TProbT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Prob___add__" "', argument " "1"" of type '" "dai::TProb< dai::Real > const *""'"); 
  }
  arg1 = reinterpret_cast< dai::TProb< dai::Real > * >(argp1);
  ecode2 = SWIG_AsVal_double(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Prob___add__" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  result = ((dai::TProb< dai::Real > const *)arg1)->operator +(arg2);
  _outv = SWIG_NewPointerObj((new dai::TProb< double >::this_type(static_cast< const dai::TProb< double >::this_type& >(result))), SWIGTYPE_p_dai__TProbT_double_t, SWIG_POINTER_OWN |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static octave_value_list _wrap_Prob___sub____SWIG_0 (const octave_value_list& args, int nargout) {
  dai::TProb< dai::Real > *arg1 = (dai::TProb< dai::Real > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::TProb< double >::this_type result;
  
  if (!SWIG_check_num_args("Prob___sub__",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__TProbT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Prob___sub__" "', argument " "1"" of type '" "dai::TProb< dai::Real > const *""'"); 
  }
  arg1 = reinterpret_cast< dai::TProb< dai::Real > * >(argp1);
  ecode2 = SWIG_AsVal_double(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Prob___sub__" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  result = ((dai::TProb< dai::Real > const *)arg1)->operator -(arg2);
  _outv = SWIG_NewPointerObj((new dai::TProb< double >::this_type(static_cast< const dai::TProb< double >::this_type& >(result))), SWIGTYPE_p_dai__TProbT_double_t, SWIG_POINTER_OWN |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static octave_value_list _wrap_Prob___mul____SWIG_0 (const octave_value_list& args, int nargout) {
  dai::TProb< dai::Real > *arg1 = (dai::TProb< dai::Real > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::TProb< double >::this_type result;
  
  if (!SWIG_check_num_args("Prob___mul__",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__TProbT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Prob___mul__" "', argument " "1"" of type '" "dai::TProb< dai::Real > const *""'"); 
  }
  arg1 = reinterpret_cast< dai::TProb< dai::Real > * >(argp1);
  ecode2 = SWIG_AsVal_double(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Prob___mul__" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  result = ((dai::TProb< dai::Real > const *)arg1)->operator *(arg2);
  _outv = SWIG_NewPointerObj((new dai::TProb< double >::this_type(static_cast< const dai::TProb< double >::this_type& >(result))), SWIGTYPE_p_dai__TProbT_double_t, SWIG_POINTER_OWN |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static octave_value_list _wrap_Prob___div____SWIG_0 (const octave_value_list& args, int nargout) {
  dai::TProb< dai::Real > *arg1 = (dai::TProb< dai::Real > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::TProb< double >::this_type result;
  
  if (!SWIG_check_num_args("Prob___div__",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__TProbT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Prob___div__" "', argument " "1"" of type '" "dai::TProb< dai::Real > const *""'"); 
  }
  arg1 = reinterpret_cast< dai::TProb< dai::Real > * >(argp1);
  ecode2 = SWIG_AsVal_double(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Prob___div__" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  result = ((dai::TProb< dai::Real > const *)arg1)->operator /(arg2);
  _outv = SWIG_NewPointerObj((new dai::TProb< double >::this_type(static_cast< const dai::TProb< double >::this_type& >(result))), SWIGTYPE_p_dai__TProbT_double_t, SWIG_POINTER_OWN |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static octave_value_list _wrap_Prob___xor____SWIG_0 (const octave_value_list& args, int nargout) {
  dai::TProb< dai::Real > *arg1 = (dai::TProb< dai::Real > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::TProb< double >::this_type result;
  
  if (!SWIG_check_num_args("Prob___xor__",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__TProbT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Prob___xor__" "', argument " "1"" of type '" "dai::TProb< dai::Real > const *""'"); 
  }
  arg1 = reinterpret_cast< dai::TProb< dai::Real > * >(argp1);
  ecode2 = SWIG_AsVal_double(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Prob___xor__" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  result = ((dai::TProb< dai::Real > const *)arg1)->operator ^(arg2);
  _outv = SWIG_NewPointerObj((new dai::TProb< double >::this_type(static_cast< const dai::TProb< double >::this_type& >(result))), SWIGTYPE_p_dai__TProbT_double_t, SWIG_POINTER_OWN |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( Prob_divide, _wrap_Prob_divide, std::string() ) {
  dai::TProb< dai::Real > *arg1 = (dai::TProb< dai::Real > *) 0 ;
  dai::TProb< double >::this_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::TProb< double >::this_type *result = 0 ;
  
  if (!SWIG_check_num_args("Prob_divide",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__TProbT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Prob_divide" "', argument " "1"" of type '" "dai::TProb< dai::Real > *""'"); 
  }
  arg1 = reinterpret_cast< dai::TProb< dai::Real > * >(argp1);
  res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_dai__TProbT_double_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Prob_divide" "', argument " "2"" of type '" "dai::TProb< double >::this_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Prob_divide" "', argument " "2"" of type '" "dai::TProb< double >::this_type const &""'"); 
  }
  arg2 = reinterpret_cast< dai::TProb< double >::this_type * >(argp2);
  result = (dai::TProb< double >::this_type *) &(arg1)->divide((dai::TProb< double >::this_type const &)*arg2);
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dai__TProbT_double_t, 0 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static octave_value_list _wrap_Prob___add____SWIG_1 (const octave_value_list& args, int nargout) {
  dai::TProb< dai::Real > *arg1 = (dai::TProb< dai::Real > *) 0 ;
  dai::TProb< double >::this_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::TProb< double >::this_type result;
  
  if (!SWIG_check_num_args("Prob___add__",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__TProbT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Prob___add__" "', argument " "1"" of type '" "dai::TProb< dai::Real > const *""'"); 
  }
  arg1 = reinterpret_cast< dai::TProb< dai::Real > * >(argp1);
  res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_dai__TProbT_double_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Prob___add__" "', argument " "2"" of type '" "dai::TProb< double >::this_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Prob___add__" "', argument " "2"" of type '" "dai::TProb< double >::this_type const &""'"); 
  }
  arg2 = reinterpret_cast< dai::TProb< double >::this_type * >(argp2);
  result = ((dai::TProb< dai::Real > const *)arg1)->operator +((dai::TProb< double >::this_type const &)*arg2);
  _outv = SWIG_NewPointerObj((new dai::TProb< double >::this_type(static_cast< const dai::TProb< double >::this_type& >(result))), SWIGTYPE_p_dai__TProbT_double_t, SWIG_POINTER_OWN |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( Prob___add__, _wrap_Prob___add__, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[2]={
    octave_value_ref(args,0),octave_value_ref(args,1)
  };
  
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dai__TProbT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_dai__TProbT_double_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Prob___add____SWIG_1(args, nargout);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dai__TProbT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Prob___add____SWIG_0(args, nargout);
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


static octave_value_list _wrap_Prob___sub____SWIG_1 (const octave_value_list& args, int nargout) {
  dai::TProb< dai::Real > *arg1 = (dai::TProb< dai::Real > *) 0 ;
  dai::TProb< double >::this_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::TProb< double >::this_type result;
  
  if (!SWIG_check_num_args("Prob___sub__",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__TProbT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Prob___sub__" "', argument " "1"" of type '" "dai::TProb< dai::Real > const *""'"); 
  }
  arg1 = reinterpret_cast< dai::TProb< dai::Real > * >(argp1);
  res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_dai__TProbT_double_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Prob___sub__" "', argument " "2"" of type '" "dai::TProb< double >::this_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Prob___sub__" "', argument " "2"" of type '" "dai::TProb< double >::this_type const &""'"); 
  }
  arg2 = reinterpret_cast< dai::TProb< double >::this_type * >(argp2);
  result = ((dai::TProb< dai::Real > const *)arg1)->operator -((dai::TProb< double >::this_type const &)*arg2);
  _outv = SWIG_NewPointerObj((new dai::TProb< double >::this_type(static_cast< const dai::TProb< double >::this_type& >(result))), SWIGTYPE_p_dai__TProbT_double_t, SWIG_POINTER_OWN |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( Prob___sub__, _wrap_Prob___sub__, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[2]={
    octave_value_ref(args,0),octave_value_ref(args,1)
  };
  
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dai__TProbT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_dai__TProbT_double_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Prob___sub____SWIG_1(args, nargout);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dai__TProbT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Prob___sub____SWIG_0(args, nargout);
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


static octave_value_list _wrap_Prob___mul____SWIG_1 (const octave_value_list& args, int nargout) {
  dai::TProb< dai::Real > *arg1 = (dai::TProb< dai::Real > *) 0 ;
  dai::TProb< double >::this_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::TProb< double >::this_type result;
  
  if (!SWIG_check_num_args("Prob___mul__",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__TProbT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Prob___mul__" "', argument " "1"" of type '" "dai::TProb< dai::Real > const *""'"); 
  }
  arg1 = reinterpret_cast< dai::TProb< dai::Real > * >(argp1);
  res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_dai__TProbT_double_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Prob___mul__" "', argument " "2"" of type '" "dai::TProb< double >::this_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Prob___mul__" "', argument " "2"" of type '" "dai::TProb< double >::this_type const &""'"); 
  }
  arg2 = reinterpret_cast< dai::TProb< double >::this_type * >(argp2);
  result = ((dai::TProb< dai::Real > const *)arg1)->operator *((dai::TProb< double >::this_type const &)*arg2);
  _outv = SWIG_NewPointerObj((new dai::TProb< double >::this_type(static_cast< const dai::TProb< double >::this_type& >(result))), SWIGTYPE_p_dai__TProbT_double_t, SWIG_POINTER_OWN |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( Prob___mul__, _wrap_Prob___mul__, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[2]={
    octave_value_ref(args,0),octave_value_ref(args,1)
  };
  
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dai__TProbT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_dai__TProbT_double_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Prob___mul____SWIG_1(args, nargout);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dai__TProbT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Prob___mul____SWIG_0(args, nargout);
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


static octave_value_list _wrap_Prob___div____SWIG_1 (const octave_value_list& args, int nargout) {
  dai::TProb< dai::Real > *arg1 = (dai::TProb< dai::Real > *) 0 ;
  dai::TProb< double >::this_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::TProb< double >::this_type result;
  
  if (!SWIG_check_num_args("Prob___div__",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__TProbT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Prob___div__" "', argument " "1"" of type '" "dai::TProb< dai::Real > const *""'"); 
  }
  arg1 = reinterpret_cast< dai::TProb< dai::Real > * >(argp1);
  res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_dai__TProbT_double_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Prob___div__" "', argument " "2"" of type '" "dai::TProb< double >::this_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Prob___div__" "', argument " "2"" of type '" "dai::TProb< double >::this_type const &""'"); 
  }
  arg2 = reinterpret_cast< dai::TProb< double >::this_type * >(argp2);
  result = ((dai::TProb< dai::Real > const *)arg1)->operator /((dai::TProb< double >::this_type const &)*arg2);
  _outv = SWIG_NewPointerObj((new dai::TProb< double >::this_type(static_cast< const dai::TProb< double >::this_type& >(result))), SWIGTYPE_p_dai__TProbT_double_t, SWIG_POINTER_OWN |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( Prob___div__, _wrap_Prob___div__, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[2]={
    octave_value_ref(args,0),octave_value_ref(args,1)
  };
  
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dai__TProbT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_dai__TProbT_double_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Prob___div____SWIG_1(args, nargout);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dai__TProbT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Prob___div____SWIG_0(args, nargout);
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


SWIG_DEFUN( Prob_divided_by, _wrap_Prob_divided_by, std::string() ) {
  dai::TProb< dai::Real > *arg1 = (dai::TProb< dai::Real > *) 0 ;
  dai::TProb< double >::this_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::TProb< double >::this_type result;
  
  if (!SWIG_check_num_args("Prob_divided_by",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__TProbT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Prob_divided_by" "', argument " "1"" of type '" "dai::TProb< dai::Real > const *""'"); 
  }
  arg1 = reinterpret_cast< dai::TProb< dai::Real > * >(argp1);
  res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_dai__TProbT_double_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Prob_divided_by" "', argument " "2"" of type '" "dai::TProb< double >::this_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Prob_divided_by" "', argument " "2"" of type '" "dai::TProb< double >::this_type const &""'"); 
  }
  arg2 = reinterpret_cast< dai::TProb< double >::this_type * >(argp2);
  result = ((dai::TProb< dai::Real > const *)arg1)->divided_by((dai::TProb< double >::this_type const &)*arg2);
  _outv = SWIG_NewPointerObj((new dai::TProb< double >::this_type(static_cast< const dai::TProb< double >::this_type& >(result))), SWIGTYPE_p_dai__TProbT_double_t, SWIG_POINTER_OWN |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static octave_value_list _wrap_Prob___xor____SWIG_1 (const octave_value_list& args, int nargout) {
  dai::TProb< dai::Real > *arg1 = (dai::TProb< dai::Real > *) 0 ;
  dai::TProb< double >::this_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::TProb< double >::this_type result;
  
  if (!SWIG_check_num_args("Prob___xor__",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__TProbT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Prob___xor__" "', argument " "1"" of type '" "dai::TProb< dai::Real > const *""'"); 
  }
  arg1 = reinterpret_cast< dai::TProb< dai::Real > * >(argp1);
  res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_dai__TProbT_double_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Prob___xor__" "', argument " "2"" of type '" "dai::TProb< double >::this_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Prob___xor__" "', argument " "2"" of type '" "dai::TProb< double >::this_type const &""'"); 
  }
  arg2 = reinterpret_cast< dai::TProb< double >::this_type * >(argp2);
  result = ((dai::TProb< dai::Real > const *)arg1)->operator ^((dai::TProb< double >::this_type const &)*arg2);
  _outv = SWIG_NewPointerObj((new dai::TProb< double >::this_type(static_cast< const dai::TProb< double >::this_type& >(result))), SWIGTYPE_p_dai__TProbT_double_t, SWIG_POINTER_OWN |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( Prob___xor__, _wrap_Prob___xor__, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[2]={
    octave_value_ref(args,0),octave_value_ref(args,1)
  };
  
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dai__TProbT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_dai__TProbT_double_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Prob___xor____SWIG_1(args, nargout);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dai__TProbT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Prob___xor____SWIG_0(args, nargout);
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


SWIG_DEFUN( Prob___getitem__, _wrap_Prob___getitem__, std::string() ) {
  dai::TProb< dai::Real > *arg1 = (dai::TProb< dai::Real > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::Real result;
  
  if (!SWIG_check_num_args("Prob___getitem__",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__TProbT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Prob___getitem__" "', argument " "1"" of type '" "dai::TProb< dai::Real > const *""'"); 
  }
  arg1 = reinterpret_cast< dai::TProb< dai::Real > * >(argp1);
  ecode2 = SWIG_AsVal_int(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Prob___getitem__" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (dai::Real)dai_TProb_Sl_dai_Real_Sg____getitem__((dai::TProb< double > const *)arg1,arg2);
  _outv = SWIG_From_double(static_cast< double >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( Prob___setitem__, _wrap_Prob___setitem__, std::string() ) {
  dai::TProb< dai::Real > *arg1 = (dai::TProb< dai::Real > *) 0 ;
  int arg2 ;
  dai::Real arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("Prob___setitem__",args.length(),3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__TProbT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Prob___setitem__" "', argument " "1"" of type '" "dai::TProb< dai::Real > *""'"); 
  }
  arg1 = reinterpret_cast< dai::TProb< dai::Real > * >(argp1);
  ecode2 = SWIG_AsVal_int(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Prob___setitem__" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_double(args(2), &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Prob___setitem__" "', argument " "3"" of type '" "dai::Real""'");
  } 
  arg3 = static_cast< dai::Real >(val3);
  dai_TProb_Sl_dai_Real_Sg____setitem__(arg1,arg2,arg3);
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( Prob___paren__, _wrap_Prob___paren__, std::string() ) {
  dai::TProb< dai::Real > *arg1 = (dai::TProb< dai::Real > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::Real result;
  
  if (!SWIG_check_num_args("Prob___paren__",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__TProbT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Prob___paren__" "', argument " "1"" of type '" "dai::TProb< dai::Real > const *""'"); 
  }
  arg1 = reinterpret_cast< dai::TProb< dai::Real > * >(argp1);
  ecode2 = SWIG_AsVal_int(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Prob___paren__" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (dai::Real)dai_TProb_Sl_dai_Real_Sg____paren__((dai::TProb< double > const *)arg1,arg2);
  _outv = SWIG_From_double(static_cast< double >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( Prob___paren_asgn__, _wrap_Prob___paren_asgn__, std::string() ) {
  dai::TProb< dai::Real > *arg1 = (dai::TProb< dai::Real > *) 0 ;
  int arg2 ;
  dai::Real arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("Prob___paren_asgn__",args.length(),3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__TProbT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Prob___paren_asgn__" "', argument " "1"" of type '" "dai::TProb< dai::Real > *""'"); 
  }
  arg1 = reinterpret_cast< dai::TProb< dai::Real > * >(argp1);
  ecode2 = SWIG_AsVal_int(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Prob___paren_asgn__" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_double(args(2), &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Prob___paren_asgn__" "', argument " "3"" of type '" "dai::Real""'");
  } 
  arg3 = static_cast< dai::Real >(val3);
  dai_TProb_Sl_dai_Real_Sg____paren_asgn__(arg1,arg2,arg3);
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( Prob___str__, _wrap_Prob___str__, std::string() ) {
  dai::TProb< dai::Real > *arg1 = (dai::TProb< dai::Real > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  char *result = 0 ;
  
  if (!SWIG_check_num_args("Prob___str__",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__TProbT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Prob___str__" "', argument " "1"" of type '" "dai::TProb< dai::Real > const *""'"); 
  }
  arg1 = reinterpret_cast< dai::TProb< dai::Real > * >(argp1);
  result = (char *)dai_TProb_Sl_dai_Real_Sg____str__((dai::TProb< double > const *)arg1);
  _outv = SWIG_FromCharPtr((const char *)result);
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( Prob___str, _wrap_Prob___str, std::string() ) {
  dai::TProb< dai::Real > *arg1 = (dai::TProb< dai::Real > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  std::string result;
  
  if (!SWIG_check_num_args("Prob___str",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__TProbT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Prob___str" "', argument " "1"" of type '" "dai::TProb< dai::Real > const *""'"); 
  }
  arg1 = reinterpret_cast< dai::TProb< dai::Real > * >(argp1);
  result = dai_TProb_Sl_dai_Real_Sg____str((dai::TProb< double > const *)arg1);
  _outv = SWIG_From_std_string(static_cast< std::string >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( delete_Prob, _wrap_delete_Prob, std::string() ) {
  dai::TProb< dai::Real > *arg1 = (dai::TProb< dai::Real > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("delete_Prob",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__TProbT_double_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Prob" "', argument " "1"" of type '" "dai::TProb< dai::Real > *""'"); 
  }
  arg1 = reinterpret_cast< dai::TProb< dai::Real > * >(argp1);
  delete arg1;
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static swig_octave_member swig_Prob_members[] = {
{"begin",_wrap_Prob_begin,0,0,0,0},
{"end",_wrap_Prob_end,0,0,0,0},
{"rbegin",_wrap_Prob_rbegin,0,0,0,0},
{"rend",_wrap_Prob_rend,0,0,0,0},
{"resize",_wrap_Prob_resize,0,0,0,0},
{"get",_wrap_Prob_get,0,0,0,0},
{"set",_wrap_Prob_set,0,0,0,0},
{"p",_wrap_Prob_p,0,0,0,0},
{"size",_wrap_Prob_size,0,0,0,0},
{"entropy",_wrap_Prob_entropy,0,0,0,0},
{"max",_wrap_Prob_max,0,0,0,0},
{"min",_wrap_Prob_min,0,0,0,0},
{"sum",_wrap_Prob_sum,0,0,0,0},
{"sumAbs",_wrap_Prob_sumAbs,0,0,0,0},
{"maxAbs",_wrap_Prob_maxAbs,0,0,0,0},
{"hasNaNs",_wrap_Prob_hasNaNs,0,0,0,0},
{"hasNegatives",_wrap_Prob_hasNegatives,0,0,0,0},
{"argmax",_wrap_Prob_argmax,0,0,0,0},
{"draw",_wrap_Prob_draw,0,0,0,0},
{"__lt__",_wrap_Prob___lt__,0,0,0,0},
{"__eq__",_wrap_Prob___eq__,0,0,0,0},
{"toString",_wrap_Prob_toString,0,0,0,0},
{"__uminus__",_wrap_Prob___uminus__,0,0,0,0},
{"abs",_wrap_Prob_abs,0,0,0,0},
{"exp",_wrap_Prob_exp,0,0,0,0},
{"log",_wrap_Prob_log,0,0,0,0},
{"inverse",_wrap_Prob_inverse,0,0,0,0},
{"normalized",_wrap_Prob_normalized,0,0,0,0},
{"randomize",_wrap_Prob_randomize,0,0,0,0},
{"setUniform",_wrap_Prob_setUniform,0,0,0,0},
{"takeAbs",_wrap_Prob_takeAbs,0,0,0,0},
{"takeExp",_wrap_Prob_takeExp,0,0,0,0},
{"takeLog",_wrap_Prob_takeLog,0,0,0,0},
{"normalize",_wrap_Prob_normalize,0,0,0,0},
{"fill",_wrap_Prob_fill,0,0,0,0},
{"divide",_wrap_Prob_divide,0,0,0,0},
{"__add__",_wrap_Prob___add__,0,0,0,0},
{"__sub__",_wrap_Prob___sub__,0,0,0,0},
{"__mul__",_wrap_Prob___mul__,0,0,0,0},
{"__div__",_wrap_Prob___div__,0,0,0,0},
{"divided_by",_wrap_Prob_divided_by,0,0,0,0},
{"__xor__",_wrap_Prob___xor__,0,0,0,0},
{"__getitem__",_wrap_Prob___getitem__,0,0,0,0},
{"__setitem__",_wrap_Prob___setitem__,0,0,0,0},
{"__paren__",_wrap_Prob___paren__,0,0,0,0},
{"__paren_asgn__",_wrap_Prob___paren_asgn__,0,0,0,0},
{"__str__",_wrap_Prob___str__,0,0,0,0},
{"__str",_wrap_Prob___str,0,0,0,0},
{0,0,0,0,0,0}
};
static const char *swig_Prob_base_names[] = {0};
static const swig_type_info *swig_Prob_base[] = {0};
static swig_octave_class _wrap_class_Prob = {"Prob", &SWIGTYPE_p_dai__TProbT_double_t,0,_wrap_new_Prob,0,_wrap_delete_Prob,swig_Prob_members,swig_Prob_base_names,swig_Prob_base };

static octave_value_list _wrap_createFactorIsing__SWIG_0 (const octave_value_list& args, int nargout) {
  dai::Var *arg1 = 0 ;
  dai::Real arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::Factor result;
  
  if (!SWIG_check_num_args("createFactorIsing",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1, SWIGTYPE_p_dai__Var,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "createFactorIsing" "', argument " "1"" of type '" "dai::Var const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "createFactorIsing" "', argument " "1"" of type '" "dai::Var const &""'"); 
  }
  arg1 = reinterpret_cast< dai::Var * >(argp1);
  ecode2 = SWIG_AsVal_double(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "createFactorIsing" "', argument " "2"" of type '" "dai::Real""'");
  } 
  arg2 = static_cast< dai::Real >(val2);
  result = dai::createFactorIsing((dai::Var const &)*arg1,arg2);
  _outv = SWIG_NewPointerObj((new dai::Factor(static_cast< const dai::Factor& >(result))), SWIGTYPE_p_dai__TFactorT_double_t, SWIG_POINTER_OWN |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static octave_value_list _wrap_createFactorIsing__SWIG_1 (const octave_value_list& args, int nargout) {
  dai::Var *arg1 = 0 ;
  dai::Var *arg2 = 0 ;
  dai::Real arg3 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::Factor result;
  
  if (!SWIG_check_num_args("createFactorIsing",args.length(),3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1, SWIGTYPE_p_dai__Var,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "createFactorIsing" "', argument " "1"" of type '" "dai::Var const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "createFactorIsing" "', argument " "1"" of type '" "dai::Var const &""'"); 
  }
  arg1 = reinterpret_cast< dai::Var * >(argp1);
  res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_dai__Var,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "createFactorIsing" "', argument " "2"" of type '" "dai::Var const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "createFactorIsing" "', argument " "2"" of type '" "dai::Var const &""'"); 
  }
  arg2 = reinterpret_cast< dai::Var * >(argp2);
  ecode3 = SWIG_AsVal_double(args(2), &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "createFactorIsing" "', argument " "3"" of type '" "dai::Real""'");
  } 
  arg3 = static_cast< dai::Real >(val3);
  result = dai::createFactorIsing((dai::Var const &)*arg1,(dai::Var const &)*arg2,arg3);
  _outv = SWIG_NewPointerObj((new dai::Factor(static_cast< const dai::Factor& >(result))), SWIGTYPE_p_dai__TFactorT_double_t, SWIG_POINTER_OWN |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( createFactorIsing, _wrap_createFactorIsing, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[3]={
    octave_value_ref(args,0),octave_value_ref(args,1),octave_value_ref(args,2)
  };
  
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dai__Var, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_createFactorIsing__SWIG_0(args, nargout);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dai__Var, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_dai__Var, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_createFactorIsing__SWIG_1(args, nargout);
        }
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


SWIG_DEFUN( createFactorExpGauss, _wrap_createFactorExpGauss, std::string() ) {
  dai::VarSet *arg1 = 0 ;
  dai::Real arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::Factor result;
  
  if (!SWIG_check_num_args("createFactorExpGauss",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1, SWIGTYPE_p_dai__VarSet,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "createFactorExpGauss" "', argument " "1"" of type '" "dai::VarSet const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "createFactorExpGauss" "', argument " "1"" of type '" "dai::VarSet const &""'"); 
  }
  arg1 = reinterpret_cast< dai::VarSet * >(argp1);
  ecode2 = SWIG_AsVal_double(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "createFactorExpGauss" "', argument " "2"" of type '" "dai::Real""'");
  } 
  arg2 = static_cast< dai::Real >(val2);
  result = dai::createFactorExpGauss((dai::VarSet const &)*arg1,arg2);
  _outv = SWIG_NewPointerObj((new dai::Factor(static_cast< const dai::Factor& >(result))), SWIGTYPE_p_dai__TFactorT_double_t, SWIG_POINTER_OWN |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( createFactorPotts, _wrap_createFactorPotts, std::string() ) {
  dai::Var *arg1 = 0 ;
  dai::Var *arg2 = 0 ;
  dai::Real arg3 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::Factor result;
  
  if (!SWIG_check_num_args("createFactorPotts",args.length(),3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1, SWIGTYPE_p_dai__Var,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "createFactorPotts" "', argument " "1"" of type '" "dai::Var const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "createFactorPotts" "', argument " "1"" of type '" "dai::Var const &""'"); 
  }
  arg1 = reinterpret_cast< dai::Var * >(argp1);
  res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_dai__Var,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "createFactorPotts" "', argument " "2"" of type '" "dai::Var const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "createFactorPotts" "', argument " "2"" of type '" "dai::Var const &""'"); 
  }
  arg2 = reinterpret_cast< dai::Var * >(argp2);
  ecode3 = SWIG_AsVal_double(args(2), &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "createFactorPotts" "', argument " "3"" of type '" "dai::Real""'");
  } 
  arg3 = static_cast< dai::Real >(val3);
  result = dai::createFactorPotts((dai::Var const &)*arg1,(dai::Var const &)*arg2,arg3);
  _outv = SWIG_NewPointerObj((new dai::Factor(static_cast< const dai::Factor& >(result))), SWIGTYPE_p_dai__TFactorT_double_t, SWIG_POINTER_OWN |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static octave_value_list _wrap_createFactorDelta__SWIG_0 (const octave_value_list& args, int nargout) {
  dai::Var *arg1 = 0 ;
  size_t arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::Factor result;
  
  if (!SWIG_check_num_args("createFactorDelta",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1, SWIGTYPE_p_dai__Var,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "createFactorDelta" "', argument " "1"" of type '" "dai::Var const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "createFactorDelta" "', argument " "1"" of type '" "dai::Var const &""'"); 
  }
  arg1 = reinterpret_cast< dai::Var * >(argp1);
  ecode2 = SWIG_AsVal_size_t(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "createFactorDelta" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  result = dai::createFactorDelta((dai::Var const &)*arg1,arg2);
  _outv = SWIG_NewPointerObj((new dai::Factor(static_cast< const dai::Factor& >(result))), SWIGTYPE_p_dai__TFactorT_double_t, SWIG_POINTER_OWN |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static octave_value_list _wrap_createFactorDelta__SWIG_1 (const octave_value_list& args, int nargout) {
  dai::VarSet *arg1 = 0 ;
  size_t arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::Factor result;
  
  if (!SWIG_check_num_args("createFactorDelta",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1, SWIGTYPE_p_dai__VarSet,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "createFactorDelta" "', argument " "1"" of type '" "dai::VarSet const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "createFactorDelta" "', argument " "1"" of type '" "dai::VarSet const &""'"); 
  }
  arg1 = reinterpret_cast< dai::VarSet * >(argp1);
  ecode2 = SWIG_AsVal_size_t(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "createFactorDelta" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  result = dai::createFactorDelta((dai::VarSet const &)*arg1,arg2);
  _outv = SWIG_NewPointerObj((new dai::Factor(static_cast< const dai::Factor& >(result))), SWIGTYPE_p_dai__TFactorT_double_t, SWIG_POINTER_OWN |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( createFactorDelta, _wrap_createFactorDelta, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[2]={
    octave_value_ref(args,0),octave_value_ref(args,1)
  };
  
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dai__Var, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_createFactorDelta__SWIG_0(args, nargout);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dai__VarSet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_createFactorDelta__SWIG_1(args, nargout);
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


static octave_value_list _wrap_new_Factor__SWIG_0 (const octave_value_list& args, int nargout) {
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::TFactor< dai::Real > *result = 0 ;
  
  if (!SWIG_check_num_args("new_Factor",args.length(),1,1,0)) {
    SWIG_fail;
  }
  ecode1 = SWIG_AsVal_double(args(0), &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Factor" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  result = (dai::TFactor< dai::Real > *)new dai::TFactor< dai::Real >(arg1);
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dai__TFactorT_double_t, 1 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static octave_value_list _wrap_new_Factor__SWIG_1 (const octave_value_list& args, int nargout) {
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::TFactor< dai::Real > *result = 0 ;
  
  if (!SWIG_check_num_args("new_Factor",args.length(),0,0,0)) {
    SWIG_fail;
  }
  result = (dai::TFactor< dai::Real > *)new dai::TFactor< dai::Real >();
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dai__TFactorT_double_t, 1 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static octave_value_list _wrap_new_Factor__SWIG_2 (const octave_value_list& args, int nargout) {
  dai::Var *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::TFactor< dai::Real > *result = 0 ;
  
  if (!SWIG_check_num_args("new_Factor",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1, SWIGTYPE_p_dai__Var,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Factor" "', argument " "1"" of type '" "dai::Var const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Factor" "', argument " "1"" of type '" "dai::Var const &""'"); 
  }
  arg1 = reinterpret_cast< dai::Var * >(argp1);
  result = (dai::TFactor< dai::Real > *)new dai::TFactor< dai::Real >((dai::Var const &)*arg1);
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dai__TFactorT_double_t, 1 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static octave_value_list _wrap_new_Factor__SWIG_3 (const octave_value_list& args, int nargout) {
  dai::VarSet *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::TFactor< dai::Real > *result = 0 ;
  
  if (!SWIG_check_num_args("new_Factor",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1, SWIGTYPE_p_dai__VarSet,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Factor" "', argument " "1"" of type '" "dai::VarSet const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Factor" "', argument " "1"" of type '" "dai::VarSet const &""'"); 
  }
  arg1 = reinterpret_cast< dai::VarSet * >(argp1);
  result = (dai::TFactor< dai::Real > *)new dai::TFactor< dai::Real >((dai::VarSet const &)*arg1);
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dai__TFactorT_double_t, 1 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static octave_value_list _wrap_new_Factor__SWIG_4 (const octave_value_list& args, int nargout) {
  dai::VarSet *arg1 = 0 ;
  double arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::TFactor< dai::Real > *result = 0 ;
  
  if (!SWIG_check_num_args("new_Factor",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1, SWIGTYPE_p_dai__VarSet,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Factor" "', argument " "1"" of type '" "dai::VarSet const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Factor" "', argument " "1"" of type '" "dai::VarSet const &""'"); 
  }
  arg1 = reinterpret_cast< dai::VarSet * >(argp1);
  ecode2 = SWIG_AsVal_double(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Factor" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  result = (dai::TFactor< dai::Real > *)new dai::TFactor< dai::Real >((dai::VarSet const &)*arg1,arg2);
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dai__TFactorT_double_t, 1 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static octave_value_list _wrap_new_Factor__SWIG_5 (const octave_value_list& args, int nargout) {
  dai::VarSet *arg1 = 0 ;
  double *arg2 = (double *) 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::TFactor< dai::Real > *result = 0 ;
  
  if (!SWIG_check_num_args("new_Factor",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1, SWIGTYPE_p_dai__VarSet,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Factor" "', argument " "1"" of type '" "dai::VarSet const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Factor" "', argument " "1"" of type '" "dai::VarSet const &""'"); 
  }
  arg1 = reinterpret_cast< dai::VarSet * >(argp1);
  res2 = SWIG_ConvertPtr(args(1), &argp2,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_Factor" "', argument " "2"" of type '" "double const *""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  result = (dai::TFactor< dai::Real > *)new dai::TFactor< dai::Real >((dai::VarSet const &)*arg1,(double const *)arg2);
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dai__TFactorT_double_t, 1 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static octave_value_list _wrap_new_Factor__SWIG_6 (const octave_value_list& args, int nargout) {
  dai::VarSet *arg1 = 0 ;
  dai::TProb< double > *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::TFactor< dai::Real > *result = 0 ;
  
  if (!SWIG_check_num_args("new_Factor",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1, SWIGTYPE_p_dai__VarSet,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Factor" "', argument " "1"" of type '" "dai::VarSet const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Factor" "', argument " "1"" of type '" "dai::VarSet const &""'"); 
  }
  arg1 = reinterpret_cast< dai::VarSet * >(argp1);
  res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_dai__TProbT_double_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_Factor" "', argument " "2"" of type '" "dai::TProb< double > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Factor" "', argument " "2"" of type '" "dai::TProb< double > const &""'"); 
  }
  arg2 = reinterpret_cast< dai::TProb< double > * >(argp2);
  result = (dai::TFactor< dai::Real > *)new dai::TFactor< dai::Real >((dai::VarSet const &)*arg1,(dai::TProb< double > const &)*arg2);
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dai__TFactorT_double_t, 1 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static octave_value_list _wrap_new_Factor__SWIG_7 (const octave_value_list& args, int nargout) {
  std::vector< dai::Var,std::allocator< dai::Var > > *arg1 = 0 ;
  std::vector< double,std::allocator< double > > *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::TFactor< dai::Real > *result = 0 ;
  
  if (!SWIG_check_num_args("new_Factor",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1, SWIGTYPE_p_std__vectorT_dai__Var_std__allocatorT_dai__Var_t_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Factor" "', argument " "1"" of type '" "std::vector< dai::Var,std::allocator< dai::Var > > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Factor" "', argument " "1"" of type '" "std::vector< dai::Var,std::allocator< dai::Var > > const &""'"); 
  }
  arg1 = reinterpret_cast< std::vector< dai::Var,std::allocator< dai::Var > > * >(argp1);
  res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_Factor" "', argument " "2"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Factor" "', argument " "2"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< double,std::allocator< double > > * >(argp2);
  result = (dai::TFactor< dai::Real > *)new dai::TFactor< dai::Real >((std::vector< dai::Var,std::allocator< dai::Var > > const &)*arg1,(std::vector< double,std::allocator< double > > const &)*arg2);
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dai__TFactorT_double_t, 1 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( new_Factor, _wrap_new_Factor, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[2]={
    octave_value_ref(args,0),octave_value_ref(args,1)
  };
  
  if (argc == 0) {
    return _wrap_new_Factor__SWIG_1(args, nargout);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dai__Var, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Factor__SWIG_2(args, nargout);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dai__VarSet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Factor__SWIG_3(args, nargout);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_Factor__SWIG_0(args, nargout);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dai__VarSet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_double, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_Factor__SWIG_5(args, nargout);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dai__VarSet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_dai__TProbT_double_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_Factor__SWIG_6(args, nargout);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dai__VarSet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_Factor__SWIG_4(args, nargout);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_dai__Var_std__allocatorT_dai__Var_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_Factor__SWIG_7(args, nargout);
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


SWIG_DEFUN( Factor_set, _wrap_Factor_set, std::string() ) {
  dai::TFactor< dai::Real > *arg1 = (dai::TFactor< dai::Real > *) 0 ;
  size_t arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("Factor_set",args.length(),3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__TFactorT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Factor_set" "', argument " "1"" of type '" "dai::TFactor< dai::Real > *""'"); 
  }
  arg1 = reinterpret_cast< dai::TFactor< dai::Real > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Factor_set" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  ecode3 = SWIG_AsVal_double(args(2), &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Factor_set" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  (arg1)->set(arg2,arg3);
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( Factor_get, _wrap_Factor_get, std::string() ) {
  dai::TFactor< dai::Real > *arg1 = (dai::TFactor< dai::Real > *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  double result;
  
  if (!SWIG_check_num_args("Factor_get",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__TFactorT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Factor_get" "', argument " "1"" of type '" "dai::TFactor< dai::Real > const *""'"); 
  }
  arg1 = reinterpret_cast< dai::TFactor< dai::Real > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Factor_get" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  result = (double)((dai::TFactor< dai::Real > const *)arg1)->get(arg2);
  _outv = SWIG_From_double(static_cast< double >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static octave_value_list _wrap_Factor_p__SWIG_0 (const octave_value_list& args, int nargout) {
  dai::TFactor< dai::Real > *arg1 = (dai::TFactor< dai::Real > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::TProb< double > *result = 0 ;
  
  if (!SWIG_check_num_args("Factor_p",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__TFactorT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Factor_p" "', argument " "1"" of type '" "dai::TFactor< dai::Real > const *""'"); 
  }
  arg1 = reinterpret_cast< dai::TFactor< dai::Real > * >(argp1);
  result = (dai::TProb< double > *) &((dai::TFactor< dai::Real > const *)arg1)->p();
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dai__TProbT_double_t, 0 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static octave_value_list _wrap_Factor_p__SWIG_1 (const octave_value_list& args, int nargout) {
  dai::TFactor< dai::Real > *arg1 = (dai::TFactor< dai::Real > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::TProb< double > *result = 0 ;
  
  if (!SWIG_check_num_args("Factor_p",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__TFactorT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Factor_p" "', argument " "1"" of type '" "dai::TFactor< dai::Real > *""'"); 
  }
  arg1 = reinterpret_cast< dai::TFactor< dai::Real > * >(argp1);
  result = (dai::TProb< double > *) &(arg1)->p();
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dai__TProbT_double_t, 0 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( Factor_p, _wrap_Factor_p, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[1]={
    octave_value_ref(args,0)
  };
  
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dai__TFactorT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Factor_p__SWIG_1(args, nargout);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dai__TFactorT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Factor_p__SWIG_0(args, nargout);
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


static octave_value_list _wrap_Factor_vars__SWIG_0 (const octave_value_list& args, int nargout) {
  dai::TFactor< dai::Real > *arg1 = (dai::TFactor< dai::Real > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::VarSet *result = 0 ;
  
  if (!SWIG_check_num_args("Factor_vars",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__TFactorT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Factor_vars" "', argument " "1"" of type '" "dai::TFactor< dai::Real > const *""'"); 
  }
  arg1 = reinterpret_cast< dai::TFactor< dai::Real > * >(argp1);
  result = (dai::VarSet *) &((dai::TFactor< dai::Real > const *)arg1)->vars();
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dai__VarSet, 0 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static octave_value_list _wrap_Factor_vars__SWIG_1 (const octave_value_list& args, int nargout) {
  dai::TFactor< dai::Real > *arg1 = (dai::TFactor< dai::Real > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::VarSet *result = 0 ;
  
  if (!SWIG_check_num_args("Factor_vars",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__TFactorT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Factor_vars" "', argument " "1"" of type '" "dai::TFactor< dai::Real > *""'"); 
  }
  arg1 = reinterpret_cast< dai::TFactor< dai::Real > * >(argp1);
  result = (dai::VarSet *) &(arg1)->vars();
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dai__VarSet, 0 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( Factor_vars, _wrap_Factor_vars, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[1]={
    octave_value_ref(args,0)
  };
  
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dai__TFactorT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Factor_vars__SWIG_1(args, nargout);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dai__TFactorT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Factor_vars__SWIG_0(args, nargout);
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


SWIG_DEFUN( Factor_nrStates, _wrap_Factor_nrStates, std::string() ) {
  dai::TFactor< dai::Real > *arg1 = (dai::TFactor< dai::Real > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  size_t result;
  
  if (!SWIG_check_num_args("Factor_nrStates",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__TFactorT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Factor_nrStates" "', argument " "1"" of type '" "dai::TFactor< dai::Real > const *""'"); 
  }
  arg1 = reinterpret_cast< dai::TFactor< dai::Real > * >(argp1);
  result = ((dai::TFactor< dai::Real > const *)arg1)->nrStates();
  _outv = SWIG_From_size_t(static_cast< size_t >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( Factor_entropy, _wrap_Factor_entropy, std::string() ) {
  dai::TFactor< dai::Real > *arg1 = (dai::TFactor< dai::Real > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  double result;
  
  if (!SWIG_check_num_args("Factor_entropy",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__TFactorT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Factor_entropy" "', argument " "1"" of type '" "dai::TFactor< dai::Real > const *""'"); 
  }
  arg1 = reinterpret_cast< dai::TFactor< dai::Real > * >(argp1);
  result = (double)((dai::TFactor< dai::Real > const *)arg1)->entropy();
  _outv = SWIG_From_double(static_cast< double >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( Factor_max, _wrap_Factor_max, std::string() ) {
  dai::TFactor< dai::Real > *arg1 = (dai::TFactor< dai::Real > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  double result;
  
  if (!SWIG_check_num_args("Factor_max",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__TFactorT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Factor_max" "', argument " "1"" of type '" "dai::TFactor< dai::Real > const *""'"); 
  }
  arg1 = reinterpret_cast< dai::TFactor< dai::Real > * >(argp1);
  result = (double)((dai::TFactor< dai::Real > const *)arg1)->max();
  _outv = SWIG_From_double(static_cast< double >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( Factor_min, _wrap_Factor_min, std::string() ) {
  dai::TFactor< dai::Real > *arg1 = (dai::TFactor< dai::Real > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  double result;
  
  if (!SWIG_check_num_args("Factor_min",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__TFactorT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Factor_min" "', argument " "1"" of type '" "dai::TFactor< dai::Real > const *""'"); 
  }
  arg1 = reinterpret_cast< dai::TFactor< dai::Real > * >(argp1);
  result = (double)((dai::TFactor< dai::Real > const *)arg1)->min();
  _outv = SWIG_From_double(static_cast< double >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( Factor_sum, _wrap_Factor_sum, std::string() ) {
  dai::TFactor< dai::Real > *arg1 = (dai::TFactor< dai::Real > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  double result;
  
  if (!SWIG_check_num_args("Factor_sum",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__TFactorT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Factor_sum" "', argument " "1"" of type '" "dai::TFactor< dai::Real > const *""'"); 
  }
  arg1 = reinterpret_cast< dai::TFactor< dai::Real > * >(argp1);
  result = (double)((dai::TFactor< dai::Real > const *)arg1)->sum();
  _outv = SWIG_From_double(static_cast< double >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( Factor_sumAbs, _wrap_Factor_sumAbs, std::string() ) {
  dai::TFactor< dai::Real > *arg1 = (dai::TFactor< dai::Real > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  double result;
  
  if (!SWIG_check_num_args("Factor_sumAbs",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__TFactorT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Factor_sumAbs" "', argument " "1"" of type '" "dai::TFactor< dai::Real > const *""'"); 
  }
  arg1 = reinterpret_cast< dai::TFactor< dai::Real > * >(argp1);
  result = (double)((dai::TFactor< dai::Real > const *)arg1)->sumAbs();
  _outv = SWIG_From_double(static_cast< double >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( Factor_maxAbs, _wrap_Factor_maxAbs, std::string() ) {
  dai::TFactor< dai::Real > *arg1 = (dai::TFactor< dai::Real > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  double result;
  
  if (!SWIG_check_num_args("Factor_maxAbs",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__TFactorT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Factor_maxAbs" "', argument " "1"" of type '" "dai::TFactor< dai::Real > const *""'"); 
  }
  arg1 = reinterpret_cast< dai::TFactor< dai::Real > * >(argp1);
  result = (double)((dai::TFactor< dai::Real > const *)arg1)->maxAbs();
  _outv = SWIG_From_double(static_cast< double >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( Factor_hasNaNs, _wrap_Factor_hasNaNs, std::string() ) {
  dai::TFactor< dai::Real > *arg1 = (dai::TFactor< dai::Real > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  bool result;
  
  if (!SWIG_check_num_args("Factor_hasNaNs",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__TFactorT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Factor_hasNaNs" "', argument " "1"" of type '" "dai::TFactor< dai::Real > const *""'"); 
  }
  arg1 = reinterpret_cast< dai::TFactor< dai::Real > * >(argp1);
  result = (bool)((dai::TFactor< dai::Real > const *)arg1)->hasNaNs();
  _outv = SWIG_From_bool(static_cast< bool >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( Factor_hasNegatives, _wrap_Factor_hasNegatives, std::string() ) {
  dai::TFactor< dai::Real > *arg1 = (dai::TFactor< dai::Real > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  bool result;
  
  if (!SWIG_check_num_args("Factor_hasNegatives",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__TFactorT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Factor_hasNegatives" "', argument " "1"" of type '" "dai::TFactor< dai::Real > const *""'"); 
  }
  arg1 = reinterpret_cast< dai::TFactor< dai::Real > * >(argp1);
  result = (bool)((dai::TFactor< dai::Real > const *)arg1)->hasNegatives();
  _outv = SWIG_From_bool(static_cast< bool >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( Factor_strength, _wrap_Factor_strength, std::string() ) {
  dai::TFactor< dai::Real > *arg1 = (dai::TFactor< dai::Real > *) 0 ;
  dai::Var *arg2 = 0 ;
  dai::Var *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  double result;
  
  if (!SWIG_check_num_args("Factor_strength",args.length(),3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__TFactorT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Factor_strength" "', argument " "1"" of type '" "dai::TFactor< dai::Real > const *""'"); 
  }
  arg1 = reinterpret_cast< dai::TFactor< dai::Real > * >(argp1);
  res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_dai__Var,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Factor_strength" "', argument " "2"" of type '" "dai::Var const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Factor_strength" "', argument " "2"" of type '" "dai::Var const &""'"); 
  }
  arg2 = reinterpret_cast< dai::Var * >(argp2);
  res3 = SWIG_ConvertPtr(args(2), &argp3, SWIGTYPE_p_dai__Var,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Factor_strength" "', argument " "3"" of type '" "dai::Var const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Factor_strength" "', argument " "3"" of type '" "dai::Var const &""'"); 
  }
  arg3 = reinterpret_cast< dai::Var * >(argp3);
  result = (double)((dai::TFactor< dai::Real > const *)arg1)->strength((dai::Var const &)*arg2,(dai::Var const &)*arg3);
  _outv = SWIG_From_double(static_cast< double >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( Factor___eq__, _wrap_Factor___eq__, std::string() ) {
  dai::TFactor< dai::Real > *arg1 = (dai::TFactor< dai::Real > *) 0 ;
  dai::TFactor< double > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  bool result;
  
  if (!SWIG_check_num_args("Factor___eq__",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__TFactorT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Factor___eq__" "', argument " "1"" of type '" "dai::TFactor< dai::Real > const *""'"); 
  }
  arg1 = reinterpret_cast< dai::TFactor< dai::Real > * >(argp1);
  res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_dai__TFactorT_double_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Factor___eq__" "', argument " "2"" of type '" "dai::TFactor< double > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Factor___eq__" "', argument " "2"" of type '" "dai::TFactor< double > const &""'"); 
  }
  arg2 = reinterpret_cast< dai::TFactor< double > * >(argp2);
  result = (bool)((dai::TFactor< dai::Real > const *)arg1)->operator ==((dai::TFactor< double > const &)*arg2);
  _outv = SWIG_From_bool(static_cast< bool >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( Factor_toString, _wrap_Factor_toString, std::string() ) {
  dai::TFactor< dai::Real > *arg1 = (dai::TFactor< dai::Real > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  std::string result;
  
  if (!SWIG_check_num_args("Factor_toString",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__TFactorT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Factor_toString" "', argument " "1"" of type '" "dai::TFactor< dai::Real > const *""'"); 
  }
  arg1 = reinterpret_cast< dai::TFactor< dai::Real > * >(argp1);
  result = ((dai::TFactor< dai::Real > const *)arg1)->toString();
  _outv = SWIG_From_std_string(static_cast< std::string >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( Factor___uminus__, _wrap_Factor___uminus__, std::string() ) {
  dai::TFactor< dai::Real > *arg1 = (dai::TFactor< dai::Real > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::TFactor< double > result;
  
  if (!SWIG_check_num_args("Factor___uminus__",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__TFactorT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Factor___uminus__" "', argument " "1"" of type '" "dai::TFactor< dai::Real > const *""'"); 
  }
  arg1 = reinterpret_cast< dai::TFactor< dai::Real > * >(argp1);
  result = ((dai::TFactor< dai::Real > const *)arg1)->operator -();
  _outv = SWIG_NewPointerObj((new dai::TFactor< double >(static_cast< const dai::TFactor< double >& >(result))), SWIGTYPE_p_dai__TFactorT_double_t, SWIG_POINTER_OWN |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( Factor_abs, _wrap_Factor_abs, std::string() ) {
  dai::TFactor< dai::Real > *arg1 = (dai::TFactor< dai::Real > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::TFactor< double > result;
  
  if (!SWIG_check_num_args("Factor_abs",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__TFactorT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Factor_abs" "', argument " "1"" of type '" "dai::TFactor< dai::Real > const *""'"); 
  }
  arg1 = reinterpret_cast< dai::TFactor< dai::Real > * >(argp1);
  result = ((dai::TFactor< dai::Real > const *)arg1)->abs();
  _outv = SWIG_NewPointerObj((new dai::TFactor< double >(static_cast< const dai::TFactor< double >& >(result))), SWIGTYPE_p_dai__TFactorT_double_t, SWIG_POINTER_OWN |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( Factor_exp, _wrap_Factor_exp, std::string() ) {
  dai::TFactor< dai::Real > *arg1 = (dai::TFactor< dai::Real > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::TFactor< double > result;
  
  if (!SWIG_check_num_args("Factor_exp",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__TFactorT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Factor_exp" "', argument " "1"" of type '" "dai::TFactor< dai::Real > const *""'"); 
  }
  arg1 = reinterpret_cast< dai::TFactor< dai::Real > * >(argp1);
  result = ((dai::TFactor< dai::Real > const *)arg1)->exp();
  _outv = SWIG_NewPointerObj((new dai::TFactor< double >(static_cast< const dai::TFactor< double >& >(result))), SWIGTYPE_p_dai__TFactorT_double_t, SWIG_POINTER_OWN |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static octave_value_list _wrap_Factor_log__SWIG_0 (const octave_value_list& args, int nargout) {
  dai::TFactor< dai::Real > *arg1 = (dai::TFactor< dai::Real > *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::TFactor< double > result;
  
  if (!SWIG_check_num_args("Factor_log",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__TFactorT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Factor_log" "', argument " "1"" of type '" "dai::TFactor< dai::Real > const *""'"); 
  }
  arg1 = reinterpret_cast< dai::TFactor< dai::Real > * >(argp1);
  ecode2 = SWIG_AsVal_bool(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Factor_log" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  result = ((dai::TFactor< dai::Real > const *)arg1)->log(arg2);
  _outv = SWIG_NewPointerObj((new dai::TFactor< double >(static_cast< const dai::TFactor< double >& >(result))), SWIGTYPE_p_dai__TFactorT_double_t, SWIG_POINTER_OWN |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static octave_value_list _wrap_Factor_log__SWIG_1 (const octave_value_list& args, int nargout) {
  dai::TFactor< dai::Real > *arg1 = (dai::TFactor< dai::Real > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::TFactor< double > result;
  
  if (!SWIG_check_num_args("Factor_log",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__TFactorT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Factor_log" "', argument " "1"" of type '" "dai::TFactor< dai::Real > const *""'"); 
  }
  arg1 = reinterpret_cast< dai::TFactor< dai::Real > * >(argp1);
  result = ((dai::TFactor< dai::Real > const *)arg1)->log();
  _outv = SWIG_NewPointerObj((new dai::TFactor< double >(static_cast< const dai::TFactor< double >& >(result))), SWIGTYPE_p_dai__TFactorT_double_t, SWIG_POINTER_OWN |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( Factor_log, _wrap_Factor_log, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[2]={
    octave_value_ref(args,0),octave_value_ref(args,1)
  };
  
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dai__TFactorT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Factor_log__SWIG_1(args, nargout);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dai__TFactorT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Factor_log__SWIG_0(args, nargout);
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


static octave_value_list _wrap_Factor_inverse__SWIG_0 (const octave_value_list& args, int nargout) {
  dai::TFactor< dai::Real > *arg1 = (dai::TFactor< dai::Real > *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::TFactor< double > result;
  
  if (!SWIG_check_num_args("Factor_inverse",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__TFactorT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Factor_inverse" "', argument " "1"" of type '" "dai::TFactor< dai::Real > const *""'"); 
  }
  arg1 = reinterpret_cast< dai::TFactor< dai::Real > * >(argp1);
  ecode2 = SWIG_AsVal_bool(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Factor_inverse" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  result = ((dai::TFactor< dai::Real > const *)arg1)->inverse(arg2);
  _outv = SWIG_NewPointerObj((new dai::TFactor< double >(static_cast< const dai::TFactor< double >& >(result))), SWIGTYPE_p_dai__TFactorT_double_t, SWIG_POINTER_OWN |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static octave_value_list _wrap_Factor_inverse__SWIG_1 (const octave_value_list& args, int nargout) {
  dai::TFactor< dai::Real > *arg1 = (dai::TFactor< dai::Real > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::TFactor< double > result;
  
  if (!SWIG_check_num_args("Factor_inverse",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__TFactorT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Factor_inverse" "', argument " "1"" of type '" "dai::TFactor< dai::Real > const *""'"); 
  }
  arg1 = reinterpret_cast< dai::TFactor< dai::Real > * >(argp1);
  result = ((dai::TFactor< dai::Real > const *)arg1)->inverse();
  _outv = SWIG_NewPointerObj((new dai::TFactor< double >(static_cast< const dai::TFactor< double >& >(result))), SWIGTYPE_p_dai__TFactorT_double_t, SWIG_POINTER_OWN |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( Factor_inverse, _wrap_Factor_inverse, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[2]={
    octave_value_ref(args,0),octave_value_ref(args,1)
  };
  
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dai__TFactorT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Factor_inverse__SWIG_1(args, nargout);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dai__TFactorT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Factor_inverse__SWIG_0(args, nargout);
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


static octave_value_list _wrap_Factor_normalized__SWIG_0 (const octave_value_list& args, int nargout) {
  dai::TFactor< dai::Real > *arg1 = (dai::TFactor< dai::Real > *) 0 ;
  dai::ProbNormType arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::TFactor< double > result;
  
  if (!SWIG_check_num_args("Factor_normalized",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__TFactorT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Factor_normalized" "', argument " "1"" of type '" "dai::TFactor< dai::Real > const *""'"); 
  }
  arg1 = reinterpret_cast< dai::TFactor< dai::Real > * >(argp1);
  ecode2 = SWIG_AsVal_int(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Factor_normalized" "', argument " "2"" of type '" "dai::ProbNormType""'");
  } 
  arg2 = static_cast< dai::ProbNormType >(val2);
  result = ((dai::TFactor< dai::Real > const *)arg1)->normalized(arg2);
  _outv = SWIG_NewPointerObj((new dai::TFactor< double >(static_cast< const dai::TFactor< double >& >(result))), SWIGTYPE_p_dai__TFactorT_double_t, SWIG_POINTER_OWN |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static octave_value_list _wrap_Factor_normalized__SWIG_1 (const octave_value_list& args, int nargout) {
  dai::TFactor< dai::Real > *arg1 = (dai::TFactor< dai::Real > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::TFactor< double > result;
  
  if (!SWIG_check_num_args("Factor_normalized",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__TFactorT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Factor_normalized" "', argument " "1"" of type '" "dai::TFactor< dai::Real > const *""'"); 
  }
  arg1 = reinterpret_cast< dai::TFactor< dai::Real > * >(argp1);
  result = ((dai::TFactor< dai::Real > const *)arg1)->normalized();
  _outv = SWIG_NewPointerObj((new dai::TFactor< double >(static_cast< const dai::TFactor< double >& >(result))), SWIGTYPE_p_dai__TFactorT_double_t, SWIG_POINTER_OWN |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( Factor_normalized, _wrap_Factor_normalized, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[2]={
    octave_value_ref(args,0),octave_value_ref(args,1)
  };
  
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dai__TFactorT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Factor_normalized__SWIG_1(args, nargout);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dai__TFactorT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Factor_normalized__SWIG_0(args, nargout);
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


SWIG_DEFUN( Factor_randomize, _wrap_Factor_randomize, std::string() ) {
  dai::TFactor< dai::Real > *arg1 = (dai::TFactor< dai::Real > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::TFactor< double > *result = 0 ;
  
  if (!SWIG_check_num_args("Factor_randomize",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__TFactorT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Factor_randomize" "', argument " "1"" of type '" "dai::TFactor< dai::Real > *""'"); 
  }
  arg1 = reinterpret_cast< dai::TFactor< dai::Real > * >(argp1);
  result = (dai::TFactor< double > *) &(arg1)->randomize();
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dai__TFactorT_double_t, 0 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( Factor_setUniform, _wrap_Factor_setUniform, std::string() ) {
  dai::TFactor< dai::Real > *arg1 = (dai::TFactor< dai::Real > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::TFactor< double > *result = 0 ;
  
  if (!SWIG_check_num_args("Factor_setUniform",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__TFactorT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Factor_setUniform" "', argument " "1"" of type '" "dai::TFactor< dai::Real > *""'"); 
  }
  arg1 = reinterpret_cast< dai::TFactor< dai::Real > * >(argp1);
  result = (dai::TFactor< double > *) &(arg1)->setUniform();
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dai__TFactorT_double_t, 0 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( Factor_takeAbs, _wrap_Factor_takeAbs, std::string() ) {
  dai::TFactor< dai::Real > *arg1 = (dai::TFactor< dai::Real > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::TFactor< double > *result = 0 ;
  
  if (!SWIG_check_num_args("Factor_takeAbs",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__TFactorT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Factor_takeAbs" "', argument " "1"" of type '" "dai::TFactor< dai::Real > *""'"); 
  }
  arg1 = reinterpret_cast< dai::TFactor< dai::Real > * >(argp1);
  result = (dai::TFactor< double > *) &(arg1)->takeAbs();
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dai__TFactorT_double_t, 0 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( Factor_takeExp, _wrap_Factor_takeExp, std::string() ) {
  dai::TFactor< dai::Real > *arg1 = (dai::TFactor< dai::Real > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::TFactor< double > *result = 0 ;
  
  if (!SWIG_check_num_args("Factor_takeExp",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__TFactorT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Factor_takeExp" "', argument " "1"" of type '" "dai::TFactor< dai::Real > *""'"); 
  }
  arg1 = reinterpret_cast< dai::TFactor< dai::Real > * >(argp1);
  result = (dai::TFactor< double > *) &(arg1)->takeExp();
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dai__TFactorT_double_t, 0 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static octave_value_list _wrap_Factor_takeLog__SWIG_0 (const octave_value_list& args, int nargout) {
  dai::TFactor< dai::Real > *arg1 = (dai::TFactor< dai::Real > *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::TFactor< double > *result = 0 ;
  
  if (!SWIG_check_num_args("Factor_takeLog",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__TFactorT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Factor_takeLog" "', argument " "1"" of type '" "dai::TFactor< dai::Real > *""'"); 
  }
  arg1 = reinterpret_cast< dai::TFactor< dai::Real > * >(argp1);
  ecode2 = SWIG_AsVal_bool(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Factor_takeLog" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  result = (dai::TFactor< double > *) &(arg1)->takeLog(arg2);
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dai__TFactorT_double_t, 0 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static octave_value_list _wrap_Factor_takeLog__SWIG_1 (const octave_value_list& args, int nargout) {
  dai::TFactor< dai::Real > *arg1 = (dai::TFactor< dai::Real > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::TFactor< double > *result = 0 ;
  
  if (!SWIG_check_num_args("Factor_takeLog",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__TFactorT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Factor_takeLog" "', argument " "1"" of type '" "dai::TFactor< dai::Real > *""'"); 
  }
  arg1 = reinterpret_cast< dai::TFactor< dai::Real > * >(argp1);
  result = (dai::TFactor< double > *) &(arg1)->takeLog();
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dai__TFactorT_double_t, 0 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( Factor_takeLog, _wrap_Factor_takeLog, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[2]={
    octave_value_ref(args,0),octave_value_ref(args,1)
  };
  
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dai__TFactorT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Factor_takeLog__SWIG_1(args, nargout);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dai__TFactorT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Factor_takeLog__SWIG_0(args, nargout);
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


static octave_value_list _wrap_Factor_normalize__SWIG_0 (const octave_value_list& args, int nargout) {
  dai::TFactor< dai::Real > *arg1 = (dai::TFactor< dai::Real > *) 0 ;
  dai::ProbNormType arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  double result;
  
  if (!SWIG_check_num_args("Factor_normalize",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__TFactorT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Factor_normalize" "', argument " "1"" of type '" "dai::TFactor< dai::Real > *""'"); 
  }
  arg1 = reinterpret_cast< dai::TFactor< dai::Real > * >(argp1);
  ecode2 = SWIG_AsVal_int(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Factor_normalize" "', argument " "2"" of type '" "dai::ProbNormType""'");
  } 
  arg2 = static_cast< dai::ProbNormType >(val2);
  result = (double)(arg1)->normalize(arg2);
  _outv = SWIG_From_double(static_cast< double >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static octave_value_list _wrap_Factor_normalize__SWIG_1 (const octave_value_list& args, int nargout) {
  dai::TFactor< dai::Real > *arg1 = (dai::TFactor< dai::Real > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  double result;
  
  if (!SWIG_check_num_args("Factor_normalize",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__TFactorT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Factor_normalize" "', argument " "1"" of type '" "dai::TFactor< dai::Real > *""'"); 
  }
  arg1 = reinterpret_cast< dai::TFactor< dai::Real > * >(argp1);
  result = (double)(arg1)->normalize();
  _outv = SWIG_From_double(static_cast< double >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( Factor_normalize, _wrap_Factor_normalize, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[2]={
    octave_value_ref(args,0),octave_value_ref(args,1)
  };
  
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dai__TFactorT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Factor_normalize__SWIG_1(args, nargout);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dai__TFactorT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Factor_normalize__SWIG_0(args, nargout);
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


SWIG_DEFUN( Factor_fill, _wrap_Factor_fill, std::string() ) {
  dai::TFactor< dai::Real > *arg1 = (dai::TFactor< dai::Real > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::TFactor< double > *result = 0 ;
  
  if (!SWIG_check_num_args("Factor_fill",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__TFactorT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Factor_fill" "', argument " "1"" of type '" "dai::TFactor< dai::Real > *""'"); 
  }
  arg1 = reinterpret_cast< dai::TFactor< dai::Real > * >(argp1);
  ecode2 = SWIG_AsVal_double(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Factor_fill" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  result = (dai::TFactor< double > *) &(arg1)->fill(arg2);
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dai__TFactorT_double_t, 0 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static octave_value_list _wrap_Factor___add____SWIG_0 (const octave_value_list& args, int nargout) {
  dai::TFactor< dai::Real > *arg1 = (dai::TFactor< dai::Real > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::TFactor< double > result;
  
  if (!SWIG_check_num_args("Factor___add__",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__TFactorT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Factor___add__" "', argument " "1"" of type '" "dai::TFactor< dai::Real > const *""'"); 
  }
  arg1 = reinterpret_cast< dai::TFactor< dai::Real > * >(argp1);
  ecode2 = SWIG_AsVal_double(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Factor___add__" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  result = ((dai::TFactor< dai::Real > const *)arg1)->operator +(arg2);
  _outv = SWIG_NewPointerObj((new dai::TFactor< double >(static_cast< const dai::TFactor< double >& >(result))), SWIGTYPE_p_dai__TFactorT_double_t, SWIG_POINTER_OWN |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static octave_value_list _wrap_Factor___sub____SWIG_0 (const octave_value_list& args, int nargout) {
  dai::TFactor< dai::Real > *arg1 = (dai::TFactor< dai::Real > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::TFactor< double > result;
  
  if (!SWIG_check_num_args("Factor___sub__",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__TFactorT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Factor___sub__" "', argument " "1"" of type '" "dai::TFactor< dai::Real > const *""'"); 
  }
  arg1 = reinterpret_cast< dai::TFactor< dai::Real > * >(argp1);
  ecode2 = SWIG_AsVal_double(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Factor___sub__" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  result = ((dai::TFactor< dai::Real > const *)arg1)->operator -(arg2);
  _outv = SWIG_NewPointerObj((new dai::TFactor< double >(static_cast< const dai::TFactor< double >& >(result))), SWIGTYPE_p_dai__TFactorT_double_t, SWIG_POINTER_OWN |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static octave_value_list _wrap_Factor___mul____SWIG_0 (const octave_value_list& args, int nargout) {
  dai::TFactor< dai::Real > *arg1 = (dai::TFactor< dai::Real > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::TFactor< double > result;
  
  if (!SWIG_check_num_args("Factor___mul__",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__TFactorT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Factor___mul__" "', argument " "1"" of type '" "dai::TFactor< dai::Real > const *""'"); 
  }
  arg1 = reinterpret_cast< dai::TFactor< dai::Real > * >(argp1);
  ecode2 = SWIG_AsVal_double(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Factor___mul__" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  result = ((dai::TFactor< dai::Real > const *)arg1)->operator *(arg2);
  _outv = SWIG_NewPointerObj((new dai::TFactor< double >(static_cast< const dai::TFactor< double >& >(result))), SWIGTYPE_p_dai__TFactorT_double_t, SWIG_POINTER_OWN |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static octave_value_list _wrap_Factor___div____SWIG_0 (const octave_value_list& args, int nargout) {
  dai::TFactor< dai::Real > *arg1 = (dai::TFactor< dai::Real > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::TFactor< double > result;
  
  if (!SWIG_check_num_args("Factor___div__",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__TFactorT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Factor___div__" "', argument " "1"" of type '" "dai::TFactor< dai::Real > const *""'"); 
  }
  arg1 = reinterpret_cast< dai::TFactor< dai::Real > * >(argp1);
  ecode2 = SWIG_AsVal_double(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Factor___div__" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  result = ((dai::TFactor< dai::Real > const *)arg1)->operator /(arg2);
  _outv = SWIG_NewPointerObj((new dai::TFactor< double >(static_cast< const dai::TFactor< double >& >(result))), SWIGTYPE_p_dai__TFactorT_double_t, SWIG_POINTER_OWN |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( Factor___xor__, _wrap_Factor___xor__, std::string() ) {
  dai::TFactor< dai::Real > *arg1 = (dai::TFactor< dai::Real > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::TFactor< double > result;
  
  if (!SWIG_check_num_args("Factor___xor__",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__TFactorT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Factor___xor__" "', argument " "1"" of type '" "dai::TFactor< dai::Real > const *""'"); 
  }
  arg1 = reinterpret_cast< dai::TFactor< dai::Real > * >(argp1);
  ecode2 = SWIG_AsVal_double(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Factor___xor__" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  result = ((dai::TFactor< dai::Real > const *)arg1)->operator ^(arg2);
  _outv = SWIG_NewPointerObj((new dai::TFactor< double >(static_cast< const dai::TFactor< double >& >(result))), SWIGTYPE_p_dai__TFactorT_double_t, SWIG_POINTER_OWN |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static octave_value_list _wrap_Factor___add____SWIG_1 (const octave_value_list& args, int nargout) {
  dai::TFactor< dai::Real > *arg1 = (dai::TFactor< dai::Real > *) 0 ;
  dai::TFactor< double > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::TFactor< double > result;
  
  if (!SWIG_check_num_args("Factor___add__",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__TFactorT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Factor___add__" "', argument " "1"" of type '" "dai::TFactor< dai::Real > const *""'"); 
  }
  arg1 = reinterpret_cast< dai::TFactor< dai::Real > * >(argp1);
  res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_dai__TFactorT_double_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Factor___add__" "', argument " "2"" of type '" "dai::TFactor< double > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Factor___add__" "', argument " "2"" of type '" "dai::TFactor< double > const &""'"); 
  }
  arg2 = reinterpret_cast< dai::TFactor< double > * >(argp2);
  result = ((dai::TFactor< dai::Real > const *)arg1)->operator +((dai::TFactor< double > const &)*arg2);
  _outv = SWIG_NewPointerObj((new dai::TFactor< double >(static_cast< const dai::TFactor< double >& >(result))), SWIGTYPE_p_dai__TFactorT_double_t, SWIG_POINTER_OWN |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( Factor___add__, _wrap_Factor___add__, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[2]={
    octave_value_ref(args,0),octave_value_ref(args,1)
  };
  
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dai__TFactorT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_dai__TFactorT_double_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Factor___add____SWIG_1(args, nargout);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dai__TFactorT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Factor___add____SWIG_0(args, nargout);
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


static octave_value_list _wrap_Factor___sub____SWIG_1 (const octave_value_list& args, int nargout) {
  dai::TFactor< dai::Real > *arg1 = (dai::TFactor< dai::Real > *) 0 ;
  dai::TFactor< double > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::TFactor< double > result;
  
  if (!SWIG_check_num_args("Factor___sub__",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__TFactorT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Factor___sub__" "', argument " "1"" of type '" "dai::TFactor< dai::Real > const *""'"); 
  }
  arg1 = reinterpret_cast< dai::TFactor< dai::Real > * >(argp1);
  res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_dai__TFactorT_double_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Factor___sub__" "', argument " "2"" of type '" "dai::TFactor< double > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Factor___sub__" "', argument " "2"" of type '" "dai::TFactor< double > const &""'"); 
  }
  arg2 = reinterpret_cast< dai::TFactor< double > * >(argp2);
  result = ((dai::TFactor< dai::Real > const *)arg1)->operator -((dai::TFactor< double > const &)*arg2);
  _outv = SWIG_NewPointerObj((new dai::TFactor< double >(static_cast< const dai::TFactor< double >& >(result))), SWIGTYPE_p_dai__TFactorT_double_t, SWIG_POINTER_OWN |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( Factor___sub__, _wrap_Factor___sub__, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[2]={
    octave_value_ref(args,0),octave_value_ref(args,1)
  };
  
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dai__TFactorT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_dai__TFactorT_double_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Factor___sub____SWIG_1(args, nargout);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dai__TFactorT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Factor___sub____SWIG_0(args, nargout);
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


static octave_value_list _wrap_Factor___mul____SWIG_1 (const octave_value_list& args, int nargout) {
  dai::TFactor< dai::Real > *arg1 = (dai::TFactor< dai::Real > *) 0 ;
  dai::TFactor< double > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::TFactor< double > result;
  
  if (!SWIG_check_num_args("Factor___mul__",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__TFactorT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Factor___mul__" "', argument " "1"" of type '" "dai::TFactor< dai::Real > const *""'"); 
  }
  arg1 = reinterpret_cast< dai::TFactor< dai::Real > * >(argp1);
  res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_dai__TFactorT_double_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Factor___mul__" "', argument " "2"" of type '" "dai::TFactor< double > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Factor___mul__" "', argument " "2"" of type '" "dai::TFactor< double > const &""'"); 
  }
  arg2 = reinterpret_cast< dai::TFactor< double > * >(argp2);
  result = ((dai::TFactor< dai::Real > const *)arg1)->operator *((dai::TFactor< double > const &)*arg2);
  _outv = SWIG_NewPointerObj((new dai::TFactor< double >(static_cast< const dai::TFactor< double >& >(result))), SWIGTYPE_p_dai__TFactorT_double_t, SWIG_POINTER_OWN |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( Factor___mul__, _wrap_Factor___mul__, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[2]={
    octave_value_ref(args,0),octave_value_ref(args,1)
  };
  
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dai__TFactorT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_dai__TFactorT_double_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Factor___mul____SWIG_1(args, nargout);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dai__TFactorT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Factor___mul____SWIG_0(args, nargout);
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


static octave_value_list _wrap_Factor___div____SWIG_1 (const octave_value_list& args, int nargout) {
  dai::TFactor< dai::Real > *arg1 = (dai::TFactor< dai::Real > *) 0 ;
  dai::TFactor< double > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::TFactor< double > result;
  
  if (!SWIG_check_num_args("Factor___div__",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__TFactorT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Factor___div__" "', argument " "1"" of type '" "dai::TFactor< dai::Real > const *""'"); 
  }
  arg1 = reinterpret_cast< dai::TFactor< dai::Real > * >(argp1);
  res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_dai__TFactorT_double_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Factor___div__" "', argument " "2"" of type '" "dai::TFactor< double > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Factor___div__" "', argument " "2"" of type '" "dai::TFactor< double > const &""'"); 
  }
  arg2 = reinterpret_cast< dai::TFactor< double > * >(argp2);
  result = ((dai::TFactor< dai::Real > const *)arg1)->operator /((dai::TFactor< double > const &)*arg2);
  _outv = SWIG_NewPointerObj((new dai::TFactor< double >(static_cast< const dai::TFactor< double >& >(result))), SWIGTYPE_p_dai__TFactorT_double_t, SWIG_POINTER_OWN |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( Factor___div__, _wrap_Factor___div__, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[2]={
    octave_value_ref(args,0),octave_value_ref(args,1)
  };
  
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dai__TFactorT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_dai__TFactorT_double_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Factor___div____SWIG_1(args, nargout);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dai__TFactorT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Factor___div____SWIG_0(args, nargout);
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


SWIG_DEFUN( Factor_slice, _wrap_Factor_slice, std::string() ) {
  dai::TFactor< dai::Real > *arg1 = (dai::TFactor< dai::Real > *) 0 ;
  dai::VarSet *arg2 = 0 ;
  size_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::TFactor< double > result;
  
  if (!SWIG_check_num_args("Factor_slice",args.length(),3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__TFactorT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Factor_slice" "', argument " "1"" of type '" "dai::TFactor< dai::Real > const *""'"); 
  }
  arg1 = reinterpret_cast< dai::TFactor< dai::Real > * >(argp1);
  res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_dai__VarSet,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Factor_slice" "', argument " "2"" of type '" "dai::VarSet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Factor_slice" "', argument " "2"" of type '" "dai::VarSet const &""'"); 
  }
  arg2 = reinterpret_cast< dai::VarSet * >(argp2);
  ecode3 = SWIG_AsVal_size_t(args(2), &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Factor_slice" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  result = ((dai::TFactor< dai::Real > const *)arg1)->slice((dai::VarSet const &)*arg2,arg3);
  _outv = SWIG_NewPointerObj((new dai::TFactor< double >(static_cast< const dai::TFactor< double >& >(result))), SWIGTYPE_p_dai__TFactorT_double_t, SWIG_POINTER_OWN |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( Factor_embed, _wrap_Factor_embed, std::string() ) {
  dai::TFactor< dai::Real > *arg1 = (dai::TFactor< dai::Real > *) 0 ;
  dai::VarSet *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::TFactor< double > result;
  
  if (!SWIG_check_num_args("Factor_embed",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__TFactorT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Factor_embed" "', argument " "1"" of type '" "dai::TFactor< dai::Real > const *""'"); 
  }
  arg1 = reinterpret_cast< dai::TFactor< dai::Real > * >(argp1);
  res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_dai__VarSet,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Factor_embed" "', argument " "2"" of type '" "dai::VarSet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Factor_embed" "', argument " "2"" of type '" "dai::VarSet const &""'"); 
  }
  arg2 = reinterpret_cast< dai::VarSet * >(argp2);
  result = ((dai::TFactor< dai::Real > const *)arg1)->embed((dai::VarSet const &)*arg2);
  _outv = SWIG_NewPointerObj((new dai::TFactor< double >(static_cast< const dai::TFactor< double >& >(result))), SWIGTYPE_p_dai__TFactorT_double_t, SWIG_POINTER_OWN |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static octave_value_list _wrap_Factor_marginal__SWIG_0 (const octave_value_list& args, int nargout) {
  dai::TFactor< dai::Real > *arg1 = (dai::TFactor< dai::Real > *) 0 ;
  dai::VarSet *arg2 = 0 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::TFactor< double > result;
  
  if (!SWIG_check_num_args("Factor_marginal",args.length(),3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__TFactorT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Factor_marginal" "', argument " "1"" of type '" "dai::TFactor< dai::Real > const *""'"); 
  }
  arg1 = reinterpret_cast< dai::TFactor< dai::Real > * >(argp1);
  res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_dai__VarSet,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Factor_marginal" "', argument " "2"" of type '" "dai::VarSet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Factor_marginal" "', argument " "2"" of type '" "dai::VarSet const &""'"); 
  }
  arg2 = reinterpret_cast< dai::VarSet * >(argp2);
  ecode3 = SWIG_AsVal_bool(args(2), &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Factor_marginal" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  result = ((dai::TFactor< dai::Real > const *)arg1)->marginal((dai::VarSet const &)*arg2,arg3);
  _outv = SWIG_NewPointerObj((new dai::TFactor< double >(static_cast< const dai::TFactor< double >& >(result))), SWIGTYPE_p_dai__TFactorT_double_t, SWIG_POINTER_OWN |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static octave_value_list _wrap_Factor_marginal__SWIG_1 (const octave_value_list& args, int nargout) {
  dai::TFactor< dai::Real > *arg1 = (dai::TFactor< dai::Real > *) 0 ;
  dai::VarSet *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::TFactor< double > result;
  
  if (!SWIG_check_num_args("Factor_marginal",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__TFactorT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Factor_marginal" "', argument " "1"" of type '" "dai::TFactor< dai::Real > const *""'"); 
  }
  arg1 = reinterpret_cast< dai::TFactor< dai::Real > * >(argp1);
  res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_dai__VarSet,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Factor_marginal" "', argument " "2"" of type '" "dai::VarSet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Factor_marginal" "', argument " "2"" of type '" "dai::VarSet const &""'"); 
  }
  arg2 = reinterpret_cast< dai::VarSet * >(argp2);
  result = ((dai::TFactor< dai::Real > const *)arg1)->marginal((dai::VarSet const &)*arg2);
  _outv = SWIG_NewPointerObj((new dai::TFactor< double >(static_cast< const dai::TFactor< double >& >(result))), SWIGTYPE_p_dai__TFactorT_double_t, SWIG_POINTER_OWN |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( Factor_marginal, _wrap_Factor_marginal, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[3]={
    octave_value_ref(args,0),octave_value_ref(args,1),octave_value_ref(args,2)
  };
  
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dai__TFactorT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_dai__VarSet, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Factor_marginal__SWIG_1(args, nargout);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dai__TFactorT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_dai__VarSet, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Factor_marginal__SWIG_0(args, nargout);
        }
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


static octave_value_list _wrap_Factor_maxMarginal__SWIG_0 (const octave_value_list& args, int nargout) {
  dai::TFactor< dai::Real > *arg1 = (dai::TFactor< dai::Real > *) 0 ;
  dai::VarSet *arg2 = 0 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::TFactor< double > result;
  
  if (!SWIG_check_num_args("Factor_maxMarginal",args.length(),3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__TFactorT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Factor_maxMarginal" "', argument " "1"" of type '" "dai::TFactor< dai::Real > const *""'"); 
  }
  arg1 = reinterpret_cast< dai::TFactor< dai::Real > * >(argp1);
  res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_dai__VarSet,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Factor_maxMarginal" "', argument " "2"" of type '" "dai::VarSet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Factor_maxMarginal" "', argument " "2"" of type '" "dai::VarSet const &""'"); 
  }
  arg2 = reinterpret_cast< dai::VarSet * >(argp2);
  ecode3 = SWIG_AsVal_bool(args(2), &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Factor_maxMarginal" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  result = ((dai::TFactor< dai::Real > const *)arg1)->maxMarginal((dai::VarSet const &)*arg2,arg3);
  _outv = SWIG_NewPointerObj((new dai::TFactor< double >(static_cast< const dai::TFactor< double >& >(result))), SWIGTYPE_p_dai__TFactorT_double_t, SWIG_POINTER_OWN |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static octave_value_list _wrap_Factor_maxMarginal__SWIG_1 (const octave_value_list& args, int nargout) {
  dai::TFactor< dai::Real > *arg1 = (dai::TFactor< dai::Real > *) 0 ;
  dai::VarSet *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::TFactor< double > result;
  
  if (!SWIG_check_num_args("Factor_maxMarginal",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__TFactorT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Factor_maxMarginal" "', argument " "1"" of type '" "dai::TFactor< dai::Real > const *""'"); 
  }
  arg1 = reinterpret_cast< dai::TFactor< dai::Real > * >(argp1);
  res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_dai__VarSet,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Factor_maxMarginal" "', argument " "2"" of type '" "dai::VarSet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Factor_maxMarginal" "', argument " "2"" of type '" "dai::VarSet const &""'"); 
  }
  arg2 = reinterpret_cast< dai::VarSet * >(argp2);
  result = ((dai::TFactor< dai::Real > const *)arg1)->maxMarginal((dai::VarSet const &)*arg2);
  _outv = SWIG_NewPointerObj((new dai::TFactor< double >(static_cast< const dai::TFactor< double >& >(result))), SWIGTYPE_p_dai__TFactorT_double_t, SWIG_POINTER_OWN |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( Factor_maxMarginal, _wrap_Factor_maxMarginal, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[3]={
    octave_value_ref(args,0),octave_value_ref(args,1),octave_value_ref(args,2)
  };
  
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dai__TFactorT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_dai__VarSet, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Factor_maxMarginal__SWIG_1(args, nargout);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dai__TFactorT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_dai__VarSet, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Factor_maxMarginal__SWIG_0(args, nargout);
        }
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


SWIG_DEFUN( Factor___getitem__, _wrap_Factor___getitem__, std::string() ) {
  dai::TFactor< dai::Real > *arg1 = (dai::TFactor< dai::Real > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::Real result;
  
  if (!SWIG_check_num_args("Factor___getitem__",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__TFactorT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Factor___getitem__" "', argument " "1"" of type '" "dai::TFactor< dai::Real > const *""'"); 
  }
  arg1 = reinterpret_cast< dai::TFactor< dai::Real > * >(argp1);
  ecode2 = SWIG_AsVal_int(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Factor___getitem__" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (dai::Real)dai_TFactor_Sl_dai_Real_Sg____getitem__((dai::TFactor< double > const *)arg1,arg2);
  _outv = SWIG_From_double(static_cast< double >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( Factor___setitem__, _wrap_Factor___setitem__, std::string() ) {
  dai::TFactor< dai::Real > *arg1 = (dai::TFactor< dai::Real > *) 0 ;
  int arg2 ;
  dai::Real arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("Factor___setitem__",args.length(),3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__TFactorT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Factor___setitem__" "', argument " "1"" of type '" "dai::TFactor< dai::Real > *""'"); 
  }
  arg1 = reinterpret_cast< dai::TFactor< dai::Real > * >(argp1);
  ecode2 = SWIG_AsVal_int(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Factor___setitem__" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_double(args(2), &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Factor___setitem__" "', argument " "3"" of type '" "dai::Real""'");
  } 
  arg3 = static_cast< dai::Real >(val3);
  dai_TFactor_Sl_dai_Real_Sg____setitem__(arg1,arg2,arg3);
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( Factor___paren__, _wrap_Factor___paren__, std::string() ) {
  dai::TFactor< dai::Real > *arg1 = (dai::TFactor< dai::Real > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::Real result;
  
  if (!SWIG_check_num_args("Factor___paren__",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__TFactorT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Factor___paren__" "', argument " "1"" of type '" "dai::TFactor< dai::Real > const *""'"); 
  }
  arg1 = reinterpret_cast< dai::TFactor< dai::Real > * >(argp1);
  ecode2 = SWIG_AsVal_int(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Factor___paren__" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (dai::Real)dai_TFactor_Sl_dai_Real_Sg____paren__((dai::TFactor< double > const *)arg1,arg2);
  _outv = SWIG_From_double(static_cast< double >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( Factor___paren_asgn__, _wrap_Factor___paren_asgn__, std::string() ) {
  dai::TFactor< dai::Real > *arg1 = (dai::TFactor< dai::Real > *) 0 ;
  int arg2 ;
  dai::Real arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("Factor___paren_asgn__",args.length(),3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__TFactorT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Factor___paren_asgn__" "', argument " "1"" of type '" "dai::TFactor< dai::Real > *""'"); 
  }
  arg1 = reinterpret_cast< dai::TFactor< dai::Real > * >(argp1);
  ecode2 = SWIG_AsVal_int(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Factor___paren_asgn__" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_double(args(2), &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Factor___paren_asgn__" "', argument " "3"" of type '" "dai::Real""'");
  } 
  arg3 = static_cast< dai::Real >(val3);
  dai_TFactor_Sl_dai_Real_Sg____paren_asgn__(arg1,arg2,arg3);
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( Factor___str__, _wrap_Factor___str__, std::string() ) {
  dai::TFactor< dai::Real > *arg1 = (dai::TFactor< dai::Real > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  char *result = 0 ;
  
  if (!SWIG_check_num_args("Factor___str__",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__TFactorT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Factor___str__" "', argument " "1"" of type '" "dai::TFactor< dai::Real > const *""'"); 
  }
  arg1 = reinterpret_cast< dai::TFactor< dai::Real > * >(argp1);
  result = (char *)dai_TFactor_Sl_dai_Real_Sg____str__((dai::TFactor< double > const *)arg1);
  _outv = SWIG_FromCharPtr((const char *)result);
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( Factor___str, _wrap_Factor___str, std::string() ) {
  dai::TFactor< dai::Real > *arg1 = (dai::TFactor< dai::Real > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  std::string result;
  
  if (!SWIG_check_num_args("Factor___str",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__TFactorT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Factor___str" "', argument " "1"" of type '" "dai::TFactor< dai::Real > const *""'"); 
  }
  arg1 = reinterpret_cast< dai::TFactor< dai::Real > * >(argp1);
  result = dai_TFactor_Sl_dai_Real_Sg____str((dai::TFactor< double > const *)arg1);
  _outv = SWIG_From_std_string(static_cast< std::string >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( delete_Factor, _wrap_delete_Factor, std::string() ) {
  dai::TFactor< dai::Real > *arg1 = (dai::TFactor< dai::Real > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("delete_Factor",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__TFactorT_double_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Factor" "', argument " "1"" of type '" "dai::TFactor< dai::Real > *""'"); 
  }
  arg1 = reinterpret_cast< dai::TFactor< dai::Real > * >(argp1);
  delete arg1;
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static swig_octave_member swig_Factor_members[] = {
{"set",_wrap_Factor_set,0,0,0,0},
{"get",_wrap_Factor_get,0,0,0,0},
{"p",_wrap_Factor_p,0,0,0,0},
{"vars",_wrap_Factor_vars,0,0,0,0},
{"nrStates",_wrap_Factor_nrStates,0,0,0,0},
{"entropy",_wrap_Factor_entropy,0,0,0,0},
{"max",_wrap_Factor_max,0,0,0,0},
{"min",_wrap_Factor_min,0,0,0,0},
{"sum",_wrap_Factor_sum,0,0,0,0},
{"sumAbs",_wrap_Factor_sumAbs,0,0,0,0},
{"maxAbs",_wrap_Factor_maxAbs,0,0,0,0},
{"hasNaNs",_wrap_Factor_hasNaNs,0,0,0,0},
{"hasNegatives",_wrap_Factor_hasNegatives,0,0,0,0},
{"strength",_wrap_Factor_strength,0,0,0,0},
{"__eq__",_wrap_Factor___eq__,0,0,0,0},
{"toString",_wrap_Factor_toString,0,0,0,0},
{"__uminus__",_wrap_Factor___uminus__,0,0,0,0},
{"abs",_wrap_Factor_abs,0,0,0,0},
{"exp",_wrap_Factor_exp,0,0,0,0},
{"log",_wrap_Factor_log,0,0,0,0},
{"inverse",_wrap_Factor_inverse,0,0,0,0},
{"normalized",_wrap_Factor_normalized,0,0,0,0},
{"randomize",_wrap_Factor_randomize,0,0,0,0},
{"setUniform",_wrap_Factor_setUniform,0,0,0,0},
{"takeAbs",_wrap_Factor_takeAbs,0,0,0,0},
{"takeExp",_wrap_Factor_takeExp,0,0,0,0},
{"takeLog",_wrap_Factor_takeLog,0,0,0,0},
{"normalize",_wrap_Factor_normalize,0,0,0,0},
{"fill",_wrap_Factor_fill,0,0,0,0},
{"__xor__",_wrap_Factor___xor__,0,0,0,0},
{"__add__",_wrap_Factor___add__,0,0,0,0},
{"__sub__",_wrap_Factor___sub__,0,0,0,0},
{"__mul__",_wrap_Factor___mul__,0,0,0,0},
{"__div__",_wrap_Factor___div__,0,0,0,0},
{"slice",_wrap_Factor_slice,0,0,0,0},
{"embed",_wrap_Factor_embed,0,0,0,0},
{"marginal",_wrap_Factor_marginal,0,0,0,0},
{"maxMarginal",_wrap_Factor_maxMarginal,0,0,0,0},
{"__getitem__",_wrap_Factor___getitem__,0,0,0,0},
{"__setitem__",_wrap_Factor___setitem__,0,0,0,0},
{"__paren__",_wrap_Factor___paren__,0,0,0,0},
{"__paren_asgn__",_wrap_Factor___paren_asgn__,0,0,0,0},
{"__str__",_wrap_Factor___str__,0,0,0,0},
{"__str",_wrap_Factor___str,0,0,0,0},
{0,0,0,0,0,0}
};
static const char *swig_Factor_base_names[] = {0};
static const swig_type_info *swig_Factor_base[] = {0};
static swig_octave_class _wrap_class_Factor = {"Factor", &SWIGTYPE_p_dai__TFactorT_double_t,0,_wrap_new_Factor,0,_wrap_delete_Factor,swig_Factor_members,swig_Factor_base_names,swig_Factor_base };

SWIG_DEFUN( VecFactor_pop, _wrap_VecFactor_pop, std::string() ) {
  std::vector< dai::Factor > *arg1 = (std::vector< dai::Factor > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  std::vector< dai::TFactor< double > >::value_type result;
  
  if (!SWIG_check_num_args("VecFactor_pop",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_std__vectorT_dai__TFactorT_dai__Real_t_std__allocatorT_dai__TFactorT_dai__Real_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecFactor_pop" "', argument " "1"" of type '" "std::vector< dai::Factor > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< dai::Factor > * >(argp1);
  try {
    result = std_vector_Sl_dai_Factor_Sg__pop(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  _outv = SWIG_NewPointerObj((new std::vector< dai::TFactor< double > >::value_type(static_cast< const std::vector< dai::TFactor< double > >::value_type& >(result))), SWIGTYPE_p_dai__TFactorT_double_t, SWIG_POINTER_OWN |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( VecFactor___paren__, _wrap_VecFactor___paren__, std::string() ) {
  std::vector< dai::Factor > *arg1 = (std::vector< dai::Factor > *) 0 ;
  std::vector< dai::TFactor< double > >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  std::vector< dai::TFactor< double > >::value_type result;
  
  if (!SWIG_check_num_args("VecFactor___paren__",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_std__vectorT_dai__TFactorT_dai__Real_t_std__allocatorT_dai__TFactorT_dai__Real_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecFactor___paren__" "', argument " "1"" of type '" "std::vector< dai::Factor > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< dai::Factor > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VecFactor___paren__" "', argument " "2"" of type '" "std::vector< dai::TFactor< double > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< dai::TFactor< double > >::difference_type >(val2);
  try {
    result = std_vector_Sl_dai_Factor_Sg____paren__(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  _outv = SWIG_NewPointerObj((new std::vector< dai::TFactor< double > >::value_type(static_cast< const std::vector< dai::TFactor< double > >::value_type& >(result))), SWIGTYPE_p_dai__TFactorT_double_t, SWIG_POINTER_OWN |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( VecFactor___paren_asgn__, _wrap_VecFactor___paren_asgn__, std::string() ) {
  std::vector< dai::Factor > *arg1 = (std::vector< dai::Factor > *) 0 ;
  std::vector< dai::TFactor< double > >::difference_type arg2 ;
  std::vector< dai::TFactor< double > >::value_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("VecFactor___paren_asgn__",args.length(),3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_std__vectorT_dai__TFactorT_dai__Real_t_std__allocatorT_dai__TFactorT_dai__Real_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecFactor___paren_asgn__" "', argument " "1"" of type '" "std::vector< dai::Factor > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< dai::Factor > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VecFactor___paren_asgn__" "', argument " "2"" of type '" "std::vector< dai::TFactor< double > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< dai::TFactor< double > >::difference_type >(val2);
  {
    res3 = SWIG_ConvertPtr(args(2), &argp3, SWIGTYPE_p_dai__TFactorT_double_t,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VecFactor___paren_asgn__" "', argument " "3"" of type '" "std::vector< dai::TFactor< double > >::value_type""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VecFactor___paren_asgn__" "', argument " "3"" of type '" "std::vector< dai::TFactor< double > >::value_type""'");
    } else {
      arg3 = *(reinterpret_cast< std::vector< dai::TFactor< double > >::value_type * >(argp3));
    }
  }
  try {
    std_vector_Sl_dai_Factor_Sg____paren_asgn__(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( VecFactor_append, _wrap_VecFactor_append, std::string() ) {
  std::vector< dai::Factor > *arg1 = (std::vector< dai::Factor > *) 0 ;
  std::vector< dai::TFactor< double > >::value_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("VecFactor_append",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_std__vectorT_dai__TFactorT_dai__Real_t_std__allocatorT_dai__TFactorT_dai__Real_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecFactor_append" "', argument " "1"" of type '" "std::vector< dai::Factor > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< dai::Factor > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_dai__TFactorT_double_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VecFactor_append" "', argument " "2"" of type '" "std::vector< dai::TFactor< double > >::value_type""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VecFactor_append" "', argument " "2"" of type '" "std::vector< dai::TFactor< double > >::value_type""'");
    } else {
      arg2 = *(reinterpret_cast< std::vector< dai::TFactor< double > >::value_type * >(argp2));
    }
  }
  std_vector_Sl_dai_Factor_Sg__append(arg1,arg2);
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static octave_value_list _wrap_new_VecFactor__SWIG_0 (const octave_value_list& args, int nargout) {
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  std::vector< dai::Factor > *result = 0 ;
  
  if (!SWIG_check_num_args("new_VecFactor",args.length(),0,0,0)) {
    SWIG_fail;
  }
  result = (std::vector< dai::Factor > *)new std::vector< dai::Factor >();
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_dai__TFactorT_dai__Real_t_std__allocatorT_dai__TFactorT_dai__Real_t_t_t, 1 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static octave_value_list _wrap_new_VecFactor__SWIG_1 (const octave_value_list& args, int nargout) {
  std::vector< dai::Factor > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  std::vector< dai::Factor > *result = 0 ;
  
  if (!SWIG_check_num_args("new_VecFactor",args.length(),1,1,0)) {
    SWIG_fail;
  }
  {
    std::vector< dai::TFactor< double >,std::allocator< dai::TFactor< double > > > *ptr = (std::vector< dai::TFactor< double >,std::allocator< dai::TFactor< double > > > *)0;
    res1 = swig::asptr(args(0), &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_VecFactor" "', argument " "1"" of type '" "std::vector< dai::Factor > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_VecFactor" "', argument " "1"" of type '" "std::vector< dai::Factor > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (std::vector< dai::Factor > *)new std::vector< dai::Factor >((std::vector< dai::Factor > const &)*arg1);
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_dai__TFactorT_dai__Real_t_std__allocatorT_dai__TFactorT_dai__Real_t_t_t, 1 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  if (SWIG_IsNewObj(res1)) delete arg1;
  return _out;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return octave_value_list();
}


SWIG_DEFUN( VecFactor_empty, _wrap_VecFactor_empty, std::string() ) {
  std::vector< dai::Factor > *arg1 = (std::vector< dai::Factor > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  bool result;
  
  if (!SWIG_check_num_args("VecFactor_empty",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_std__vectorT_dai__TFactorT_dai__Real_t_std__allocatorT_dai__TFactorT_dai__Real_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecFactor_empty" "', argument " "1"" of type '" "std::vector< dai::Factor > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< dai::Factor > * >(argp1);
  result = (bool)((std::vector< dai::Factor > const *)arg1)->empty();
  _outv = SWIG_From_bool(static_cast< bool >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( VecFactor_size, _wrap_VecFactor_size, std::string() ) {
  std::vector< dai::Factor > *arg1 = (std::vector< dai::Factor > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  std::vector< dai::TFactor< double > >::size_type result;
  
  if (!SWIG_check_num_args("VecFactor_size",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_std__vectorT_dai__TFactorT_dai__Real_t_std__allocatorT_dai__TFactorT_dai__Real_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecFactor_size" "', argument " "1"" of type '" "std::vector< dai::Factor > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< dai::Factor > * >(argp1);
  result = ((std::vector< dai::Factor > const *)arg1)->size();
  _outv = SWIG_From_size_t(static_cast< size_t >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( VecFactor_swap, _wrap_VecFactor_swap, std::string() ) {
  std::vector< dai::Factor > *arg1 = (std::vector< dai::Factor > *) 0 ;
  std::vector< dai::Factor > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("VecFactor_swap",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_std__vectorT_dai__TFactorT_dai__Real_t_std__allocatorT_dai__TFactorT_dai__Real_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecFactor_swap" "', argument " "1"" of type '" "std::vector< dai::Factor > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< dai::Factor > * >(argp1);
  res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_std__vectorT_dai__TFactorT_dai__Real_t_std__allocatorT_dai__TFactorT_dai__Real_t_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VecFactor_swap" "', argument " "2"" of type '" "std::vector< dai::Factor > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VecFactor_swap" "', argument " "2"" of type '" "std::vector< dai::Factor > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< dai::Factor > * >(argp2);
  (arg1)->swap(*arg2);
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( VecFactor_begin, _wrap_VecFactor_begin, std::string() ) {
  std::vector< dai::Factor > *arg1 = (std::vector< dai::Factor > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  SwigValueWrapper< std::vector< dai::TFactor< double > >::iterator > result;
  
  if (!SWIG_check_num_args("VecFactor_begin",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_std__vectorT_dai__TFactorT_dai__Real_t_std__allocatorT_dai__TFactorT_dai__Real_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecFactor_begin" "', argument " "1"" of type '" "std::vector< dai::Factor > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< dai::Factor > * >(argp1);
  result = (arg1)->begin();
  _outv = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< dai::TFactor< double > >::iterator & >(result)),
    swig::OctSwigIterator::descriptor(),SWIG_POINTER_OWN);
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( VecFactor_end, _wrap_VecFactor_end, std::string() ) {
  std::vector< dai::Factor > *arg1 = (std::vector< dai::Factor > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  SwigValueWrapper< std::vector< dai::TFactor< double > >::iterator > result;
  
  if (!SWIG_check_num_args("VecFactor_end",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_std__vectorT_dai__TFactorT_dai__Real_t_std__allocatorT_dai__TFactorT_dai__Real_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecFactor_end" "', argument " "1"" of type '" "std::vector< dai::Factor > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< dai::Factor > * >(argp1);
  result = (arg1)->end();
  _outv = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< dai::TFactor< double > >::iterator & >(result)),
    swig::OctSwigIterator::descriptor(),SWIG_POINTER_OWN);
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( VecFactor_rbegin, _wrap_VecFactor_rbegin, std::string() ) {
  std::vector< dai::Factor > *arg1 = (std::vector< dai::Factor > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  SwigValueWrapper< std::vector< dai::TFactor< double > >::reverse_iterator > result;
  
  if (!SWIG_check_num_args("VecFactor_rbegin",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_std__vectorT_dai__TFactorT_dai__Real_t_std__allocatorT_dai__TFactorT_dai__Real_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecFactor_rbegin" "', argument " "1"" of type '" "std::vector< dai::Factor > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< dai::Factor > * >(argp1);
  result = (arg1)->rbegin();
  _outv = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< dai::TFactor< double > >::reverse_iterator & >(result)),
    swig::OctSwigIterator::descriptor(),SWIG_POINTER_OWN);
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( VecFactor_rend, _wrap_VecFactor_rend, std::string() ) {
  std::vector< dai::Factor > *arg1 = (std::vector< dai::Factor > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  SwigValueWrapper< std::vector< dai::TFactor< double > >::reverse_iterator > result;
  
  if (!SWIG_check_num_args("VecFactor_rend",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_std__vectorT_dai__TFactorT_dai__Real_t_std__allocatorT_dai__TFactorT_dai__Real_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecFactor_rend" "', argument " "1"" of type '" "std::vector< dai::Factor > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< dai::Factor > * >(argp1);
  result = (arg1)->rend();
  _outv = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< dai::TFactor< double > >::reverse_iterator & >(result)),
    swig::OctSwigIterator::descriptor(),SWIG_POINTER_OWN);
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( VecFactor_clear, _wrap_VecFactor_clear, std::string() ) {
  std::vector< dai::Factor > *arg1 = (std::vector< dai::Factor > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("VecFactor_clear",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_std__vectorT_dai__TFactorT_dai__Real_t_std__allocatorT_dai__TFactorT_dai__Real_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecFactor_clear" "', argument " "1"" of type '" "std::vector< dai::Factor > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< dai::Factor > * >(argp1);
  (arg1)->clear();
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( VecFactor_get_allocator, _wrap_VecFactor_get_allocator, std::string() ) {
  std::vector< dai::Factor > *arg1 = (std::vector< dai::Factor > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  SwigValueWrapper< std::allocator< dai::TFactor< double > > > result;
  
  if (!SWIG_check_num_args("VecFactor_get_allocator",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_std__vectorT_dai__TFactorT_dai__Real_t_std__allocatorT_dai__TFactorT_dai__Real_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecFactor_get_allocator" "', argument " "1"" of type '" "std::vector< dai::Factor > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< dai::Factor > * >(argp1);
  result = ((std::vector< dai::Factor > const *)arg1)->get_allocator();
  _outv = SWIG_NewPointerObj((new std::vector< dai::TFactor< double > >::allocator_type(static_cast< const std::vector< dai::TFactor< double > >::allocator_type& >(result))), SWIGTYPE_p_std__allocatorT_dai__TFactorT_dai__Real_t_t, SWIG_POINTER_OWN |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static octave_value_list _wrap_new_VecFactor__SWIG_2 (const octave_value_list& args, int nargout) {
  std::vector< dai::TFactor< double > >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  std::vector< dai::Factor > *result = 0 ;
  
  if (!SWIG_check_num_args("new_VecFactor",args.length(),1,1,0)) {
    SWIG_fail;
  }
  ecode1 = SWIG_AsVal_size_t(args(0), &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_VecFactor" "', argument " "1"" of type '" "std::vector< dai::TFactor< double > >::size_type""'");
  } 
  arg1 = static_cast< std::vector< dai::TFactor< double > >::size_type >(val1);
  result = (std::vector< dai::Factor > *)new std::vector< dai::Factor >(arg1);
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_dai__TFactorT_dai__Real_t_std__allocatorT_dai__TFactorT_dai__Real_t_t_t, 1 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( VecFactor_pop_back, _wrap_VecFactor_pop_back, std::string() ) {
  std::vector< dai::Factor > *arg1 = (std::vector< dai::Factor > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("VecFactor_pop_back",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_std__vectorT_dai__TFactorT_dai__Real_t_std__allocatorT_dai__TFactorT_dai__Real_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecFactor_pop_back" "', argument " "1"" of type '" "std::vector< dai::Factor > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< dai::Factor > * >(argp1);
  (arg1)->pop_back();
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static octave_value_list _wrap_VecFactor_resize__SWIG_0 (const octave_value_list& args, int nargout) {
  std::vector< dai::Factor > *arg1 = (std::vector< dai::Factor > *) 0 ;
  std::vector< dai::TFactor< double > >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("VecFactor_resize",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_std__vectorT_dai__TFactorT_dai__Real_t_std__allocatorT_dai__TFactorT_dai__Real_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecFactor_resize" "', argument " "1"" of type '" "std::vector< dai::Factor > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< dai::Factor > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VecFactor_resize" "', argument " "2"" of type '" "std::vector< dai::TFactor< double > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< dai::TFactor< double > >::size_type >(val2);
  (arg1)->resize(arg2);
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static octave_value_list _wrap_VecFactor_erase__SWIG_0 (const octave_value_list& args, int nargout) {
  std::vector< dai::Factor > *arg1 = (std::vector< dai::Factor > *) 0 ;
  SwigValueWrapper< std::vector< dai::TFactor< double > >::iterator > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::OctSwigIterator *iter2 = 0 ;
  int res2 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  SwigValueWrapper< std::vector< dai::TFactor< double > >::iterator > result;
  
  if (!SWIG_check_num_args("VecFactor_erase",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_std__vectorT_dai__TFactorT_dai__Real_t_std__allocatorT_dai__TFactorT_dai__Real_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecFactor_erase" "', argument " "1"" of type '" "std::vector< dai::Factor > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< dai::Factor > * >(argp1);
  res2 = SWIG_ConvertPtr(args(1), SWIG_as_voidptrptr(&iter2), swig::OctSwigIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VecFactor_erase" "', argument " "2"" of type '" "std::vector< dai::TFactor< double > >::iterator""'");
  } else {
    swig::OctSwigIterator_T<std::vector< dai::TFactor< double > >::iterator > *iter_t = dynamic_cast<swig::OctSwigIterator_T<std::vector< dai::TFactor< double > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VecFactor_erase" "', argument " "2"" of type '" "std::vector< dai::TFactor< double > >::iterator""'");
    }
  }
  result = std_vector_Sl_dai_Factor_Sg__erase__SWIG_0(arg1,arg2);
  _outv = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< dai::TFactor< double > >::iterator & >(result)),
    swig::OctSwigIterator::descriptor(),SWIG_POINTER_OWN);
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static octave_value_list _wrap_VecFactor_erase__SWIG_1 (const octave_value_list& args, int nargout) {
  std::vector< dai::Factor > *arg1 = (std::vector< dai::Factor > *) 0 ;
  SwigValueWrapper< std::vector< dai::TFactor< double > >::iterator > arg2 ;
  SwigValueWrapper< std::vector< dai::TFactor< double > >::iterator > arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::OctSwigIterator *iter2 = 0 ;
  int res2 ;
  swig::OctSwigIterator *iter3 = 0 ;
  int res3 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  SwigValueWrapper< std::vector< dai::TFactor< double > >::iterator > result;
  
  if (!SWIG_check_num_args("VecFactor_erase",args.length(),3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_std__vectorT_dai__TFactorT_dai__Real_t_std__allocatorT_dai__TFactorT_dai__Real_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecFactor_erase" "', argument " "1"" of type '" "std::vector< dai::Factor > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< dai::Factor > * >(argp1);
  res2 = SWIG_ConvertPtr(args(1), SWIG_as_voidptrptr(&iter2), swig::OctSwigIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VecFactor_erase" "', argument " "2"" of type '" "std::vector< dai::TFactor< double > >::iterator""'");
  } else {
    swig::OctSwigIterator_T<std::vector< dai::TFactor< double > >::iterator > *iter_t = dynamic_cast<swig::OctSwigIterator_T<std::vector< dai::TFactor< double > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VecFactor_erase" "', argument " "2"" of type '" "std::vector< dai::TFactor< double > >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(args(2), SWIG_as_voidptrptr(&iter3), swig::OctSwigIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VecFactor_erase" "', argument " "3"" of type '" "std::vector< dai::TFactor< double > >::iterator""'");
  } else {
    swig::OctSwigIterator_T<std::vector< dai::TFactor< double > >::iterator > *iter_t = dynamic_cast<swig::OctSwigIterator_T<std::vector< dai::TFactor< double > >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VecFactor_erase" "', argument " "3"" of type '" "std::vector< dai::TFactor< double > >::iterator""'");
    }
  }
  result = std_vector_Sl_dai_Factor_Sg__erase__SWIG_1(arg1,arg2,arg3);
  _outv = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< dai::TFactor< double > >::iterator & >(result)),
    swig::OctSwigIterator::descriptor(),SWIG_POINTER_OWN);
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( VecFactor_erase, _wrap_VecFactor_erase, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[3]={
    octave_value_ref(args,0),octave_value_ref(args,1),octave_value_ref(args,2)
  };
  
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< dai::TFactor< double >,std::allocator< dai::TFactor< double > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::OctSwigIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::OctSwigIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::OctSwigIterator_T<std::vector< dai::TFactor< double > >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_VecFactor_erase__SWIG_0(args, nargout);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< dai::TFactor< double >,std::allocator< dai::TFactor< double > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::OctSwigIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::OctSwigIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::OctSwigIterator_T<std::vector< dai::TFactor< double > >::iterator > *>(iter) != 0));
      if (_v) {
        swig::OctSwigIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::OctSwigIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::OctSwigIterator_T<std::vector< dai::TFactor< double > >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_VecFactor_erase__SWIG_1(args, nargout);
        }
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


static octave_value_list _wrap_new_VecFactor__SWIG_3 (const octave_value_list& args, int nargout) {
  std::vector< dai::TFactor< double > >::size_type arg1 ;
  std::vector< dai::TFactor< double > >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  std::vector< dai::Factor > *result = 0 ;
  
  if (!SWIG_check_num_args("new_VecFactor",args.length(),2,2,0)) {
    SWIG_fail;
  }
  ecode1 = SWIG_AsVal_size_t(args(0), &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_VecFactor" "', argument " "1"" of type '" "std::vector< dai::TFactor< double > >::size_type""'");
  } 
  arg1 = static_cast< std::vector< dai::TFactor< double > >::size_type >(val1);
  res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_dai__TFactorT_double_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_VecFactor" "', argument " "2"" of type '" "std::vector< dai::TFactor< double > >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_VecFactor" "', argument " "2"" of type '" "std::vector< dai::TFactor< double > >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< dai::TFactor< double > >::value_type * >(argp2);
  result = (std::vector< dai::Factor > *)new std::vector< dai::Factor >(arg1,(std::vector< dai::TFactor< double > >::value_type const &)*arg2);
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_dai__TFactorT_dai__Real_t_std__allocatorT_dai__TFactorT_dai__Real_t_t_t, 1 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( new_VecFactor, _wrap_new_VecFactor, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[2]={
    octave_value_ref(args,0),octave_value_ref(args,1)
  };
  
  if (argc == 0) {
    return _wrap_new_VecFactor__SWIG_0(args, nargout);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_VecFactor__SWIG_2(args, nargout);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< dai::TFactor< double >,std::allocator< dai::TFactor< double > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_VecFactor__SWIG_1(args, nargout);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_dai__TFactorT_double_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_VecFactor__SWIG_3(args, nargout);
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


SWIG_DEFUN( VecFactor_push_back, _wrap_VecFactor_push_back, std::string() ) {
  std::vector< dai::Factor > *arg1 = (std::vector< dai::Factor > *) 0 ;
  std::vector< dai::TFactor< double > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("VecFactor_push_back",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_std__vectorT_dai__TFactorT_dai__Real_t_std__allocatorT_dai__TFactorT_dai__Real_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecFactor_push_back" "', argument " "1"" of type '" "std::vector< dai::Factor > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< dai::Factor > * >(argp1);
  res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_dai__TFactorT_double_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VecFactor_push_back" "', argument " "2"" of type '" "std::vector< dai::TFactor< double > >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VecFactor_push_back" "', argument " "2"" of type '" "std::vector< dai::TFactor< double > >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< dai::TFactor< double > >::value_type * >(argp2);
  (arg1)->push_back((std::vector< dai::TFactor< double > >::value_type const &)*arg2);
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( VecFactor_front, _wrap_VecFactor_front, std::string() ) {
  std::vector< dai::Factor > *arg1 = (std::vector< dai::Factor > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  std::vector< dai::TFactor< double > >::value_type *result = 0 ;
  
  if (!SWIG_check_num_args("VecFactor_front",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_std__vectorT_dai__TFactorT_dai__Real_t_std__allocatorT_dai__TFactorT_dai__Real_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecFactor_front" "', argument " "1"" of type '" "std::vector< dai::Factor > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< dai::Factor > * >(argp1);
  result = (std::vector< dai::TFactor< double > >::value_type *) &((std::vector< dai::Factor > const *)arg1)->front();
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dai__TFactorT_double_t, 0 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( VecFactor_back, _wrap_VecFactor_back, std::string() ) {
  std::vector< dai::Factor > *arg1 = (std::vector< dai::Factor > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  std::vector< dai::TFactor< double > >::value_type *result = 0 ;
  
  if (!SWIG_check_num_args("VecFactor_back",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_std__vectorT_dai__TFactorT_dai__Real_t_std__allocatorT_dai__TFactorT_dai__Real_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecFactor_back" "', argument " "1"" of type '" "std::vector< dai::Factor > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< dai::Factor > * >(argp1);
  result = (std::vector< dai::TFactor< double > >::value_type *) &((std::vector< dai::Factor > const *)arg1)->back();
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dai__TFactorT_double_t, 0 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( VecFactor_assign, _wrap_VecFactor_assign, std::string() ) {
  std::vector< dai::Factor > *arg1 = (std::vector< dai::Factor > *) 0 ;
  std::vector< dai::TFactor< double > >::size_type arg2 ;
  std::vector< dai::TFactor< double > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("VecFactor_assign",args.length(),3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_std__vectorT_dai__TFactorT_dai__Real_t_std__allocatorT_dai__TFactorT_dai__Real_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecFactor_assign" "', argument " "1"" of type '" "std::vector< dai::Factor > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< dai::Factor > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VecFactor_assign" "', argument " "2"" of type '" "std::vector< dai::TFactor< double > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< dai::TFactor< double > >::size_type >(val2);
  res3 = SWIG_ConvertPtr(args(2), &argp3, SWIGTYPE_p_dai__TFactorT_double_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VecFactor_assign" "', argument " "3"" of type '" "std::vector< dai::TFactor< double > >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VecFactor_assign" "', argument " "3"" of type '" "std::vector< dai::TFactor< double > >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< dai::TFactor< double > >::value_type * >(argp3);
  (arg1)->assign(arg2,(std::vector< dai::TFactor< double > >::value_type const &)*arg3);
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static octave_value_list _wrap_VecFactor_resize__SWIG_1 (const octave_value_list& args, int nargout) {
  std::vector< dai::Factor > *arg1 = (std::vector< dai::Factor > *) 0 ;
  std::vector< dai::TFactor< double > >::size_type arg2 ;
  std::vector< dai::TFactor< double > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("VecFactor_resize",args.length(),3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_std__vectorT_dai__TFactorT_dai__Real_t_std__allocatorT_dai__TFactorT_dai__Real_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecFactor_resize" "', argument " "1"" of type '" "std::vector< dai::Factor > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< dai::Factor > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VecFactor_resize" "', argument " "2"" of type '" "std::vector< dai::TFactor< double > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< dai::TFactor< double > >::size_type >(val2);
  res3 = SWIG_ConvertPtr(args(2), &argp3, SWIGTYPE_p_dai__TFactorT_double_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VecFactor_resize" "', argument " "3"" of type '" "std::vector< dai::TFactor< double > >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VecFactor_resize" "', argument " "3"" of type '" "std::vector< dai::TFactor< double > >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< dai::TFactor< double > >::value_type * >(argp3);
  (arg1)->resize(arg2,(std::vector< dai::TFactor< double > >::value_type const &)*arg3);
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( VecFactor_resize, _wrap_VecFactor_resize, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[3]={
    octave_value_ref(args,0),octave_value_ref(args,1),octave_value_ref(args,2)
  };
  
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< dai::TFactor< double >,std::allocator< dai::TFactor< double > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_VecFactor_resize__SWIG_0(args, nargout);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< dai::TFactor< double >,std::allocator< dai::TFactor< double > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_dai__TFactorT_double_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_VecFactor_resize__SWIG_1(args, nargout);
        }
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


static octave_value_list _wrap_VecFactor_insert__SWIG_0 (const octave_value_list& args, int nargout) {
  std::vector< dai::Factor > *arg1 = (std::vector< dai::Factor > *) 0 ;
  SwigValueWrapper< std::vector< dai::TFactor< double > >::iterator > arg2 ;
  std::vector< dai::TFactor< double > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::OctSwigIterator *iter2 = 0 ;
  int res2 ;
  void *argp3 ;
  int res3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  SwigValueWrapper< std::vector< dai::TFactor< double > >::iterator > result;
  
  if (!SWIG_check_num_args("VecFactor_insert",args.length(),3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_std__vectorT_dai__TFactorT_dai__Real_t_std__allocatorT_dai__TFactorT_dai__Real_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecFactor_insert" "', argument " "1"" of type '" "std::vector< dai::Factor > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< dai::Factor > * >(argp1);
  res2 = SWIG_ConvertPtr(args(1), SWIG_as_voidptrptr(&iter2), swig::OctSwigIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VecFactor_insert" "', argument " "2"" of type '" "std::vector< dai::TFactor< double > >::iterator""'");
  } else {
    swig::OctSwigIterator_T<std::vector< dai::TFactor< double > >::iterator > *iter_t = dynamic_cast<swig::OctSwigIterator_T<std::vector< dai::TFactor< double > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VecFactor_insert" "', argument " "2"" of type '" "std::vector< dai::TFactor< double > >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(args(2), &argp3, SWIGTYPE_p_dai__TFactorT_double_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VecFactor_insert" "', argument " "3"" of type '" "std::vector< dai::TFactor< double > >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VecFactor_insert" "', argument " "3"" of type '" "std::vector< dai::TFactor< double > >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< dai::TFactor< double > >::value_type * >(argp3);
  result = std_vector_Sl_dai_Factor_Sg__insert__SWIG_0(arg1,arg2,(dai::TFactor< double > const &)*arg3);
  _outv = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< dai::TFactor< double > >::iterator & >(result)),
    swig::OctSwigIterator::descriptor(),SWIG_POINTER_OWN);
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static octave_value_list _wrap_VecFactor_insert__SWIG_1 (const octave_value_list& args, int nargout) {
  std::vector< dai::Factor > *arg1 = (std::vector< dai::Factor > *) 0 ;
  SwigValueWrapper< std::vector< dai::TFactor< double > >::iterator > arg2 ;
  std::vector< dai::TFactor< double > >::size_type arg3 ;
  std::vector< dai::TFactor< double > >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::OctSwigIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("VecFactor_insert",args.length(),4,4,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_std__vectorT_dai__TFactorT_dai__Real_t_std__allocatorT_dai__TFactorT_dai__Real_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecFactor_insert" "', argument " "1"" of type '" "std::vector< dai::Factor > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< dai::Factor > * >(argp1);
  res2 = SWIG_ConvertPtr(args(1), SWIG_as_voidptrptr(&iter2), swig::OctSwigIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VecFactor_insert" "', argument " "2"" of type '" "std::vector< dai::TFactor< double > >::iterator""'");
  } else {
    swig::OctSwigIterator_T<std::vector< dai::TFactor< double > >::iterator > *iter_t = dynamic_cast<swig::OctSwigIterator_T<std::vector< dai::TFactor< double > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VecFactor_insert" "', argument " "2"" of type '" "std::vector< dai::TFactor< double > >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(args(2), &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VecFactor_insert" "', argument " "3"" of type '" "std::vector< dai::TFactor< double > >::size_type""'");
  } 
  arg3 = static_cast< std::vector< dai::TFactor< double > >::size_type >(val3);
  res4 = SWIG_ConvertPtr(args(3), &argp4, SWIGTYPE_p_dai__TFactorT_double_t,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "VecFactor_insert" "', argument " "4"" of type '" "std::vector< dai::TFactor< double > >::value_type const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VecFactor_insert" "', argument " "4"" of type '" "std::vector< dai::TFactor< double > >::value_type const &""'"); 
  }
  arg4 = reinterpret_cast< std::vector< dai::TFactor< double > >::value_type * >(argp4);
  std_vector_Sl_dai_Factor_Sg__insert__SWIG_1(arg1,arg2,arg3,(dai::TFactor< double > const &)*arg4);
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( VecFactor_insert, _wrap_VecFactor_insert, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[4]={
    octave_value_ref(args,0),octave_value_ref(args,1),octave_value_ref(args,2),octave_value_ref(args,3)
  };
  
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< dai::TFactor< double >,std::allocator< dai::TFactor< double > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::OctSwigIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::OctSwigIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::OctSwigIterator_T<std::vector< dai::TFactor< double > >::iterator > *>(iter) != 0));
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_dai__TFactorT_double_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_VecFactor_insert__SWIG_0(args, nargout);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< dai::TFactor< double >,std::allocator< dai::TFactor< double > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::OctSwigIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::OctSwigIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::OctSwigIterator_T<std::vector< dai::TFactor< double > >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_dai__TFactorT_double_t, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_VecFactor_insert__SWIG_1(args, nargout);
          }
        }
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


SWIG_DEFUN( VecFactor_reserve, _wrap_VecFactor_reserve, std::string() ) {
  std::vector< dai::Factor > *arg1 = (std::vector< dai::Factor > *) 0 ;
  std::vector< dai::TFactor< double > >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("VecFactor_reserve",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_std__vectorT_dai__TFactorT_dai__Real_t_std__allocatorT_dai__TFactorT_dai__Real_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecFactor_reserve" "', argument " "1"" of type '" "std::vector< dai::Factor > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< dai::Factor > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VecFactor_reserve" "', argument " "2"" of type '" "std::vector< dai::TFactor< double > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< dai::TFactor< double > >::size_type >(val2);
  (arg1)->reserve(arg2);
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( VecFactor_capacity, _wrap_VecFactor_capacity, std::string() ) {
  std::vector< dai::Factor > *arg1 = (std::vector< dai::Factor > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  std::vector< dai::TFactor< double > >::size_type result;
  
  if (!SWIG_check_num_args("VecFactor_capacity",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_std__vectorT_dai__TFactorT_dai__Real_t_std__allocatorT_dai__TFactorT_dai__Real_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecFactor_capacity" "', argument " "1"" of type '" "std::vector< dai::Factor > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< dai::Factor > * >(argp1);
  result = ((std::vector< dai::Factor > const *)arg1)->capacity();
  _outv = SWIG_From_size_t(static_cast< size_t >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( delete_VecFactor, _wrap_delete_VecFactor, std::string() ) {
  std::vector< dai::Factor > *arg1 = (std::vector< dai::Factor > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("delete_VecFactor",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_std__vectorT_dai__TFactorT_dai__Real_t_std__allocatorT_dai__TFactorT_dai__Real_t_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_VecFactor" "', argument " "1"" of type '" "std::vector< dai::Factor > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< dai::Factor > * >(argp1);
  delete arg1;
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static swig_octave_member swig_VecFactor_members[] = {
{"pop",_wrap_VecFactor_pop,0,0,0,0},
{"__paren__",_wrap_VecFactor___paren__,0,0,0,0},
{"__paren_asgn__",_wrap_VecFactor___paren_asgn__,0,0,0,0},
{"append",_wrap_VecFactor_append,0,0,0,0},
{"empty",_wrap_VecFactor_empty,0,0,0,0},
{"size",_wrap_VecFactor_size,0,0,0,0},
{"swap",_wrap_VecFactor_swap,0,0,0,0},
{"begin",_wrap_VecFactor_begin,0,0,0,0},
{"end",_wrap_VecFactor_end,0,0,0,0},
{"rbegin",_wrap_VecFactor_rbegin,0,0,0,0},
{"rend",_wrap_VecFactor_rend,0,0,0,0},
{"clear",_wrap_VecFactor_clear,0,0,0,0},
{"get_allocator",_wrap_VecFactor_get_allocator,0,0,0,0},
{"pop_back",_wrap_VecFactor_pop_back,0,0,0,0},
{"erase",_wrap_VecFactor_erase,0,0,0,0},
{"push_back",_wrap_VecFactor_push_back,0,0,0,0},
{"front",_wrap_VecFactor_front,0,0,0,0},
{"back",_wrap_VecFactor_back,0,0,0,0},
{"assign",_wrap_VecFactor_assign,0,0,0,0},
{"resize",_wrap_VecFactor_resize,0,0,0,0},
{"insert",_wrap_VecFactor_insert,0,0,0,0},
{"reserve",_wrap_VecFactor_reserve,0,0,0,0},
{"capacity",_wrap_VecFactor_capacity,0,0,0,0},
{0,0,0,0,0,0}
};
static const char *swig_VecFactor_base_names[] = {0};
static const swig_type_info *swig_VecFactor_base[] = {0};
static swig_octave_class _wrap_class_VecFactor = {"VecFactor", &SWIGTYPE_p_std__vectorT_dai__TFactorT_dai__Real_t_std__allocatorT_dai__TFactorT_dai__Real_t_t_t,0,_wrap_new_VecFactor,0,_wrap_delete_VecFactor,swig_VecFactor_members,swig_VecFactor_base_names,swig_VecFactor_base };

SWIG_DEFUN( VecVecFactor_pop, _wrap_VecVecFactor_pop, std::string() ) {
  std::vector< VecFactor > *arg1 = (std::vector< VecFactor > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  std::vector< std::vector< dai::TFactor< double >,std::allocator< dai::TFactor< double > > > >::value_type result;
  
  if (!SWIG_check_num_args("VecVecFactor_pop",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_dai__Factor_std__allocatorT_dai__Factor_t_t_std__allocatorT_std__vectorT_dai__Factor_std__allocatorT_dai__Factor_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecVecFactor_pop" "', argument " "1"" of type '" "std::vector< VecFactor > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< VecFactor > * >(argp1);
  try {
    result = std_vector_Sl_VecFactor_Sg__pop(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  _outv = swig::from(static_cast< std::vector< dai::TFactor< double >,std::allocator< dai::TFactor< double > > > >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( VecVecFactor___paren__, _wrap_VecVecFactor___paren__, std::string() ) {
  std::vector< VecFactor > *arg1 = (std::vector< VecFactor > *) 0 ;
  std::vector< std::vector< dai::TFactor< double >,std::allocator< dai::TFactor< double > > > >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  std::vector< std::vector< dai::TFactor< double >,std::allocator< dai::TFactor< double > > > >::value_type result;
  
  if (!SWIG_check_num_args("VecVecFactor___paren__",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_dai__Factor_std__allocatorT_dai__Factor_t_t_std__allocatorT_std__vectorT_dai__Factor_std__allocatorT_dai__Factor_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecVecFactor___paren__" "', argument " "1"" of type '" "std::vector< VecFactor > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< VecFactor > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VecVecFactor___paren__" "', argument " "2"" of type '" "std::vector< std::vector< dai::TFactor< double >,std::allocator< dai::TFactor< double > > > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< dai::TFactor< double >,std::allocator< dai::TFactor< double > > > >::difference_type >(val2);
  try {
    result = std_vector_Sl_VecFactor_Sg____paren__(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  _outv = swig::from(static_cast< std::vector< dai::TFactor< double >,std::allocator< dai::TFactor< double > > > >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( VecVecFactor___paren_asgn__, _wrap_VecVecFactor___paren_asgn__, std::string() ) {
  std::vector< VecFactor > *arg1 = (std::vector< VecFactor > *) 0 ;
  std::vector< std::vector< dai::TFactor< double >,std::allocator< dai::TFactor< double > > > >::difference_type arg2 ;
  std::vector< std::vector< dai::TFactor< double >,std::allocator< dai::TFactor< double > > > >::value_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("VecVecFactor___paren_asgn__",args.length(),3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_dai__Factor_std__allocatorT_dai__Factor_t_t_std__allocatorT_std__vectorT_dai__Factor_std__allocatorT_dai__Factor_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecVecFactor___paren_asgn__" "', argument " "1"" of type '" "std::vector< VecFactor > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< VecFactor > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VecVecFactor___paren_asgn__" "', argument " "2"" of type '" "std::vector< std::vector< dai::TFactor< double >,std::allocator< dai::TFactor< double > > > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< dai::TFactor< double >,std::allocator< dai::TFactor< double > > > >::difference_type >(val2);
  {
    std::vector< dai::TFactor< double >,std::allocator< dai::TFactor< double > > > *ptr = (std::vector< dai::TFactor< double >,std::allocator< dai::TFactor< double > > > *)0;
    int res = swig::asptr(args(2), &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "VecVecFactor___paren_asgn__" "', argument " "3"" of type '" "std::vector< std::vector< dai::TFactor< double >,std::allocator< dai::TFactor< double > > > >::value_type""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  try {
    std_vector_Sl_VecFactor_Sg____paren_asgn__(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( VecVecFactor_append, _wrap_VecVecFactor_append, std::string() ) {
  std::vector< VecFactor > *arg1 = (std::vector< VecFactor > *) 0 ;
  std::vector< std::vector< dai::TFactor< double >,std::allocator< dai::TFactor< double > > > >::value_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("VecVecFactor_append",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_dai__Factor_std__allocatorT_dai__Factor_t_t_std__allocatorT_std__vectorT_dai__Factor_std__allocatorT_dai__Factor_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecVecFactor_append" "', argument " "1"" of type '" "std::vector< VecFactor > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< VecFactor > * >(argp1);
  {
    std::vector< dai::TFactor< double >,std::allocator< dai::TFactor< double > > > *ptr = (std::vector< dai::TFactor< double >,std::allocator< dai::TFactor< double > > > *)0;
    int res = swig::asptr(args(1), &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "VecVecFactor_append" "', argument " "2"" of type '" "std::vector< std::vector< dai::TFactor< double >,std::allocator< dai::TFactor< double > > > >::value_type""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  std_vector_Sl_VecFactor_Sg__append(arg1,arg2);
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static octave_value_list _wrap_new_VecVecFactor__SWIG_0 (const octave_value_list& args, int nargout) {
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  std::vector< VecFactor > *result = 0 ;
  
  if (!SWIG_check_num_args("new_VecVecFactor",args.length(),0,0,0)) {
    SWIG_fail;
  }
  result = (std::vector< VecFactor > *)new std::vector< VecFactor >();
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__vectorT_dai__Factor_std__allocatorT_dai__Factor_t_t_std__allocatorT_std__vectorT_dai__Factor_std__allocatorT_dai__Factor_t_t_t_t, 1 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static octave_value_list _wrap_new_VecVecFactor__SWIG_1 (const octave_value_list& args, int nargout) {
  std::vector< VecFactor > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  std::vector< VecFactor > *result = 0 ;
  
  if (!SWIG_check_num_args("new_VecVecFactor",args.length(),1,1,0)) {
    SWIG_fail;
  }
  {
    std::vector< std::vector< dai::TFactor< double >,std::allocator< dai::TFactor< double > > >,std::allocator< std::vector< dai::TFactor< double >,std::allocator< dai::TFactor< double > > > > > *ptr = (std::vector< std::vector< dai::TFactor< double >,std::allocator< dai::TFactor< double > > >,std::allocator< std::vector< dai::TFactor< double >,std::allocator< dai::TFactor< double > > > > > *)0;
    res1 = swig::asptr(args(0), &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_VecVecFactor" "', argument " "1"" of type '" "std::vector< VecFactor > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_VecVecFactor" "', argument " "1"" of type '" "std::vector< VecFactor > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (std::vector< VecFactor > *)new std::vector< VecFactor >((std::vector< VecFactor > const &)*arg1);
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__vectorT_dai__Factor_std__allocatorT_dai__Factor_t_t_std__allocatorT_std__vectorT_dai__Factor_std__allocatorT_dai__Factor_t_t_t_t, 1 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  if (SWIG_IsNewObj(res1)) delete arg1;
  return _out;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return octave_value_list();
}


SWIG_DEFUN( VecVecFactor_empty, _wrap_VecVecFactor_empty, std::string() ) {
  std::vector< VecFactor > *arg1 = (std::vector< VecFactor > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  bool result;
  
  if (!SWIG_check_num_args("VecVecFactor_empty",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_dai__Factor_std__allocatorT_dai__Factor_t_t_std__allocatorT_std__vectorT_dai__Factor_std__allocatorT_dai__Factor_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecVecFactor_empty" "', argument " "1"" of type '" "std::vector< VecFactor > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< VecFactor > * >(argp1);
  result = (bool)((std::vector< VecFactor > const *)arg1)->empty();
  _outv = SWIG_From_bool(static_cast< bool >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( VecVecFactor_size, _wrap_VecVecFactor_size, std::string() ) {
  std::vector< VecFactor > *arg1 = (std::vector< VecFactor > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  std::vector< std::vector< dai::TFactor< double >,std::allocator< dai::TFactor< double > > > >::size_type result;
  
  if (!SWIG_check_num_args("VecVecFactor_size",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_dai__Factor_std__allocatorT_dai__Factor_t_t_std__allocatorT_std__vectorT_dai__Factor_std__allocatorT_dai__Factor_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecVecFactor_size" "', argument " "1"" of type '" "std::vector< VecFactor > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< VecFactor > * >(argp1);
  result = ((std::vector< VecFactor > const *)arg1)->size();
  _outv = SWIG_From_size_t(static_cast< size_t >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( VecVecFactor_swap, _wrap_VecVecFactor_swap, std::string() ) {
  std::vector< VecFactor > *arg1 = (std::vector< VecFactor > *) 0 ;
  std::vector< VecFactor > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("VecVecFactor_swap",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_dai__Factor_std__allocatorT_dai__Factor_t_t_std__allocatorT_std__vectorT_dai__Factor_std__allocatorT_dai__Factor_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecVecFactor_swap" "', argument " "1"" of type '" "std::vector< VecFactor > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< VecFactor > * >(argp1);
  res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_std__vectorT_std__vectorT_dai__Factor_std__allocatorT_dai__Factor_t_t_std__allocatorT_std__vectorT_dai__Factor_std__allocatorT_dai__Factor_t_t_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VecVecFactor_swap" "', argument " "2"" of type '" "std::vector< VecFactor > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VecVecFactor_swap" "', argument " "2"" of type '" "std::vector< VecFactor > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< VecFactor > * >(argp2);
  (arg1)->swap(*arg2);
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( VecVecFactor_begin, _wrap_VecVecFactor_begin, std::string() ) {
  std::vector< VecFactor > *arg1 = (std::vector< VecFactor > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  SwigValueWrapper< std::vector< std::vector< dai::TFactor< double >,std::allocator< dai::TFactor< double > > > >::iterator > result;
  
  if (!SWIG_check_num_args("VecVecFactor_begin",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_dai__Factor_std__allocatorT_dai__Factor_t_t_std__allocatorT_std__vectorT_dai__Factor_std__allocatorT_dai__Factor_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecVecFactor_begin" "', argument " "1"" of type '" "std::vector< VecFactor > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< VecFactor > * >(argp1);
  result = (arg1)->begin();
  _outv = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::vector< dai::TFactor< double >,std::allocator< dai::TFactor< double > > > >::iterator & >(result)),
    swig::OctSwigIterator::descriptor(),SWIG_POINTER_OWN);
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( VecVecFactor_end, _wrap_VecVecFactor_end, std::string() ) {
  std::vector< VecFactor > *arg1 = (std::vector< VecFactor > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  SwigValueWrapper< std::vector< std::vector< dai::TFactor< double >,std::allocator< dai::TFactor< double > > > >::iterator > result;
  
  if (!SWIG_check_num_args("VecVecFactor_end",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_dai__Factor_std__allocatorT_dai__Factor_t_t_std__allocatorT_std__vectorT_dai__Factor_std__allocatorT_dai__Factor_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecVecFactor_end" "', argument " "1"" of type '" "std::vector< VecFactor > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< VecFactor > * >(argp1);
  result = (arg1)->end();
  _outv = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::vector< dai::TFactor< double >,std::allocator< dai::TFactor< double > > > >::iterator & >(result)),
    swig::OctSwigIterator::descriptor(),SWIG_POINTER_OWN);
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( VecVecFactor_rbegin, _wrap_VecVecFactor_rbegin, std::string() ) {
  std::vector< VecFactor > *arg1 = (std::vector< VecFactor > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  SwigValueWrapper< std::vector< std::vector< dai::TFactor< double >,std::allocator< dai::TFactor< double > > > >::reverse_iterator > result;
  
  if (!SWIG_check_num_args("VecVecFactor_rbegin",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_dai__Factor_std__allocatorT_dai__Factor_t_t_std__allocatorT_std__vectorT_dai__Factor_std__allocatorT_dai__Factor_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecVecFactor_rbegin" "', argument " "1"" of type '" "std::vector< VecFactor > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< VecFactor > * >(argp1);
  result = (arg1)->rbegin();
  _outv = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::vector< dai::TFactor< double >,std::allocator< dai::TFactor< double > > > >::reverse_iterator & >(result)),
    swig::OctSwigIterator::descriptor(),SWIG_POINTER_OWN);
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( VecVecFactor_rend, _wrap_VecVecFactor_rend, std::string() ) {
  std::vector< VecFactor > *arg1 = (std::vector< VecFactor > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  SwigValueWrapper< std::vector< std::vector< dai::TFactor< double >,std::allocator< dai::TFactor< double > > > >::reverse_iterator > result;
  
  if (!SWIG_check_num_args("VecVecFactor_rend",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_dai__Factor_std__allocatorT_dai__Factor_t_t_std__allocatorT_std__vectorT_dai__Factor_std__allocatorT_dai__Factor_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecVecFactor_rend" "', argument " "1"" of type '" "std::vector< VecFactor > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< VecFactor > * >(argp1);
  result = (arg1)->rend();
  _outv = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::vector< dai::TFactor< double >,std::allocator< dai::TFactor< double > > > >::reverse_iterator & >(result)),
    swig::OctSwigIterator::descriptor(),SWIG_POINTER_OWN);
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( VecVecFactor_clear, _wrap_VecVecFactor_clear, std::string() ) {
  std::vector< VecFactor > *arg1 = (std::vector< VecFactor > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("VecVecFactor_clear",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_dai__Factor_std__allocatorT_dai__Factor_t_t_std__allocatorT_std__vectorT_dai__Factor_std__allocatorT_dai__Factor_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecVecFactor_clear" "', argument " "1"" of type '" "std::vector< VecFactor > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< VecFactor > * >(argp1);
  (arg1)->clear();
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( VecVecFactor_get_allocator, _wrap_VecVecFactor_get_allocator, std::string() ) {
  std::vector< VecFactor > *arg1 = (std::vector< VecFactor > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  SwigValueWrapper< std::allocator< std::vector< dai::TFactor< double >,std::allocator< dai::TFactor< double > > > > > result;
  
  if (!SWIG_check_num_args("VecVecFactor_get_allocator",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_dai__Factor_std__allocatorT_dai__Factor_t_t_std__allocatorT_std__vectorT_dai__Factor_std__allocatorT_dai__Factor_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecVecFactor_get_allocator" "', argument " "1"" of type '" "std::vector< VecFactor > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< VecFactor > * >(argp1);
  result = ((std::vector< VecFactor > const *)arg1)->get_allocator();
  _outv = SWIG_NewPointerObj((new std::vector< std::vector< dai::TFactor< double >,std::allocator< dai::TFactor< double > > > >::allocator_type(static_cast< const std::vector< std::vector< dai::TFactor< double >,std::allocator< dai::TFactor< double > > > >::allocator_type& >(result))), SWIGTYPE_p_std__allocatorT_std__vectorT_dai__Factor_std__allocatorT_dai__Factor_t_t_t, SWIG_POINTER_OWN |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static octave_value_list _wrap_new_VecVecFactor__SWIG_2 (const octave_value_list& args, int nargout) {
  std::vector< std::vector< dai::TFactor< double >,std::allocator< dai::TFactor< double > > > >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  std::vector< VecFactor > *result = 0 ;
  
  if (!SWIG_check_num_args("new_VecVecFactor",args.length(),1,1,0)) {
    SWIG_fail;
  }
  ecode1 = SWIG_AsVal_size_t(args(0), &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_VecVecFactor" "', argument " "1"" of type '" "std::vector< std::vector< dai::TFactor< double >,std::allocator< dai::TFactor< double > > > >::size_type""'");
  } 
  arg1 = static_cast< std::vector< std::vector< dai::TFactor< double >,std::allocator< dai::TFactor< double > > > >::size_type >(val1);
  result = (std::vector< VecFactor > *)new std::vector< VecFactor >(arg1);
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__vectorT_dai__Factor_std__allocatorT_dai__Factor_t_t_std__allocatorT_std__vectorT_dai__Factor_std__allocatorT_dai__Factor_t_t_t_t, 1 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( VecVecFactor_pop_back, _wrap_VecVecFactor_pop_back, std::string() ) {
  std::vector< VecFactor > *arg1 = (std::vector< VecFactor > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("VecVecFactor_pop_back",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_dai__Factor_std__allocatorT_dai__Factor_t_t_std__allocatorT_std__vectorT_dai__Factor_std__allocatorT_dai__Factor_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecVecFactor_pop_back" "', argument " "1"" of type '" "std::vector< VecFactor > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< VecFactor > * >(argp1);
  (arg1)->pop_back();
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static octave_value_list _wrap_VecVecFactor_resize__SWIG_0 (const octave_value_list& args, int nargout) {
  std::vector< VecFactor > *arg1 = (std::vector< VecFactor > *) 0 ;
  std::vector< std::vector< dai::TFactor< double >,std::allocator< dai::TFactor< double > > > >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("VecVecFactor_resize",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_dai__Factor_std__allocatorT_dai__Factor_t_t_std__allocatorT_std__vectorT_dai__Factor_std__allocatorT_dai__Factor_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecVecFactor_resize" "', argument " "1"" of type '" "std::vector< VecFactor > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< VecFactor > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VecVecFactor_resize" "', argument " "2"" of type '" "std::vector< std::vector< dai::TFactor< double >,std::allocator< dai::TFactor< double > > > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< dai::TFactor< double >,std::allocator< dai::TFactor< double > > > >::size_type >(val2);
  (arg1)->resize(arg2);
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static octave_value_list _wrap_VecVecFactor_erase__SWIG_0 (const octave_value_list& args, int nargout) {
  std::vector< VecFactor > *arg1 = (std::vector< VecFactor > *) 0 ;
  SwigValueWrapper< std::vector< std::vector< dai::TFactor< double >,std::allocator< dai::TFactor< double > > > >::iterator > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::OctSwigIterator *iter2 = 0 ;
  int res2 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  SwigValueWrapper< std::vector< std::vector< dai::TFactor< double >,std::allocator< dai::TFactor< double > > > >::iterator > result;
  
  if (!SWIG_check_num_args("VecVecFactor_erase",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_dai__Factor_std__allocatorT_dai__Factor_t_t_std__allocatorT_std__vectorT_dai__Factor_std__allocatorT_dai__Factor_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecVecFactor_erase" "', argument " "1"" of type '" "std::vector< VecFactor > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< VecFactor > * >(argp1);
  res2 = SWIG_ConvertPtr(args(1), SWIG_as_voidptrptr(&iter2), swig::OctSwigIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VecVecFactor_erase" "', argument " "2"" of type '" "std::vector< std::vector< dai::TFactor< double >,std::allocator< dai::TFactor< double > > > >::iterator""'");
  } else {
    swig::OctSwigIterator_T<std::vector< std::vector< dai::TFactor< double >,std::allocator< dai::TFactor< double > > > >::iterator > *iter_t = dynamic_cast<swig::OctSwigIterator_T<std::vector< std::vector< dai::TFactor< double >,std::allocator< dai::TFactor< double > > > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VecVecFactor_erase" "', argument " "2"" of type '" "std::vector< std::vector< dai::TFactor< double >,std::allocator< dai::TFactor< double > > > >::iterator""'");
    }
  }
  result = std_vector_Sl_VecFactor_Sg__erase__SWIG_0(arg1,arg2);
  _outv = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::vector< dai::TFactor< double >,std::allocator< dai::TFactor< double > > > >::iterator & >(result)),
    swig::OctSwigIterator::descriptor(),SWIG_POINTER_OWN);
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static octave_value_list _wrap_VecVecFactor_erase__SWIG_1 (const octave_value_list& args, int nargout) {
  std::vector< VecFactor > *arg1 = (std::vector< VecFactor > *) 0 ;
  SwigValueWrapper< std::vector< std::vector< dai::TFactor< double >,std::allocator< dai::TFactor< double > > > >::iterator > arg2 ;
  SwigValueWrapper< std::vector< std::vector< dai::TFactor< double >,std::allocator< dai::TFactor< double > > > >::iterator > arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::OctSwigIterator *iter2 = 0 ;
  int res2 ;
  swig::OctSwigIterator *iter3 = 0 ;
  int res3 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  SwigValueWrapper< std::vector< std::vector< dai::TFactor< double >,std::allocator< dai::TFactor< double > > > >::iterator > result;
  
  if (!SWIG_check_num_args("VecVecFactor_erase",args.length(),3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_dai__Factor_std__allocatorT_dai__Factor_t_t_std__allocatorT_std__vectorT_dai__Factor_std__allocatorT_dai__Factor_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecVecFactor_erase" "', argument " "1"" of type '" "std::vector< VecFactor > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< VecFactor > * >(argp1);
  res2 = SWIG_ConvertPtr(args(1), SWIG_as_voidptrptr(&iter2), swig::OctSwigIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VecVecFactor_erase" "', argument " "2"" of type '" "std::vector< std::vector< dai::TFactor< double >,std::allocator< dai::TFactor< double > > > >::iterator""'");
  } else {
    swig::OctSwigIterator_T<std::vector< std::vector< dai::TFactor< double >,std::allocator< dai::TFactor< double > > > >::iterator > *iter_t = dynamic_cast<swig::OctSwigIterator_T<std::vector< std::vector< dai::TFactor< double >,std::allocator< dai::TFactor< double > > > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VecVecFactor_erase" "', argument " "2"" of type '" "std::vector< std::vector< dai::TFactor< double >,std::allocator< dai::TFactor< double > > > >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(args(2), SWIG_as_voidptrptr(&iter3), swig::OctSwigIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VecVecFactor_erase" "', argument " "3"" of type '" "std::vector< std::vector< dai::TFactor< double >,std::allocator< dai::TFactor< double > > > >::iterator""'");
  } else {
    swig::OctSwigIterator_T<std::vector< std::vector< dai::TFactor< double >,std::allocator< dai::TFactor< double > > > >::iterator > *iter_t = dynamic_cast<swig::OctSwigIterator_T<std::vector< std::vector< dai::TFactor< double >,std::allocator< dai::TFactor< double > > > >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VecVecFactor_erase" "', argument " "3"" of type '" "std::vector< std::vector< dai::TFactor< double >,std::allocator< dai::TFactor< double > > > >::iterator""'");
    }
  }
  result = std_vector_Sl_VecFactor_Sg__erase__SWIG_1(arg1,arg2,arg3);
  _outv = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::vector< dai::TFactor< double >,std::allocator< dai::TFactor< double > > > >::iterator & >(result)),
    swig::OctSwigIterator::descriptor(),SWIG_POINTER_OWN);
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( VecVecFactor_erase, _wrap_VecVecFactor_erase, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[3]={
    octave_value_ref(args,0),octave_value_ref(args,1),octave_value_ref(args,2)
  };
  
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::vector< dai::TFactor< double >,std::allocator< dai::TFactor< double > > >,std::allocator< std::vector< dai::TFactor< double >,std::allocator< dai::TFactor< double > > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::OctSwigIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::OctSwigIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::OctSwigIterator_T<std::vector< std::vector< dai::TFactor< double >,std::allocator< dai::TFactor< double > > > >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_VecVecFactor_erase__SWIG_0(args, nargout);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::vector< dai::TFactor< double >,std::allocator< dai::TFactor< double > > >,std::allocator< std::vector< dai::TFactor< double >,std::allocator< dai::TFactor< double > > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::OctSwigIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::OctSwigIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::OctSwigIterator_T<std::vector< std::vector< dai::TFactor< double >,std::allocator< dai::TFactor< double > > > >::iterator > *>(iter) != 0));
      if (_v) {
        swig::OctSwigIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::OctSwigIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::OctSwigIterator_T<std::vector< std::vector< dai::TFactor< double >,std::allocator< dai::TFactor< double > > > >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_VecVecFactor_erase__SWIG_1(args, nargout);
        }
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


static octave_value_list _wrap_new_VecVecFactor__SWIG_3 (const octave_value_list& args, int nargout) {
  std::vector< std::vector< dai::TFactor< double >,std::allocator< dai::TFactor< double > > > >::size_type arg1 ;
  std::vector< std::vector< dai::TFactor< double >,std::allocator< dai::TFactor< double > > > >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  std::vector< VecFactor > *result = 0 ;
  
  if (!SWIG_check_num_args("new_VecVecFactor",args.length(),2,2,0)) {
    SWIG_fail;
  }
  ecode1 = SWIG_AsVal_size_t(args(0), &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_VecVecFactor" "', argument " "1"" of type '" "std::vector< std::vector< dai::TFactor< double >,std::allocator< dai::TFactor< double > > > >::size_type""'");
  } 
  arg1 = static_cast< std::vector< std::vector< dai::TFactor< double >,std::allocator< dai::TFactor< double > > > >::size_type >(val1);
  {
    std::vector< dai::TFactor< double >,std::allocator< dai::TFactor< double > > > *ptr = (std::vector< dai::TFactor< double >,std::allocator< dai::TFactor< double > > > *)0;
    res2 = swig::asptr(args(1), &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_VecVecFactor" "', argument " "2"" of type '" "std::vector< std::vector< dai::TFactor< double >,std::allocator< dai::TFactor< double > > > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_VecVecFactor" "', argument " "2"" of type '" "std::vector< std::vector< dai::TFactor< double >,std::allocator< dai::TFactor< double > > > >::value_type const &""'"); 
    }
    arg2 = ptr;
  }
  result = (std::vector< VecFactor > *)new std::vector< VecFactor >(arg1,(std::vector< std::vector< dai::TFactor< double >,std::allocator< dai::TFactor< double > > > >::value_type const &)*arg2);
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__vectorT_dai__Factor_std__allocatorT_dai__Factor_t_t_std__allocatorT_std__vectorT_dai__Factor_std__allocatorT_dai__Factor_t_t_t_t, 1 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  if (SWIG_IsNewObj(res2)) delete arg2;
  return _out;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return octave_value_list();
}


SWIG_DEFUN( new_VecVecFactor, _wrap_new_VecVecFactor, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[2]={
    octave_value_ref(args,0),octave_value_ref(args,1)
  };
  
  if (argc == 0) {
    return _wrap_new_VecVecFactor__SWIG_0(args, nargout);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_VecVecFactor__SWIG_2(args, nargout);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::vector< dai::TFactor< double >,std::allocator< dai::TFactor< double > > >,std::allocator< std::vector< dai::TFactor< double >,std::allocator< dai::TFactor< double > > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_VecVecFactor__SWIG_1(args, nargout);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = swig::asptr(argv[1], (std::vector< dai::TFactor< double >,std::allocator< dai::TFactor< double > > >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_VecVecFactor__SWIG_3(args, nargout);
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


SWIG_DEFUN( VecVecFactor_push_back, _wrap_VecVecFactor_push_back, std::string() ) {
  std::vector< VecFactor > *arg1 = (std::vector< VecFactor > *) 0 ;
  std::vector< std::vector< dai::TFactor< double >,std::allocator< dai::TFactor< double > > > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("VecVecFactor_push_back",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_dai__Factor_std__allocatorT_dai__Factor_t_t_std__allocatorT_std__vectorT_dai__Factor_std__allocatorT_dai__Factor_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecVecFactor_push_back" "', argument " "1"" of type '" "std::vector< VecFactor > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< VecFactor > * >(argp1);
  {
    std::vector< dai::TFactor< double >,std::allocator< dai::TFactor< double > > > *ptr = (std::vector< dai::TFactor< double >,std::allocator< dai::TFactor< double > > > *)0;
    res2 = swig::asptr(args(1), &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VecVecFactor_push_back" "', argument " "2"" of type '" "std::vector< std::vector< dai::TFactor< double >,std::allocator< dai::TFactor< double > > > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VecVecFactor_push_back" "', argument " "2"" of type '" "std::vector< std::vector< dai::TFactor< double >,std::allocator< dai::TFactor< double > > > >::value_type const &""'"); 
    }
    arg2 = ptr;
  }
  (arg1)->push_back((std::vector< std::vector< dai::TFactor< double >,std::allocator< dai::TFactor< double > > > >::value_type const &)*arg2);
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  if (SWIG_IsNewObj(res2)) delete arg2;
  return _out;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return octave_value_list();
}


SWIG_DEFUN( VecVecFactor_front, _wrap_VecVecFactor_front, std::string() ) {
  std::vector< VecFactor > *arg1 = (std::vector< VecFactor > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  std::vector< std::vector< dai::TFactor< double >,std::allocator< dai::TFactor< double > > > >::value_type *result = 0 ;
  
  if (!SWIG_check_num_args("VecVecFactor_front",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_dai__Factor_std__allocatorT_dai__Factor_t_t_std__allocatorT_std__vectorT_dai__Factor_std__allocatorT_dai__Factor_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecVecFactor_front" "', argument " "1"" of type '" "std::vector< VecFactor > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< VecFactor > * >(argp1);
  result = (std::vector< std::vector< dai::TFactor< double >,std::allocator< dai::TFactor< double > > > >::value_type *) &((std::vector< VecFactor > const *)arg1)->front();
  _outv = swig::from(static_cast< std::vector< dai::TFactor< double >,std::allocator< dai::TFactor< double > > > >(*result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( VecVecFactor_back, _wrap_VecVecFactor_back, std::string() ) {
  std::vector< VecFactor > *arg1 = (std::vector< VecFactor > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  std::vector< std::vector< dai::TFactor< double >,std::allocator< dai::TFactor< double > > > >::value_type *result = 0 ;
  
  if (!SWIG_check_num_args("VecVecFactor_back",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_dai__Factor_std__allocatorT_dai__Factor_t_t_std__allocatorT_std__vectorT_dai__Factor_std__allocatorT_dai__Factor_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecVecFactor_back" "', argument " "1"" of type '" "std::vector< VecFactor > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< VecFactor > * >(argp1);
  result = (std::vector< std::vector< dai::TFactor< double >,std::allocator< dai::TFactor< double > > > >::value_type *) &((std::vector< VecFactor > const *)arg1)->back();
  _outv = swig::from(static_cast< std::vector< dai::TFactor< double >,std::allocator< dai::TFactor< double > > > >(*result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( VecVecFactor_assign, _wrap_VecVecFactor_assign, std::string() ) {
  std::vector< VecFactor > *arg1 = (std::vector< VecFactor > *) 0 ;
  std::vector< std::vector< dai::TFactor< double >,std::allocator< dai::TFactor< double > > > >::size_type arg2 ;
  std::vector< std::vector< dai::TFactor< double >,std::allocator< dai::TFactor< double > > > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("VecVecFactor_assign",args.length(),3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_dai__Factor_std__allocatorT_dai__Factor_t_t_std__allocatorT_std__vectorT_dai__Factor_std__allocatorT_dai__Factor_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecVecFactor_assign" "', argument " "1"" of type '" "std::vector< VecFactor > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< VecFactor > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VecVecFactor_assign" "', argument " "2"" of type '" "std::vector< std::vector< dai::TFactor< double >,std::allocator< dai::TFactor< double > > > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< dai::TFactor< double >,std::allocator< dai::TFactor< double > > > >::size_type >(val2);
  {
    std::vector< dai::TFactor< double >,std::allocator< dai::TFactor< double > > > *ptr = (std::vector< dai::TFactor< double >,std::allocator< dai::TFactor< double > > > *)0;
    res3 = swig::asptr(args(2), &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VecVecFactor_assign" "', argument " "3"" of type '" "std::vector< std::vector< dai::TFactor< double >,std::allocator< dai::TFactor< double > > > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VecVecFactor_assign" "', argument " "3"" of type '" "std::vector< std::vector< dai::TFactor< double >,std::allocator< dai::TFactor< double > > > >::value_type const &""'"); 
    }
    arg3 = ptr;
  }
  (arg1)->assign(arg2,(std::vector< std::vector< dai::TFactor< double >,std::allocator< dai::TFactor< double > > > >::value_type const &)*arg3);
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  if (SWIG_IsNewObj(res3)) delete arg3;
  return _out;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return octave_value_list();
}


static octave_value_list _wrap_VecVecFactor_resize__SWIG_1 (const octave_value_list& args, int nargout) {
  std::vector< VecFactor > *arg1 = (std::vector< VecFactor > *) 0 ;
  std::vector< std::vector< dai::TFactor< double >,std::allocator< dai::TFactor< double > > > >::size_type arg2 ;
  std::vector< std::vector< dai::TFactor< double >,std::allocator< dai::TFactor< double > > > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("VecVecFactor_resize",args.length(),3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_dai__Factor_std__allocatorT_dai__Factor_t_t_std__allocatorT_std__vectorT_dai__Factor_std__allocatorT_dai__Factor_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecVecFactor_resize" "', argument " "1"" of type '" "std::vector< VecFactor > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< VecFactor > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VecVecFactor_resize" "', argument " "2"" of type '" "std::vector< std::vector< dai::TFactor< double >,std::allocator< dai::TFactor< double > > > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< dai::TFactor< double >,std::allocator< dai::TFactor< double > > > >::size_type >(val2);
  {
    std::vector< dai::TFactor< double >,std::allocator< dai::TFactor< double > > > *ptr = (std::vector< dai::TFactor< double >,std::allocator< dai::TFactor< double > > > *)0;
    res3 = swig::asptr(args(2), &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VecVecFactor_resize" "', argument " "3"" of type '" "std::vector< std::vector< dai::TFactor< double >,std::allocator< dai::TFactor< double > > > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VecVecFactor_resize" "', argument " "3"" of type '" "std::vector< std::vector< dai::TFactor< double >,std::allocator< dai::TFactor< double > > > >::value_type const &""'"); 
    }
    arg3 = ptr;
  }
  (arg1)->resize(arg2,(std::vector< std::vector< dai::TFactor< double >,std::allocator< dai::TFactor< double > > > >::value_type const &)*arg3);
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  if (SWIG_IsNewObj(res3)) delete arg3;
  return _out;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return octave_value_list();
}


SWIG_DEFUN( VecVecFactor_resize, _wrap_VecVecFactor_resize, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[3]={
    octave_value_ref(args,0),octave_value_ref(args,1),octave_value_ref(args,2)
  };
  
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::vector< dai::TFactor< double >,std::allocator< dai::TFactor< double > > >,std::allocator< std::vector< dai::TFactor< double >,std::allocator< dai::TFactor< double > > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_VecVecFactor_resize__SWIG_0(args, nargout);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::vector< dai::TFactor< double >,std::allocator< dai::TFactor< double > > >,std::allocator< std::vector< dai::TFactor< double >,std::allocator< dai::TFactor< double > > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector< dai::TFactor< double >,std::allocator< dai::TFactor< double > > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_VecVecFactor_resize__SWIG_1(args, nargout);
        }
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


static octave_value_list _wrap_VecVecFactor_insert__SWIG_0 (const octave_value_list& args, int nargout) {
  std::vector< VecFactor > *arg1 = (std::vector< VecFactor > *) 0 ;
  SwigValueWrapper< std::vector< std::vector< dai::TFactor< double >,std::allocator< dai::TFactor< double > > > >::iterator > arg2 ;
  std::vector< std::vector< dai::TFactor< double >,std::allocator< dai::TFactor< double > > > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::OctSwigIterator *iter2 = 0 ;
  int res2 ;
  int res3 = SWIG_OLDOBJ ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  SwigValueWrapper< std::vector< std::vector< dai::TFactor< double >,std::allocator< dai::TFactor< double > > > >::iterator > result;
  
  if (!SWIG_check_num_args("VecVecFactor_insert",args.length(),3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_dai__Factor_std__allocatorT_dai__Factor_t_t_std__allocatorT_std__vectorT_dai__Factor_std__allocatorT_dai__Factor_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecVecFactor_insert" "', argument " "1"" of type '" "std::vector< VecFactor > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< VecFactor > * >(argp1);
  res2 = SWIG_ConvertPtr(args(1), SWIG_as_voidptrptr(&iter2), swig::OctSwigIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VecVecFactor_insert" "', argument " "2"" of type '" "std::vector< std::vector< dai::TFactor< double >,std::allocator< dai::TFactor< double > > > >::iterator""'");
  } else {
    swig::OctSwigIterator_T<std::vector< std::vector< dai::TFactor< double >,std::allocator< dai::TFactor< double > > > >::iterator > *iter_t = dynamic_cast<swig::OctSwigIterator_T<std::vector< std::vector< dai::TFactor< double >,std::allocator< dai::TFactor< double > > > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VecVecFactor_insert" "', argument " "2"" of type '" "std::vector< std::vector< dai::TFactor< double >,std::allocator< dai::TFactor< double > > > >::iterator""'");
    }
  }
  {
    std::vector< dai::TFactor< double >,std::allocator< dai::TFactor< double > > > *ptr = (std::vector< dai::TFactor< double >,std::allocator< dai::TFactor< double > > > *)0;
    res3 = swig::asptr(args(2), &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VecVecFactor_insert" "', argument " "3"" of type '" "std::vector< std::vector< dai::TFactor< double >,std::allocator< dai::TFactor< double > > > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VecVecFactor_insert" "', argument " "3"" of type '" "std::vector< std::vector< dai::TFactor< double >,std::allocator< dai::TFactor< double > > > >::value_type const &""'"); 
    }
    arg3 = ptr;
  }
  result = std_vector_Sl_VecFactor_Sg__insert__SWIG_0(arg1,arg2,(std::vector< dai::TFactor< double >,std::allocator< dai::TFactor< double > > > const &)*arg3);
  _outv = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::vector< dai::TFactor< double >,std::allocator< dai::TFactor< double > > > >::iterator & >(result)),
    swig::OctSwigIterator::descriptor(),SWIG_POINTER_OWN);
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  if (SWIG_IsNewObj(res3)) delete arg3;
  return _out;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return octave_value_list();
}


static octave_value_list _wrap_VecVecFactor_insert__SWIG_1 (const octave_value_list& args, int nargout) {
  std::vector< VecFactor > *arg1 = (std::vector< VecFactor > *) 0 ;
  SwigValueWrapper< std::vector< std::vector< dai::TFactor< double >,std::allocator< dai::TFactor< double > > > >::iterator > arg2 ;
  std::vector< std::vector< dai::TFactor< double >,std::allocator< dai::TFactor< double > > > >::size_type arg3 ;
  std::vector< std::vector< dai::TFactor< double >,std::allocator< dai::TFactor< double > > > >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::OctSwigIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("VecVecFactor_insert",args.length(),4,4,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_dai__Factor_std__allocatorT_dai__Factor_t_t_std__allocatorT_std__vectorT_dai__Factor_std__allocatorT_dai__Factor_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecVecFactor_insert" "', argument " "1"" of type '" "std::vector< VecFactor > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< VecFactor > * >(argp1);
  res2 = SWIG_ConvertPtr(args(1), SWIG_as_voidptrptr(&iter2), swig::OctSwigIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VecVecFactor_insert" "', argument " "2"" of type '" "std::vector< std::vector< dai::TFactor< double >,std::allocator< dai::TFactor< double > > > >::iterator""'");
  } else {
    swig::OctSwigIterator_T<std::vector< std::vector< dai::TFactor< double >,std::allocator< dai::TFactor< double > > > >::iterator > *iter_t = dynamic_cast<swig::OctSwigIterator_T<std::vector< std::vector< dai::TFactor< double >,std::allocator< dai::TFactor< double > > > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VecVecFactor_insert" "', argument " "2"" of type '" "std::vector< std::vector< dai::TFactor< double >,std::allocator< dai::TFactor< double > > > >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(args(2), &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VecVecFactor_insert" "', argument " "3"" of type '" "std::vector< std::vector< dai::TFactor< double >,std::allocator< dai::TFactor< double > > > >::size_type""'");
  } 
  arg3 = static_cast< std::vector< std::vector< dai::TFactor< double >,std::allocator< dai::TFactor< double > > > >::size_type >(val3);
  {
    std::vector< dai::TFactor< double >,std::allocator< dai::TFactor< double > > > *ptr = (std::vector< dai::TFactor< double >,std::allocator< dai::TFactor< double > > > *)0;
    res4 = swig::asptr(args(3), &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "VecVecFactor_insert" "', argument " "4"" of type '" "std::vector< std::vector< dai::TFactor< double >,std::allocator< dai::TFactor< double > > > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VecVecFactor_insert" "', argument " "4"" of type '" "std::vector< std::vector< dai::TFactor< double >,std::allocator< dai::TFactor< double > > > >::value_type const &""'"); 
    }
    arg4 = ptr;
  }
  std_vector_Sl_VecFactor_Sg__insert__SWIG_1(arg1,arg2,arg3,(std::vector< dai::TFactor< double >,std::allocator< dai::TFactor< double > > > const &)*arg4);
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  if (SWIG_IsNewObj(res4)) delete arg4;
  return _out;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return octave_value_list();
}


SWIG_DEFUN( VecVecFactor_insert, _wrap_VecVecFactor_insert, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[4]={
    octave_value_ref(args,0),octave_value_ref(args,1),octave_value_ref(args,2),octave_value_ref(args,3)
  };
  
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::vector< dai::TFactor< double >,std::allocator< dai::TFactor< double > > >,std::allocator< std::vector< dai::TFactor< double >,std::allocator< dai::TFactor< double > > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::OctSwigIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::OctSwigIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::OctSwigIterator_T<std::vector< std::vector< dai::TFactor< double >,std::allocator< dai::TFactor< double > > > >::iterator > *>(iter) != 0));
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector< dai::TFactor< double >,std::allocator< dai::TFactor< double > > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_VecVecFactor_insert__SWIG_0(args, nargout);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::vector< dai::TFactor< double >,std::allocator< dai::TFactor< double > > >,std::allocator< std::vector< dai::TFactor< double >,std::allocator< dai::TFactor< double > > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::OctSwigIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::OctSwigIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::OctSwigIterator_T<std::vector< std::vector< dai::TFactor< double >,std::allocator< dai::TFactor< double > > > >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector< dai::TFactor< double >,std::allocator< dai::TFactor< double > > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_VecVecFactor_insert__SWIG_1(args, nargout);
          }
        }
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


SWIG_DEFUN( VecVecFactor_reserve, _wrap_VecVecFactor_reserve, std::string() ) {
  std::vector< VecFactor > *arg1 = (std::vector< VecFactor > *) 0 ;
  std::vector< std::vector< dai::TFactor< double >,std::allocator< dai::TFactor< double > > > >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("VecVecFactor_reserve",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_dai__Factor_std__allocatorT_dai__Factor_t_t_std__allocatorT_std__vectorT_dai__Factor_std__allocatorT_dai__Factor_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecVecFactor_reserve" "', argument " "1"" of type '" "std::vector< VecFactor > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< VecFactor > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VecVecFactor_reserve" "', argument " "2"" of type '" "std::vector< std::vector< dai::TFactor< double >,std::allocator< dai::TFactor< double > > > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< dai::TFactor< double >,std::allocator< dai::TFactor< double > > > >::size_type >(val2);
  (arg1)->reserve(arg2);
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( VecVecFactor_capacity, _wrap_VecVecFactor_capacity, std::string() ) {
  std::vector< VecFactor > *arg1 = (std::vector< VecFactor > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  std::vector< std::vector< dai::TFactor< double >,std::allocator< dai::TFactor< double > > > >::size_type result;
  
  if (!SWIG_check_num_args("VecVecFactor_capacity",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_dai__Factor_std__allocatorT_dai__Factor_t_t_std__allocatorT_std__vectorT_dai__Factor_std__allocatorT_dai__Factor_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecVecFactor_capacity" "', argument " "1"" of type '" "std::vector< VecFactor > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< VecFactor > * >(argp1);
  result = ((std::vector< VecFactor > const *)arg1)->capacity();
  _outv = SWIG_From_size_t(static_cast< size_t >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( delete_VecVecFactor, _wrap_delete_VecVecFactor, std::string() ) {
  std::vector< VecFactor > *arg1 = (std::vector< VecFactor > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("delete_VecVecFactor",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_dai__Factor_std__allocatorT_dai__Factor_t_t_std__allocatorT_std__vectorT_dai__Factor_std__allocatorT_dai__Factor_t_t_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_VecVecFactor" "', argument " "1"" of type '" "std::vector< VecFactor > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< VecFactor > * >(argp1);
  delete arg1;
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static swig_octave_member swig_VecVecFactor_members[] = {
{"pop",_wrap_VecVecFactor_pop,0,0,0,0},
{"__paren__",_wrap_VecVecFactor___paren__,0,0,0,0},
{"__paren_asgn__",_wrap_VecVecFactor___paren_asgn__,0,0,0,0},
{"append",_wrap_VecVecFactor_append,0,0,0,0},
{"empty",_wrap_VecVecFactor_empty,0,0,0,0},
{"size",_wrap_VecVecFactor_size,0,0,0,0},
{"swap",_wrap_VecVecFactor_swap,0,0,0,0},
{"begin",_wrap_VecVecFactor_begin,0,0,0,0},
{"end",_wrap_VecVecFactor_end,0,0,0,0},
{"rbegin",_wrap_VecVecFactor_rbegin,0,0,0,0},
{"rend",_wrap_VecVecFactor_rend,0,0,0,0},
{"clear",_wrap_VecVecFactor_clear,0,0,0,0},
{"get_allocator",_wrap_VecVecFactor_get_allocator,0,0,0,0},
{"pop_back",_wrap_VecVecFactor_pop_back,0,0,0,0},
{"erase",_wrap_VecVecFactor_erase,0,0,0,0},
{"push_back",_wrap_VecVecFactor_push_back,0,0,0,0},
{"front",_wrap_VecVecFactor_front,0,0,0,0},
{"back",_wrap_VecVecFactor_back,0,0,0,0},
{"assign",_wrap_VecVecFactor_assign,0,0,0,0},
{"resize",_wrap_VecVecFactor_resize,0,0,0,0},
{"insert",_wrap_VecVecFactor_insert,0,0,0,0},
{"reserve",_wrap_VecVecFactor_reserve,0,0,0,0},
{"capacity",_wrap_VecVecFactor_capacity,0,0,0,0},
{0,0,0,0,0,0}
};
static const char *swig_VecVecFactor_base_names[] = {0};
static const swig_type_info *swig_VecVecFactor_base[] = {0};
static swig_octave_class _wrap_class_VecVecFactor = {"VecVecFactor", &SWIGTYPE_p_std__vectorT_std__vectorT_dai__Factor_std__allocatorT_dai__Factor_t_t_std__allocatorT_std__vectorT_dai__Factor_std__allocatorT_dai__Factor_t_t_t_t,0,_wrap_new_VecVecFactor,0,_wrap_delete_VecVecFactor,swig_VecVecFactor_members,swig_VecVecFactor_base_names,swig_VecVecFactor_base };

SWIG_DEFUN( Neighbor_iter_set, _wrap_Neighbor_iter_set, std::string() ) {
  dai::Neighbor *arg1 = (dai::Neighbor *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("Neighbor_iter_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__Neighbor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Neighbor_iter_set" "', argument " "1"" of type '" "dai::Neighbor *""'"); 
  }
  arg1 = reinterpret_cast< dai::Neighbor * >(argp1);
  ecode2 = SWIG_AsVal_size_t(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Neighbor_iter_set" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  if (arg1) (arg1)->iter = arg2;
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( Neighbor_iter_get, _wrap_Neighbor_iter_get, std::string() ) {
  dai::Neighbor *arg1 = (dai::Neighbor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  size_t result;
  
  if (!SWIG_check_num_args("Neighbor_iter_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__Neighbor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Neighbor_iter_get" "', argument " "1"" of type '" "dai::Neighbor *""'"); 
  }
  arg1 = reinterpret_cast< dai::Neighbor * >(argp1);
  result =  ((arg1)->iter);
  _outv = SWIG_From_size_t(static_cast< size_t >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( Neighbor_node_set, _wrap_Neighbor_node_set, std::string() ) {
  dai::Neighbor *arg1 = (dai::Neighbor *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("Neighbor_node_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__Neighbor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Neighbor_node_set" "', argument " "1"" of type '" "dai::Neighbor *""'"); 
  }
  arg1 = reinterpret_cast< dai::Neighbor * >(argp1);
  ecode2 = SWIG_AsVal_size_t(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Neighbor_node_set" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  if (arg1) (arg1)->node = arg2;
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( Neighbor_node_get, _wrap_Neighbor_node_get, std::string() ) {
  dai::Neighbor *arg1 = (dai::Neighbor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  size_t result;
  
  if (!SWIG_check_num_args("Neighbor_node_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__Neighbor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Neighbor_node_get" "', argument " "1"" of type '" "dai::Neighbor *""'"); 
  }
  arg1 = reinterpret_cast< dai::Neighbor * >(argp1);
  result =  ((arg1)->node);
  _outv = SWIG_From_size_t(static_cast< size_t >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( Neighbor_dual_set, _wrap_Neighbor_dual_set, std::string() ) {
  dai::Neighbor *arg1 = (dai::Neighbor *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("Neighbor_dual_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__Neighbor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Neighbor_dual_set" "', argument " "1"" of type '" "dai::Neighbor *""'"); 
  }
  arg1 = reinterpret_cast< dai::Neighbor * >(argp1);
  ecode2 = SWIG_AsVal_size_t(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Neighbor_dual_set" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  if (arg1) (arg1)->dual = arg2;
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( Neighbor_dual_get, _wrap_Neighbor_dual_get, std::string() ) {
  dai::Neighbor *arg1 = (dai::Neighbor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  size_t result;
  
  if (!SWIG_check_num_args("Neighbor_dual_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__Neighbor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Neighbor_dual_get" "', argument " "1"" of type '" "dai::Neighbor *""'"); 
  }
  arg1 = reinterpret_cast< dai::Neighbor * >(argp1);
  result =  ((arg1)->dual);
  _outv = SWIG_From_size_t(static_cast< size_t >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static octave_value_list _wrap_new_Neighbor__SWIG_0 (const octave_value_list& args, int nargout) {
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::Neighbor *result = 0 ;
  
  if (!SWIG_check_num_args("new_Neighbor",args.length(),0,0,0)) {
    SWIG_fail;
  }
  result = (dai::Neighbor *)new dai::Neighbor();
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dai__Neighbor, 1 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static octave_value_list _wrap_new_Neighbor__SWIG_1 (const octave_value_list& args, int nargout) {
  size_t arg1 ;
  size_t arg2 ;
  size_t arg3 ;
  size_t val1 ;
  int ecode1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::Neighbor *result = 0 ;
  
  if (!SWIG_check_num_args("new_Neighbor",args.length(),3,3,0)) {
    SWIG_fail;
  }
  ecode1 = SWIG_AsVal_size_t(args(0), &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Neighbor" "', argument " "1"" of type '" "size_t""'");
  } 
  arg1 = static_cast< size_t >(val1);
  ecode2 = SWIG_AsVal_size_t(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Neighbor" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  ecode3 = SWIG_AsVal_size_t(args(2), &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_Neighbor" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  result = (dai::Neighbor *)new dai::Neighbor(arg1,arg2,arg3);
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dai__Neighbor, 1 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( new_Neighbor, _wrap_new_Neighbor, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[3]={
    octave_value_ref(args,0),octave_value_ref(args,1),octave_value_ref(args,2)
  };
  
  if (argc == 0) {
    return _wrap_new_Neighbor__SWIG_0(args, nargout);
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_Neighbor__SWIG_1(args, nargout);
        }
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


SWIG_DEFUN( Neighbor_toInt, _wrap_Neighbor_toInt, std::string() ) {
  dai::Neighbor *arg1 = (dai::Neighbor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  size_t result;
  
  if (!SWIG_check_num_args("Neighbor_toInt",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__Neighbor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Neighbor_toInt" "', argument " "1"" of type '" "dai::Neighbor const *""'"); 
  }
  arg1 = reinterpret_cast< dai::Neighbor * >(argp1);
  result = ((dai::Neighbor const *)arg1)->operator size_t();
  _outv = SWIG_From_size_t(static_cast< size_t >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( delete_Neighbor, _wrap_delete_Neighbor, std::string() ) {
  dai::Neighbor *arg1 = (dai::Neighbor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("delete_Neighbor",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__Neighbor, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Neighbor" "', argument " "1"" of type '" "dai::Neighbor *""'"); 
  }
  arg1 = reinterpret_cast< dai::Neighbor * >(argp1);
  delete arg1;
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static swig_octave_member swig_Neighbor_members[] = {
{"iter",0,_wrap_Neighbor_iter_get,_wrap_Neighbor_iter_set,0,0},
{"node",0,_wrap_Neighbor_node_get,_wrap_Neighbor_node_set,0,0},
{"dual",0,_wrap_Neighbor_dual_get,_wrap_Neighbor_dual_set,0,0},
{"toInt",_wrap_Neighbor_toInt,0,0,0,0},
{0,0,0,0,0,0}
};
static const char *swig_Neighbor_base_names[] = {0};
static const swig_type_info *swig_Neighbor_base[] = {0};
static swig_octave_class _wrap_class_Neighbor = {"Neighbor", &SWIGTYPE_p_dai__Neighbor,0,_wrap_new_Neighbor,0,_wrap_delete_Neighbor,swig_Neighbor_members,swig_Neighbor_base_names,swig_Neighbor_base };

static octave_value_list _wrap_new_GraphAL__SWIG_0 (const octave_value_list& args, int nargout) {
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::GraphAL *result = 0 ;
  
  if (!SWIG_check_num_args("new_GraphAL",args.length(),0,0,0)) {
    SWIG_fail;
  }
  result = (dai::GraphAL *)new dai::GraphAL();
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dai__GraphAL, 1 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static octave_value_list _wrap_new_GraphAL__SWIG_1 (const octave_value_list& args, int nargout) {
  size_t arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::GraphAL *result = 0 ;
  
  if (!SWIG_check_num_args("new_GraphAL",args.length(),1,1,0)) {
    SWIG_fail;
  }
  ecode1 = SWIG_AsVal_size_t(args(0), &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_GraphAL" "', argument " "1"" of type '" "size_t""'");
  } 
  arg1 = static_cast< size_t >(val1);
  result = (dai::GraphAL *)new dai::GraphAL(arg1);
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dai__GraphAL, 1 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( new_GraphAL, _wrap_new_GraphAL, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[1]={
    octave_value_ref(args,0)
  };
  
  if (argc == 0) {
    return _wrap_new_GraphAL__SWIG_0(args, nargout);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_GraphAL__SWIG_1(args, nargout);
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


static octave_value_list _wrap_GraphAL_nb__SWIG_0 (const octave_value_list& args, int nargout) {
  dai::GraphAL *arg1 = (dai::GraphAL *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::Neighbor *result = 0 ;
  
  if (!SWIG_check_num_args("GraphAL_nb",args.length(),3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__GraphAL, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GraphAL_nb" "', argument " "1"" of type '" "dai::GraphAL const *""'"); 
  }
  arg1 = reinterpret_cast< dai::GraphAL * >(argp1);
  ecode2 = SWIG_AsVal_size_t(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GraphAL_nb" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  ecode3 = SWIG_AsVal_size_t(args(2), &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "GraphAL_nb" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  result = (dai::Neighbor *) &((dai::GraphAL const *)arg1)->nb(arg2,arg3);
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dai__Neighbor, 0 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static octave_value_list _wrap_GraphAL_nb__SWIG_1 (const octave_value_list& args, int nargout) {
  dai::GraphAL *arg1 = (dai::GraphAL *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::Neighbor *result = 0 ;
  
  if (!SWIG_check_num_args("GraphAL_nb",args.length(),3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__GraphAL, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GraphAL_nb" "', argument " "1"" of type '" "dai::GraphAL *""'"); 
  }
  arg1 = reinterpret_cast< dai::GraphAL * >(argp1);
  ecode2 = SWIG_AsVal_size_t(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GraphAL_nb" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  ecode3 = SWIG_AsVal_size_t(args(2), &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "GraphAL_nb" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  result = (dai::Neighbor *) &(arg1)->nb(arg2,arg3);
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dai__Neighbor, 0 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static octave_value_list _wrap_GraphAL_nb__SWIG_2 (const octave_value_list& args, int nargout) {
  dai::GraphAL *arg1 = (dai::GraphAL *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::Neighbors *result = 0 ;
  
  if (!SWIG_check_num_args("GraphAL_nb",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__GraphAL, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GraphAL_nb" "', argument " "1"" of type '" "dai::GraphAL const *""'"); 
  }
  arg1 = reinterpret_cast< dai::GraphAL * >(argp1);
  ecode2 = SWIG_AsVal_size_t(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GraphAL_nb" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  result = (dai::Neighbors *) &((dai::GraphAL const *)arg1)->nb(arg2);
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_dai__Neighbor_std__allocatorT_dai__Neighbor_t_t, 0 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static octave_value_list _wrap_GraphAL_nb__SWIG_3 (const octave_value_list& args, int nargout) {
  dai::GraphAL *arg1 = (dai::GraphAL *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::Neighbors *result = 0 ;
  
  if (!SWIG_check_num_args("GraphAL_nb",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__GraphAL, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GraphAL_nb" "', argument " "1"" of type '" "dai::GraphAL *""'"); 
  }
  arg1 = reinterpret_cast< dai::GraphAL * >(argp1);
  ecode2 = SWIG_AsVal_size_t(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GraphAL_nb" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  result = (dai::Neighbors *) &(arg1)->nb(arg2);
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_dai__Neighbor_std__allocatorT_dai__Neighbor_t_t, 0 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( GraphAL_nb, _wrap_GraphAL_nb, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[3]={
    octave_value_ref(args,0),octave_value_ref(args,1),octave_value_ref(args,2)
  };
  
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dai__GraphAL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_GraphAL_nb__SWIG_3(args, nargout);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dai__GraphAL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_GraphAL_nb__SWIG_2(args, nargout);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dai__GraphAL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_GraphAL_nb__SWIG_1(args, nargout);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dai__GraphAL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_GraphAL_nb__SWIG_0(args, nargout);
        }
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


SWIG_DEFUN( GraphAL_addNode, _wrap_GraphAL_addNode, std::string() ) {
  dai::GraphAL *arg1 = (dai::GraphAL *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  size_t result;
  
  if (!SWIG_check_num_args("GraphAL_addNode",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__GraphAL, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GraphAL_addNode" "', argument " "1"" of type '" "dai::GraphAL *""'"); 
  }
  arg1 = reinterpret_cast< dai::GraphAL * >(argp1);
  result = (arg1)->addNode();
  _outv = SWIG_From_size_t(static_cast< size_t >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static octave_value_list _wrap_GraphAL_addEdge__SWIG_0 (const octave_value_list& args, int nargout) {
  dai::GraphAL *arg1 = (dai::GraphAL *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  bool arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::GraphAL *result = 0 ;
  
  if (!SWIG_check_num_args("GraphAL_addEdge",args.length(),4,4,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__GraphAL, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GraphAL_addEdge" "', argument " "1"" of type '" "dai::GraphAL *""'"); 
  }
  arg1 = reinterpret_cast< dai::GraphAL * >(argp1);
  ecode2 = SWIG_AsVal_size_t(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GraphAL_addEdge" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  ecode3 = SWIG_AsVal_size_t(args(2), &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "GraphAL_addEdge" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  ecode4 = SWIG_AsVal_bool(args(3), &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "GraphAL_addEdge" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  result = (dai::GraphAL *) &(arg1)->addEdge(arg2,arg3,arg4);
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dai__GraphAL, 0 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static octave_value_list _wrap_GraphAL_addEdge__SWIG_1 (const octave_value_list& args, int nargout) {
  dai::GraphAL *arg1 = (dai::GraphAL *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::GraphAL *result = 0 ;
  
  if (!SWIG_check_num_args("GraphAL_addEdge",args.length(),3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__GraphAL, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GraphAL_addEdge" "', argument " "1"" of type '" "dai::GraphAL *""'"); 
  }
  arg1 = reinterpret_cast< dai::GraphAL * >(argp1);
  ecode2 = SWIG_AsVal_size_t(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GraphAL_addEdge" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  ecode3 = SWIG_AsVal_size_t(args(2), &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "GraphAL_addEdge" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  result = (dai::GraphAL *) &(arg1)->addEdge(arg2,arg3);
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dai__GraphAL, 0 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( GraphAL_addEdge, _wrap_GraphAL_addEdge, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[4]={
    octave_value_ref(args,0),octave_value_ref(args,1),octave_value_ref(args,2),octave_value_ref(args,3)
  };
  
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dai__GraphAL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_GraphAL_addEdge__SWIG_1(args, nargout);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dai__GraphAL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_GraphAL_addEdge__SWIG_0(args, nargout);
          }
        }
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


SWIG_DEFUN( GraphAL_eraseNode, _wrap_GraphAL_eraseNode, std::string() ) {
  dai::GraphAL *arg1 = (dai::GraphAL *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("GraphAL_eraseNode",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__GraphAL, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GraphAL_eraseNode" "', argument " "1"" of type '" "dai::GraphAL *""'"); 
  }
  arg1 = reinterpret_cast< dai::GraphAL * >(argp1);
  ecode2 = SWIG_AsVal_size_t(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GraphAL_eraseNode" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  (arg1)->eraseNode(arg2);
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( GraphAL_eraseEdge, _wrap_GraphAL_eraseEdge, std::string() ) {
  dai::GraphAL *arg1 = (dai::GraphAL *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("GraphAL_eraseEdge",args.length(),3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__GraphAL, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GraphAL_eraseEdge" "', argument " "1"" of type '" "dai::GraphAL *""'"); 
  }
  arg1 = reinterpret_cast< dai::GraphAL * >(argp1);
  ecode2 = SWIG_AsVal_size_t(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GraphAL_eraseEdge" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  ecode3 = SWIG_AsVal_size_t(args(2), &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "GraphAL_eraseEdge" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  (arg1)->eraseEdge(arg2,arg3);
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( GraphAL_nrNodes, _wrap_GraphAL_nrNodes, std::string() ) {
  dai::GraphAL *arg1 = (dai::GraphAL *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  size_t result;
  
  if (!SWIG_check_num_args("GraphAL_nrNodes",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__GraphAL, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GraphAL_nrNodes" "', argument " "1"" of type '" "dai::GraphAL const *""'"); 
  }
  arg1 = reinterpret_cast< dai::GraphAL * >(argp1);
  result = ((dai::GraphAL const *)arg1)->nrNodes();
  _outv = SWIG_From_size_t(static_cast< size_t >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( GraphAL_nrEdges, _wrap_GraphAL_nrEdges, std::string() ) {
  dai::GraphAL *arg1 = (dai::GraphAL *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  size_t result;
  
  if (!SWIG_check_num_args("GraphAL_nrEdges",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__GraphAL, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GraphAL_nrEdges" "', argument " "1"" of type '" "dai::GraphAL const *""'"); 
  }
  arg1 = reinterpret_cast< dai::GraphAL * >(argp1);
  result = ((dai::GraphAL const *)arg1)->nrEdges();
  _outv = SWIG_From_size_t(static_cast< size_t >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( GraphAL_hasEdge, _wrap_GraphAL_hasEdge, std::string() ) {
  dai::GraphAL *arg1 = (dai::GraphAL *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  bool result;
  
  if (!SWIG_check_num_args("GraphAL_hasEdge",args.length(),3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__GraphAL, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GraphAL_hasEdge" "', argument " "1"" of type '" "dai::GraphAL const *""'"); 
  }
  arg1 = reinterpret_cast< dai::GraphAL * >(argp1);
  ecode2 = SWIG_AsVal_size_t(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GraphAL_hasEdge" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  ecode3 = SWIG_AsVal_size_t(args(2), &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "GraphAL_hasEdge" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  result = (bool)((dai::GraphAL const *)arg1)->hasEdge(arg2,arg3);
  _outv = SWIG_From_bool(static_cast< bool >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( GraphAL_findNb, _wrap_GraphAL_findNb, std::string() ) {
  dai::GraphAL *arg1 = (dai::GraphAL *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  size_t result;
  
  if (!SWIG_check_num_args("GraphAL_findNb",args.length(),3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__GraphAL, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GraphAL_findNb" "', argument " "1"" of type '" "dai::GraphAL *""'"); 
  }
  arg1 = reinterpret_cast< dai::GraphAL * >(argp1);
  ecode2 = SWIG_AsVal_size_t(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GraphAL_findNb" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  ecode3 = SWIG_AsVal_size_t(args(2), &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "GraphAL_findNb" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  result = (arg1)->findNb(arg2,arg3);
  _outv = SWIG_From_size_t(static_cast< size_t >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( GraphAL_nbSet, _wrap_GraphAL_nbSet, std::string() ) {
  dai::GraphAL *arg1 = (dai::GraphAL *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  SwigValueWrapper< dai::SmallSet< size_t > > result;
  
  if (!SWIG_check_num_args("GraphAL_nbSet",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__GraphAL, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GraphAL_nbSet" "', argument " "1"" of type '" "dai::GraphAL const *""'"); 
  }
  arg1 = reinterpret_cast< dai::GraphAL * >(argp1);
  ecode2 = SWIG_AsVal_size_t(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GraphAL_nbSet" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  result = ((dai::GraphAL const *)arg1)->nbSet(arg2);
  _outv = SWIG_NewPointerObj((new dai::SmallSet< size_t >(static_cast< const dai::SmallSet< size_t >& >(result))), SWIGTYPE_p_dai__SmallSetT_size_t_t, SWIG_POINTER_OWN |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( GraphAL_isConnected, _wrap_GraphAL_isConnected, std::string() ) {
  dai::GraphAL *arg1 = (dai::GraphAL *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  bool result;
  
  if (!SWIG_check_num_args("GraphAL_isConnected",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__GraphAL, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GraphAL_isConnected" "', argument " "1"" of type '" "dai::GraphAL const *""'"); 
  }
  arg1 = reinterpret_cast< dai::GraphAL * >(argp1);
  result = (bool)((dai::GraphAL const *)arg1)->isConnected();
  _outv = SWIG_From_bool(static_cast< bool >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( GraphAL_isTree, _wrap_GraphAL_isTree, std::string() ) {
  dai::GraphAL *arg1 = (dai::GraphAL *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  bool result;
  
  if (!SWIG_check_num_args("GraphAL_isTree",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__GraphAL, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GraphAL_isTree" "', argument " "1"" of type '" "dai::GraphAL const *""'"); 
  }
  arg1 = reinterpret_cast< dai::GraphAL * >(argp1);
  result = (bool)((dai::GraphAL const *)arg1)->isTree();
  _outv = SWIG_From_bool(static_cast< bool >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( GraphAL_checkConsistency, _wrap_GraphAL_checkConsistency, std::string() ) {
  dai::GraphAL *arg1 = (dai::GraphAL *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("GraphAL_checkConsistency",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__GraphAL, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GraphAL_checkConsistency" "', argument " "1"" of type '" "dai::GraphAL const *""'"); 
  }
  arg1 = reinterpret_cast< dai::GraphAL * >(argp1);
  ((dai::GraphAL const *)arg1)->checkConsistency();
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( GraphAL___eq__, _wrap_GraphAL___eq__, std::string() ) {
  dai::GraphAL *arg1 = (dai::GraphAL *) 0 ;
  dai::GraphAL *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  bool result;
  
  if (!SWIG_check_num_args("GraphAL___eq__",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__GraphAL, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GraphAL___eq__" "', argument " "1"" of type '" "dai::GraphAL const *""'"); 
  }
  arg1 = reinterpret_cast< dai::GraphAL * >(argp1);
  res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_dai__GraphAL,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GraphAL___eq__" "', argument " "2"" of type '" "dai::GraphAL const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GraphAL___eq__" "', argument " "2"" of type '" "dai::GraphAL const &""'"); 
  }
  arg2 = reinterpret_cast< dai::GraphAL * >(argp2);
  result = (bool)((dai::GraphAL const *)arg1)->operator ==((dai::GraphAL const &)*arg2);
  _outv = SWIG_From_bool(static_cast< bool >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( GraphAL_printDot, _wrap_GraphAL_printDot, std::string() ) {
  dai::GraphAL *arg1 = (dai::GraphAL *) 0 ;
  std::ostream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("GraphAL_printDot",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__GraphAL, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GraphAL_printDot" "', argument " "1"" of type '" "dai::GraphAL const *""'"); 
  }
  arg1 = reinterpret_cast< dai::GraphAL * >(argp1);
  res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_std__ostream,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GraphAL_printDot" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GraphAL_printDot" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  arg2 = reinterpret_cast< std::ostream * >(argp2);
  ((dai::GraphAL const *)arg1)->printDot(*arg2);
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( GraphAL_toString, _wrap_GraphAL_toString, std::string() ) {
  dai::GraphAL *arg1 = (dai::GraphAL *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  std::string result;
  
  if (!SWIG_check_num_args("GraphAL_toString",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__GraphAL, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GraphAL_toString" "', argument " "1"" of type '" "dai::GraphAL const *""'"); 
  }
  arg1 = reinterpret_cast< dai::GraphAL * >(argp1);
  result = ((dai::GraphAL const *)arg1)->toString();
  _outv = SWIG_From_std_string(static_cast< std::string >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( GraphAL___str__, _wrap_GraphAL___str__, std::string() ) {
  dai::GraphAL *arg1 = (dai::GraphAL *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  char *result = 0 ;
  
  if (!SWIG_check_num_args("GraphAL___str__",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__GraphAL, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GraphAL___str__" "', argument " "1"" of type '" "dai::GraphAL const *""'"); 
  }
  arg1 = reinterpret_cast< dai::GraphAL * >(argp1);
  result = (char *)dai_GraphAL___str__((dai::GraphAL const *)arg1);
  _outv = SWIG_FromCharPtr((const char *)result);
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( GraphAL___str, _wrap_GraphAL___str, std::string() ) {
  dai::GraphAL *arg1 = (dai::GraphAL *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  std::string result;
  
  if (!SWIG_check_num_args("GraphAL___str",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__GraphAL, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GraphAL___str" "', argument " "1"" of type '" "dai::GraphAL const *""'"); 
  }
  arg1 = reinterpret_cast< dai::GraphAL * >(argp1);
  result = dai_GraphAL___str((dai::GraphAL const *)arg1);
  _outv = SWIG_From_std_string(static_cast< std::string >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( delete_GraphAL, _wrap_delete_GraphAL, std::string() ) {
  dai::GraphAL *arg1 = (dai::GraphAL *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("delete_GraphAL",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__GraphAL, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_GraphAL" "', argument " "1"" of type '" "dai::GraphAL *""'"); 
  }
  arg1 = reinterpret_cast< dai::GraphAL * >(argp1);
  delete arg1;
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static swig_octave_member swig_GraphAL_members[] = {
{"nb",_wrap_GraphAL_nb,0,0,0,0},
{"addNode",_wrap_GraphAL_addNode,0,0,0,0},
{"addEdge",_wrap_GraphAL_addEdge,0,0,0,0},
{"eraseNode",_wrap_GraphAL_eraseNode,0,0,0,0},
{"eraseEdge",_wrap_GraphAL_eraseEdge,0,0,0,0},
{"nrNodes",_wrap_GraphAL_nrNodes,0,0,0,0},
{"nrEdges",_wrap_GraphAL_nrEdges,0,0,0,0},
{"hasEdge",_wrap_GraphAL_hasEdge,0,0,0,0},
{"findNb",_wrap_GraphAL_findNb,0,0,0,0},
{"nbSet",_wrap_GraphAL_nbSet,0,0,0,0},
{"isConnected",_wrap_GraphAL_isConnected,0,0,0,0},
{"isTree",_wrap_GraphAL_isTree,0,0,0,0},
{"checkConsistency",_wrap_GraphAL_checkConsistency,0,0,0,0},
{"__eq__",_wrap_GraphAL___eq__,0,0,0,0},
{"printDot",_wrap_GraphAL_printDot,0,0,0,0},
{"toString",_wrap_GraphAL_toString,0,0,0,0},
{"__str__",_wrap_GraphAL___str__,0,0,0,0},
{"__str",_wrap_GraphAL___str,0,0,0,0},
{0,0,0,0,0,0}
};
static const char *swig_GraphAL_base_names[] = {0};
static const swig_type_info *swig_GraphAL_base[] = {0};
static swig_octave_class _wrap_class_GraphAL = {"GraphAL", &SWIGTYPE_p_dai__GraphAL,0,_wrap_new_GraphAL,0,_wrap_delete_GraphAL,swig_GraphAL_members,swig_GraphAL_base_names,swig_GraphAL_base };

SWIG_DEFUN( createGraphFull, _wrap_createGraphFull, std::string() ) {
  size_t arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::GraphAL result;
  
  if (!SWIG_check_num_args("createGraphFull",args.length(),1,1,0)) {
    SWIG_fail;
  }
  ecode1 = SWIG_AsVal_size_t(args(0), &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "createGraphFull" "', argument " "1"" of type '" "size_t""'");
  } 
  arg1 = static_cast< size_t >(val1);
  result = dai::createGraphFull(arg1);
  _outv = SWIG_NewPointerObj((new dai::GraphAL(static_cast< const dai::GraphAL& >(result))), SWIGTYPE_p_dai__GraphAL, SWIG_POINTER_OWN |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( createGraphGrid, _wrap_createGraphGrid, std::string() ) {
  size_t arg1 ;
  size_t arg2 ;
  bool arg3 ;
  size_t val1 ;
  int ecode1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::GraphAL result;
  
  if (!SWIG_check_num_args("createGraphGrid",args.length(),3,3,0)) {
    SWIG_fail;
  }
  ecode1 = SWIG_AsVal_size_t(args(0), &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "createGraphGrid" "', argument " "1"" of type '" "size_t""'");
  } 
  arg1 = static_cast< size_t >(val1);
  ecode2 = SWIG_AsVal_size_t(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "createGraphGrid" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  ecode3 = SWIG_AsVal_bool(args(2), &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "createGraphGrid" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  result = dai::createGraphGrid(arg1,arg2,arg3);
  _outv = SWIG_NewPointerObj((new dai::GraphAL(static_cast< const dai::GraphAL& >(result))), SWIGTYPE_p_dai__GraphAL, SWIG_POINTER_OWN |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( createGraphGrid3D, _wrap_createGraphGrid3D, std::string() ) {
  size_t arg1 ;
  size_t arg2 ;
  size_t arg3 ;
  bool arg4 ;
  size_t val1 ;
  int ecode1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::GraphAL result;
  
  if (!SWIG_check_num_args("createGraphGrid3D",args.length(),4,4,0)) {
    SWIG_fail;
  }
  ecode1 = SWIG_AsVal_size_t(args(0), &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "createGraphGrid3D" "', argument " "1"" of type '" "size_t""'");
  } 
  arg1 = static_cast< size_t >(val1);
  ecode2 = SWIG_AsVal_size_t(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "createGraphGrid3D" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  ecode3 = SWIG_AsVal_size_t(args(2), &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "createGraphGrid3D" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  ecode4 = SWIG_AsVal_bool(args(3), &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "createGraphGrid3D" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  result = dai::createGraphGrid3D(arg1,arg2,arg3,arg4);
  _outv = SWIG_NewPointerObj((new dai::GraphAL(static_cast< const dai::GraphAL& >(result))), SWIGTYPE_p_dai__GraphAL, SWIG_POINTER_OWN |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( createGraphLoop, _wrap_createGraphLoop, std::string() ) {
  size_t arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::GraphAL result;
  
  if (!SWIG_check_num_args("createGraphLoop",args.length(),1,1,0)) {
    SWIG_fail;
  }
  ecode1 = SWIG_AsVal_size_t(args(0), &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "createGraphLoop" "', argument " "1"" of type '" "size_t""'");
  } 
  arg1 = static_cast< size_t >(val1);
  result = dai::createGraphLoop(arg1);
  _outv = SWIG_NewPointerObj((new dai::GraphAL(static_cast< const dai::GraphAL& >(result))), SWIGTYPE_p_dai__GraphAL, SWIG_POINTER_OWN |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( createGraphTree, _wrap_createGraphTree, std::string() ) {
  size_t arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::GraphAL result;
  
  if (!SWIG_check_num_args("createGraphTree",args.length(),1,1,0)) {
    SWIG_fail;
  }
  ecode1 = SWIG_AsVal_size_t(args(0), &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "createGraphTree" "', argument " "1"" of type '" "size_t""'");
  } 
  arg1 = static_cast< size_t >(val1);
  result = dai::createGraphTree(arg1);
  _outv = SWIG_NewPointerObj((new dai::GraphAL(static_cast< const dai::GraphAL& >(result))), SWIGTYPE_p_dai__GraphAL, SWIG_POINTER_OWN |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( createGraphRegular, _wrap_createGraphRegular, std::string() ) {
  size_t arg1 ;
  size_t arg2 ;
  size_t val1 ;
  int ecode1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::GraphAL result;
  
  if (!SWIG_check_num_args("createGraphRegular",args.length(),2,2,0)) {
    SWIG_fail;
  }
  ecode1 = SWIG_AsVal_size_t(args(0), &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "createGraphRegular" "', argument " "1"" of type '" "size_t""'");
  } 
  arg1 = static_cast< size_t >(val1);
  ecode2 = SWIG_AsVal_size_t(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "createGraphRegular" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  result = dai::createGraphRegular(arg1,arg2);
  _outv = SWIG_NewPointerObj((new dai::GraphAL(static_cast< const dai::GraphAL& >(result))), SWIGTYPE_p_dai__GraphAL, SWIG_POINTER_OWN |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static octave_value_list _wrap_new_BipartiteGraph__SWIG_0 (const octave_value_list& args, int nargout) {
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::BipartiteGraph *result = 0 ;
  
  if (!SWIG_check_num_args("new_BipartiteGraph",args.length(),0,0,0)) {
    SWIG_fail;
  }
  result = (dai::BipartiteGraph *)new dai::BipartiteGraph();
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dai__BipartiteGraph, 1 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static octave_value_list _wrap_new_BipartiteGraph__SWIG_1 (const octave_value_list& args, int nargout) {
  size_t arg1 ;
  size_t arg2 ;
  size_t val1 ;
  int ecode1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::BipartiteGraph *result = 0 ;
  
  if (!SWIG_check_num_args("new_BipartiteGraph",args.length(),2,2,0)) {
    SWIG_fail;
  }
  ecode1 = SWIG_AsVal_size_t(args(0), &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_BipartiteGraph" "', argument " "1"" of type '" "size_t""'");
  } 
  arg1 = static_cast< size_t >(val1);
  ecode2 = SWIG_AsVal_size_t(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_BipartiteGraph" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  result = (dai::BipartiteGraph *)new dai::BipartiteGraph(arg1,arg2);
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dai__BipartiteGraph, 1 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( new_BipartiteGraph, _wrap_new_BipartiteGraph, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[2]={
    octave_value_ref(args,0),octave_value_ref(args,1)
  };
  
  if (argc == 0) {
    return _wrap_new_BipartiteGraph__SWIG_0(args, nargout);
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_BipartiteGraph__SWIG_1(args, nargout);
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


static octave_value_list _wrap_BipartiteGraph_nb1__SWIG_0 (const octave_value_list& args, int nargout) {
  dai::BipartiteGraph *arg1 = (dai::BipartiteGraph *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::Neighbor *result = 0 ;
  
  if (!SWIG_check_num_args("BipartiteGraph_nb1",args.length(),3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__BipartiteGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BipartiteGraph_nb1" "', argument " "1"" of type '" "dai::BipartiteGraph const *""'"); 
  }
  arg1 = reinterpret_cast< dai::BipartiteGraph * >(argp1);
  ecode2 = SWIG_AsVal_size_t(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BipartiteGraph_nb1" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  ecode3 = SWIG_AsVal_size_t(args(2), &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "BipartiteGraph_nb1" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  result = (dai::Neighbor *) &((dai::BipartiteGraph const *)arg1)->nb1(arg2,arg3);
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dai__Neighbor, 0 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static octave_value_list _wrap_BipartiteGraph_nb1__SWIG_1 (const octave_value_list& args, int nargout) {
  dai::BipartiteGraph *arg1 = (dai::BipartiteGraph *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::Neighbor *result = 0 ;
  
  if (!SWIG_check_num_args("BipartiteGraph_nb1",args.length(),3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__BipartiteGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BipartiteGraph_nb1" "', argument " "1"" of type '" "dai::BipartiteGraph *""'"); 
  }
  arg1 = reinterpret_cast< dai::BipartiteGraph * >(argp1);
  ecode2 = SWIG_AsVal_size_t(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BipartiteGraph_nb1" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  ecode3 = SWIG_AsVal_size_t(args(2), &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "BipartiteGraph_nb1" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  result = (dai::Neighbor *) &(arg1)->nb1(arg2,arg3);
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dai__Neighbor, 0 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static octave_value_list _wrap_BipartiteGraph_nb2__SWIG_0 (const octave_value_list& args, int nargout) {
  dai::BipartiteGraph *arg1 = (dai::BipartiteGraph *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::Neighbor *result = 0 ;
  
  if (!SWIG_check_num_args("BipartiteGraph_nb2",args.length(),3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__BipartiteGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BipartiteGraph_nb2" "', argument " "1"" of type '" "dai::BipartiteGraph const *""'"); 
  }
  arg1 = reinterpret_cast< dai::BipartiteGraph * >(argp1);
  ecode2 = SWIG_AsVal_size_t(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BipartiteGraph_nb2" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  ecode3 = SWIG_AsVal_size_t(args(2), &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "BipartiteGraph_nb2" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  result = (dai::Neighbor *) &((dai::BipartiteGraph const *)arg1)->nb2(arg2,arg3);
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dai__Neighbor, 0 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static octave_value_list _wrap_BipartiteGraph_nb2__SWIG_1 (const octave_value_list& args, int nargout) {
  dai::BipartiteGraph *arg1 = (dai::BipartiteGraph *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::Neighbor *result = 0 ;
  
  if (!SWIG_check_num_args("BipartiteGraph_nb2",args.length(),3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__BipartiteGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BipartiteGraph_nb2" "', argument " "1"" of type '" "dai::BipartiteGraph *""'"); 
  }
  arg1 = reinterpret_cast< dai::BipartiteGraph * >(argp1);
  ecode2 = SWIG_AsVal_size_t(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BipartiteGraph_nb2" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  ecode3 = SWIG_AsVal_size_t(args(2), &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "BipartiteGraph_nb2" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  result = (dai::Neighbor *) &(arg1)->nb2(arg2,arg3);
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dai__Neighbor, 0 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static octave_value_list _wrap_BipartiteGraph_nb1__SWIG_2 (const octave_value_list& args, int nargout) {
  dai::BipartiteGraph *arg1 = (dai::BipartiteGraph *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::Neighbors *result = 0 ;
  
  if (!SWIG_check_num_args("BipartiteGraph_nb1",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__BipartiteGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BipartiteGraph_nb1" "', argument " "1"" of type '" "dai::BipartiteGraph const *""'"); 
  }
  arg1 = reinterpret_cast< dai::BipartiteGraph * >(argp1);
  ecode2 = SWIG_AsVal_size_t(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BipartiteGraph_nb1" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  result = (dai::Neighbors *) &((dai::BipartiteGraph const *)arg1)->nb1(arg2);
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_dai__Neighbor_std__allocatorT_dai__Neighbor_t_t, 0 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static octave_value_list _wrap_BipartiteGraph_nb1__SWIG_3 (const octave_value_list& args, int nargout) {
  dai::BipartiteGraph *arg1 = (dai::BipartiteGraph *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::Neighbors *result = 0 ;
  
  if (!SWIG_check_num_args("BipartiteGraph_nb1",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__BipartiteGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BipartiteGraph_nb1" "', argument " "1"" of type '" "dai::BipartiteGraph *""'"); 
  }
  arg1 = reinterpret_cast< dai::BipartiteGraph * >(argp1);
  ecode2 = SWIG_AsVal_size_t(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BipartiteGraph_nb1" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  result = (dai::Neighbors *) &(arg1)->nb1(arg2);
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_dai__Neighbor_std__allocatorT_dai__Neighbor_t_t, 0 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( BipartiteGraph_nb1, _wrap_BipartiteGraph_nb1, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[3]={
    octave_value_ref(args,0),octave_value_ref(args,1),octave_value_ref(args,2)
  };
  
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dai__BipartiteGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_BipartiteGraph_nb1__SWIG_3(args, nargout);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dai__BipartiteGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_BipartiteGraph_nb1__SWIG_2(args, nargout);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dai__BipartiteGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_BipartiteGraph_nb1__SWIG_1(args, nargout);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dai__BipartiteGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_BipartiteGraph_nb1__SWIG_0(args, nargout);
        }
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


static octave_value_list _wrap_BipartiteGraph_nb2__SWIG_2 (const octave_value_list& args, int nargout) {
  dai::BipartiteGraph *arg1 = (dai::BipartiteGraph *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::Neighbors *result = 0 ;
  
  if (!SWIG_check_num_args("BipartiteGraph_nb2",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__BipartiteGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BipartiteGraph_nb2" "', argument " "1"" of type '" "dai::BipartiteGraph const *""'"); 
  }
  arg1 = reinterpret_cast< dai::BipartiteGraph * >(argp1);
  ecode2 = SWIG_AsVal_size_t(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BipartiteGraph_nb2" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  result = (dai::Neighbors *) &((dai::BipartiteGraph const *)arg1)->nb2(arg2);
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_dai__Neighbor_std__allocatorT_dai__Neighbor_t_t, 0 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static octave_value_list _wrap_BipartiteGraph_nb2__SWIG_3 (const octave_value_list& args, int nargout) {
  dai::BipartiteGraph *arg1 = (dai::BipartiteGraph *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::Neighbors *result = 0 ;
  
  if (!SWIG_check_num_args("BipartiteGraph_nb2",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__BipartiteGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BipartiteGraph_nb2" "', argument " "1"" of type '" "dai::BipartiteGraph *""'"); 
  }
  arg1 = reinterpret_cast< dai::BipartiteGraph * >(argp1);
  ecode2 = SWIG_AsVal_size_t(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BipartiteGraph_nb2" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  result = (dai::Neighbors *) &(arg1)->nb2(arg2);
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_dai__Neighbor_std__allocatorT_dai__Neighbor_t_t, 0 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( BipartiteGraph_nb2, _wrap_BipartiteGraph_nb2, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[3]={
    octave_value_ref(args,0),octave_value_ref(args,1),octave_value_ref(args,2)
  };
  
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dai__BipartiteGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_BipartiteGraph_nb2__SWIG_3(args, nargout);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dai__BipartiteGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_BipartiteGraph_nb2__SWIG_2(args, nargout);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dai__BipartiteGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_BipartiteGraph_nb2__SWIG_1(args, nargout);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dai__BipartiteGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_BipartiteGraph_nb2__SWIG_0(args, nargout);
        }
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


SWIG_DEFUN( BipartiteGraph_addNode1, _wrap_BipartiteGraph_addNode1, std::string() ) {
  dai::BipartiteGraph *arg1 = (dai::BipartiteGraph *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  size_t result;
  
  if (!SWIG_check_num_args("BipartiteGraph_addNode1",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__BipartiteGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BipartiteGraph_addNode1" "', argument " "1"" of type '" "dai::BipartiteGraph *""'"); 
  }
  arg1 = reinterpret_cast< dai::BipartiteGraph * >(argp1);
  result = (arg1)->addNode1();
  _outv = SWIG_From_size_t(static_cast< size_t >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( BipartiteGraph_addNode2, _wrap_BipartiteGraph_addNode2, std::string() ) {
  dai::BipartiteGraph *arg1 = (dai::BipartiteGraph *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  size_t result;
  
  if (!SWIG_check_num_args("BipartiteGraph_addNode2",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__BipartiteGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BipartiteGraph_addNode2" "', argument " "1"" of type '" "dai::BipartiteGraph *""'"); 
  }
  arg1 = reinterpret_cast< dai::BipartiteGraph * >(argp1);
  result = (arg1)->addNode2();
  _outv = SWIG_From_size_t(static_cast< size_t >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static octave_value_list _wrap_BipartiteGraph_addEdge__SWIG_0 (const octave_value_list& args, int nargout) {
  dai::BipartiteGraph *arg1 = (dai::BipartiteGraph *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  bool arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::BipartiteGraph *result = 0 ;
  
  if (!SWIG_check_num_args("BipartiteGraph_addEdge",args.length(),4,4,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__BipartiteGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BipartiteGraph_addEdge" "', argument " "1"" of type '" "dai::BipartiteGraph *""'"); 
  }
  arg1 = reinterpret_cast< dai::BipartiteGraph * >(argp1);
  ecode2 = SWIG_AsVal_size_t(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BipartiteGraph_addEdge" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  ecode3 = SWIG_AsVal_size_t(args(2), &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "BipartiteGraph_addEdge" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  ecode4 = SWIG_AsVal_bool(args(3), &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "BipartiteGraph_addEdge" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  result = (dai::BipartiteGraph *) &(arg1)->addEdge(arg2,arg3,arg4);
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dai__BipartiteGraph, 0 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static octave_value_list _wrap_BipartiteGraph_addEdge__SWIG_1 (const octave_value_list& args, int nargout) {
  dai::BipartiteGraph *arg1 = (dai::BipartiteGraph *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::BipartiteGraph *result = 0 ;
  
  if (!SWIG_check_num_args("BipartiteGraph_addEdge",args.length(),3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__BipartiteGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BipartiteGraph_addEdge" "', argument " "1"" of type '" "dai::BipartiteGraph *""'"); 
  }
  arg1 = reinterpret_cast< dai::BipartiteGraph * >(argp1);
  ecode2 = SWIG_AsVal_size_t(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BipartiteGraph_addEdge" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  ecode3 = SWIG_AsVal_size_t(args(2), &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "BipartiteGraph_addEdge" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  result = (dai::BipartiteGraph *) &(arg1)->addEdge(arg2,arg3);
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dai__BipartiteGraph, 0 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( BipartiteGraph_addEdge, _wrap_BipartiteGraph_addEdge, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[4]={
    octave_value_ref(args,0),octave_value_ref(args,1),octave_value_ref(args,2),octave_value_ref(args,3)
  };
  
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dai__BipartiteGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_BipartiteGraph_addEdge__SWIG_1(args, nargout);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dai__BipartiteGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_BipartiteGraph_addEdge__SWIG_0(args, nargout);
          }
        }
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


SWIG_DEFUN( BipartiteGraph_eraseNode1, _wrap_BipartiteGraph_eraseNode1, std::string() ) {
  dai::BipartiteGraph *arg1 = (dai::BipartiteGraph *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("BipartiteGraph_eraseNode1",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__BipartiteGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BipartiteGraph_eraseNode1" "', argument " "1"" of type '" "dai::BipartiteGraph *""'"); 
  }
  arg1 = reinterpret_cast< dai::BipartiteGraph * >(argp1);
  ecode2 = SWIG_AsVal_size_t(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BipartiteGraph_eraseNode1" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  (arg1)->eraseNode1(arg2);
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( BipartiteGraph_eraseNode2, _wrap_BipartiteGraph_eraseNode2, std::string() ) {
  dai::BipartiteGraph *arg1 = (dai::BipartiteGraph *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("BipartiteGraph_eraseNode2",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__BipartiteGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BipartiteGraph_eraseNode2" "', argument " "1"" of type '" "dai::BipartiteGraph *""'"); 
  }
  arg1 = reinterpret_cast< dai::BipartiteGraph * >(argp1);
  ecode2 = SWIG_AsVal_size_t(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BipartiteGraph_eraseNode2" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  (arg1)->eraseNode2(arg2);
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( BipartiteGraph_eraseEdge, _wrap_BipartiteGraph_eraseEdge, std::string() ) {
  dai::BipartiteGraph *arg1 = (dai::BipartiteGraph *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("BipartiteGraph_eraseEdge",args.length(),3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__BipartiteGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BipartiteGraph_eraseEdge" "', argument " "1"" of type '" "dai::BipartiteGraph *""'"); 
  }
  arg1 = reinterpret_cast< dai::BipartiteGraph * >(argp1);
  ecode2 = SWIG_AsVal_size_t(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BipartiteGraph_eraseEdge" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  ecode3 = SWIG_AsVal_size_t(args(2), &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "BipartiteGraph_eraseEdge" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  (arg1)->eraseEdge(arg2,arg3);
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( BipartiteGraph_nrNodes1, _wrap_BipartiteGraph_nrNodes1, std::string() ) {
  dai::BipartiteGraph *arg1 = (dai::BipartiteGraph *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  size_t result;
  
  if (!SWIG_check_num_args("BipartiteGraph_nrNodes1",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__BipartiteGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BipartiteGraph_nrNodes1" "', argument " "1"" of type '" "dai::BipartiteGraph const *""'"); 
  }
  arg1 = reinterpret_cast< dai::BipartiteGraph * >(argp1);
  result = ((dai::BipartiteGraph const *)arg1)->nrNodes1();
  _outv = SWIG_From_size_t(static_cast< size_t >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( BipartiteGraph_nrNodes2, _wrap_BipartiteGraph_nrNodes2, std::string() ) {
  dai::BipartiteGraph *arg1 = (dai::BipartiteGraph *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  size_t result;
  
  if (!SWIG_check_num_args("BipartiteGraph_nrNodes2",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__BipartiteGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BipartiteGraph_nrNodes2" "', argument " "1"" of type '" "dai::BipartiteGraph const *""'"); 
  }
  arg1 = reinterpret_cast< dai::BipartiteGraph * >(argp1);
  result = ((dai::BipartiteGraph const *)arg1)->nrNodes2();
  _outv = SWIG_From_size_t(static_cast< size_t >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( BipartiteGraph_nrEdges, _wrap_BipartiteGraph_nrEdges, std::string() ) {
  dai::BipartiteGraph *arg1 = (dai::BipartiteGraph *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  size_t result;
  
  if (!SWIG_check_num_args("BipartiteGraph_nrEdges",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__BipartiteGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BipartiteGraph_nrEdges" "', argument " "1"" of type '" "dai::BipartiteGraph const *""'"); 
  }
  arg1 = reinterpret_cast< dai::BipartiteGraph * >(argp1);
  result = ((dai::BipartiteGraph const *)arg1)->nrEdges();
  _outv = SWIG_From_size_t(static_cast< size_t >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( BipartiteGraph_hasEdge, _wrap_BipartiteGraph_hasEdge, std::string() ) {
  dai::BipartiteGraph *arg1 = (dai::BipartiteGraph *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  bool result;
  
  if (!SWIG_check_num_args("BipartiteGraph_hasEdge",args.length(),3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__BipartiteGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BipartiteGraph_hasEdge" "', argument " "1"" of type '" "dai::BipartiteGraph const *""'"); 
  }
  arg1 = reinterpret_cast< dai::BipartiteGraph * >(argp1);
  ecode2 = SWIG_AsVal_size_t(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BipartiteGraph_hasEdge" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  ecode3 = SWIG_AsVal_size_t(args(2), &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "BipartiteGraph_hasEdge" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  result = (bool)((dai::BipartiteGraph const *)arg1)->hasEdge(arg2,arg3);
  _outv = SWIG_From_bool(static_cast< bool >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( BipartiteGraph_findNb1, _wrap_BipartiteGraph_findNb1, std::string() ) {
  dai::BipartiteGraph *arg1 = (dai::BipartiteGraph *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  size_t result;
  
  if (!SWIG_check_num_args("BipartiteGraph_findNb1",args.length(),3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__BipartiteGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BipartiteGraph_findNb1" "', argument " "1"" of type '" "dai::BipartiteGraph *""'"); 
  }
  arg1 = reinterpret_cast< dai::BipartiteGraph * >(argp1);
  ecode2 = SWIG_AsVal_size_t(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BipartiteGraph_findNb1" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  ecode3 = SWIG_AsVal_size_t(args(2), &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "BipartiteGraph_findNb1" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  result = (arg1)->findNb1(arg2,arg3);
  _outv = SWIG_From_size_t(static_cast< size_t >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( BipartiteGraph_findNb2, _wrap_BipartiteGraph_findNb2, std::string() ) {
  dai::BipartiteGraph *arg1 = (dai::BipartiteGraph *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  size_t result;
  
  if (!SWIG_check_num_args("BipartiteGraph_findNb2",args.length(),3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__BipartiteGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BipartiteGraph_findNb2" "', argument " "1"" of type '" "dai::BipartiteGraph *""'"); 
  }
  arg1 = reinterpret_cast< dai::BipartiteGraph * >(argp1);
  ecode2 = SWIG_AsVal_size_t(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BipartiteGraph_findNb2" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  ecode3 = SWIG_AsVal_size_t(args(2), &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "BipartiteGraph_findNb2" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  result = (arg1)->findNb2(arg2,arg3);
  _outv = SWIG_From_size_t(static_cast< size_t >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( BipartiteGraph_nb1Set, _wrap_BipartiteGraph_nb1Set, std::string() ) {
  dai::BipartiteGraph *arg1 = (dai::BipartiteGraph *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  SwigValueWrapper< dai::SmallSet< size_t > > result;
  
  if (!SWIG_check_num_args("BipartiteGraph_nb1Set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__BipartiteGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BipartiteGraph_nb1Set" "', argument " "1"" of type '" "dai::BipartiteGraph const *""'"); 
  }
  arg1 = reinterpret_cast< dai::BipartiteGraph * >(argp1);
  ecode2 = SWIG_AsVal_size_t(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BipartiteGraph_nb1Set" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  result = ((dai::BipartiteGraph const *)arg1)->nb1Set(arg2);
  _outv = SWIG_NewPointerObj((new dai::SmallSet< size_t >(static_cast< const dai::SmallSet< size_t >& >(result))), SWIGTYPE_p_dai__SmallSetT_size_t_t, SWIG_POINTER_OWN |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( BipartiteGraph_nb2Set, _wrap_BipartiteGraph_nb2Set, std::string() ) {
  dai::BipartiteGraph *arg1 = (dai::BipartiteGraph *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  SwigValueWrapper< dai::SmallSet< size_t > > result;
  
  if (!SWIG_check_num_args("BipartiteGraph_nb2Set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__BipartiteGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BipartiteGraph_nb2Set" "', argument " "1"" of type '" "dai::BipartiteGraph const *""'"); 
  }
  arg1 = reinterpret_cast< dai::BipartiteGraph * >(argp1);
  ecode2 = SWIG_AsVal_size_t(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BipartiteGraph_nb2Set" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  result = ((dai::BipartiteGraph const *)arg1)->nb2Set(arg2);
  _outv = SWIG_NewPointerObj((new dai::SmallSet< size_t >(static_cast< const dai::SmallSet< size_t >& >(result))), SWIGTYPE_p_dai__SmallSetT_size_t_t, SWIG_POINTER_OWN |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static octave_value_list _wrap_BipartiteGraph_delta1__SWIG_0 (const octave_value_list& args, int nargout) {
  dai::BipartiteGraph *arg1 = (dai::BipartiteGraph *) 0 ;
  size_t arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  SwigValueWrapper< dai::SmallSet< size_t > > result;
  
  if (!SWIG_check_num_args("BipartiteGraph_delta1",args.length(),3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__BipartiteGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BipartiteGraph_delta1" "', argument " "1"" of type '" "dai::BipartiteGraph const *""'"); 
  }
  arg1 = reinterpret_cast< dai::BipartiteGraph * >(argp1);
  ecode2 = SWIG_AsVal_size_t(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BipartiteGraph_delta1" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  ecode3 = SWIG_AsVal_bool(args(2), &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "BipartiteGraph_delta1" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  result = ((dai::BipartiteGraph const *)arg1)->delta1(arg2,arg3);
  _outv = SWIG_NewPointerObj((new dai::SmallSet< size_t >(static_cast< const dai::SmallSet< size_t >& >(result))), SWIGTYPE_p_dai__SmallSetT_size_t_t, SWIG_POINTER_OWN |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static octave_value_list _wrap_BipartiteGraph_delta1__SWIG_1 (const octave_value_list& args, int nargout) {
  dai::BipartiteGraph *arg1 = (dai::BipartiteGraph *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  SwigValueWrapper< dai::SmallSet< size_t > > result;
  
  if (!SWIG_check_num_args("BipartiteGraph_delta1",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__BipartiteGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BipartiteGraph_delta1" "', argument " "1"" of type '" "dai::BipartiteGraph const *""'"); 
  }
  arg1 = reinterpret_cast< dai::BipartiteGraph * >(argp1);
  ecode2 = SWIG_AsVal_size_t(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BipartiteGraph_delta1" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  result = ((dai::BipartiteGraph const *)arg1)->delta1(arg2);
  _outv = SWIG_NewPointerObj((new dai::SmallSet< size_t >(static_cast< const dai::SmallSet< size_t >& >(result))), SWIGTYPE_p_dai__SmallSetT_size_t_t, SWIG_POINTER_OWN |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( BipartiteGraph_delta1, _wrap_BipartiteGraph_delta1, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[3]={
    octave_value_ref(args,0),octave_value_ref(args,1),octave_value_ref(args,2)
  };
  
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dai__BipartiteGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_BipartiteGraph_delta1__SWIG_1(args, nargout);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dai__BipartiteGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_BipartiteGraph_delta1__SWIG_0(args, nargout);
        }
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


static octave_value_list _wrap_BipartiteGraph_delta2__SWIG_0 (const octave_value_list& args, int nargout) {
  dai::BipartiteGraph *arg1 = (dai::BipartiteGraph *) 0 ;
  size_t arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  SwigValueWrapper< dai::SmallSet< size_t > > result;
  
  if (!SWIG_check_num_args("BipartiteGraph_delta2",args.length(),3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__BipartiteGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BipartiteGraph_delta2" "', argument " "1"" of type '" "dai::BipartiteGraph const *""'"); 
  }
  arg1 = reinterpret_cast< dai::BipartiteGraph * >(argp1);
  ecode2 = SWIG_AsVal_size_t(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BipartiteGraph_delta2" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  ecode3 = SWIG_AsVal_bool(args(2), &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "BipartiteGraph_delta2" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  result = ((dai::BipartiteGraph const *)arg1)->delta2(arg2,arg3);
  _outv = SWIG_NewPointerObj((new dai::SmallSet< size_t >(static_cast< const dai::SmallSet< size_t >& >(result))), SWIGTYPE_p_dai__SmallSetT_size_t_t, SWIG_POINTER_OWN |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static octave_value_list _wrap_BipartiteGraph_delta2__SWIG_1 (const octave_value_list& args, int nargout) {
  dai::BipartiteGraph *arg1 = (dai::BipartiteGraph *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  SwigValueWrapper< dai::SmallSet< size_t > > result;
  
  if (!SWIG_check_num_args("BipartiteGraph_delta2",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__BipartiteGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BipartiteGraph_delta2" "', argument " "1"" of type '" "dai::BipartiteGraph const *""'"); 
  }
  arg1 = reinterpret_cast< dai::BipartiteGraph * >(argp1);
  ecode2 = SWIG_AsVal_size_t(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BipartiteGraph_delta2" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  result = ((dai::BipartiteGraph const *)arg1)->delta2(arg2);
  _outv = SWIG_NewPointerObj((new dai::SmallSet< size_t >(static_cast< const dai::SmallSet< size_t >& >(result))), SWIGTYPE_p_dai__SmallSetT_size_t_t, SWIG_POINTER_OWN |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( BipartiteGraph_delta2, _wrap_BipartiteGraph_delta2, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[3]={
    octave_value_ref(args,0),octave_value_ref(args,1),octave_value_ref(args,2)
  };
  
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dai__BipartiteGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_BipartiteGraph_delta2__SWIG_1(args, nargout);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dai__BipartiteGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_BipartiteGraph_delta2__SWIG_0(args, nargout);
        }
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


SWIG_DEFUN( BipartiteGraph_isConnected, _wrap_BipartiteGraph_isConnected, std::string() ) {
  dai::BipartiteGraph *arg1 = (dai::BipartiteGraph *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  bool result;
  
  if (!SWIG_check_num_args("BipartiteGraph_isConnected",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__BipartiteGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BipartiteGraph_isConnected" "', argument " "1"" of type '" "dai::BipartiteGraph const *""'"); 
  }
  arg1 = reinterpret_cast< dai::BipartiteGraph * >(argp1);
  result = (bool)((dai::BipartiteGraph const *)arg1)->isConnected();
  _outv = SWIG_From_bool(static_cast< bool >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( BipartiteGraph_isTree, _wrap_BipartiteGraph_isTree, std::string() ) {
  dai::BipartiteGraph *arg1 = (dai::BipartiteGraph *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  bool result;
  
  if (!SWIG_check_num_args("BipartiteGraph_isTree",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__BipartiteGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BipartiteGraph_isTree" "', argument " "1"" of type '" "dai::BipartiteGraph const *""'"); 
  }
  arg1 = reinterpret_cast< dai::BipartiteGraph * >(argp1);
  result = (bool)((dai::BipartiteGraph const *)arg1)->isTree();
  _outv = SWIG_From_bool(static_cast< bool >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( BipartiteGraph___eq__, _wrap_BipartiteGraph___eq__, std::string() ) {
  dai::BipartiteGraph *arg1 = (dai::BipartiteGraph *) 0 ;
  dai::BipartiteGraph *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  bool result;
  
  if (!SWIG_check_num_args("BipartiteGraph___eq__",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__BipartiteGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BipartiteGraph___eq__" "', argument " "1"" of type '" "dai::BipartiteGraph const *""'"); 
  }
  arg1 = reinterpret_cast< dai::BipartiteGraph * >(argp1);
  res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_dai__BipartiteGraph,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BipartiteGraph___eq__" "', argument " "2"" of type '" "dai::BipartiteGraph const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BipartiteGraph___eq__" "', argument " "2"" of type '" "dai::BipartiteGraph const &""'"); 
  }
  arg2 = reinterpret_cast< dai::BipartiteGraph * >(argp2);
  result = (bool)((dai::BipartiteGraph const *)arg1)->operator ==((dai::BipartiteGraph const &)*arg2);
  _outv = SWIG_From_bool(static_cast< bool >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( BipartiteGraph_checkConsistency, _wrap_BipartiteGraph_checkConsistency, std::string() ) {
  dai::BipartiteGraph *arg1 = (dai::BipartiteGraph *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("BipartiteGraph_checkConsistency",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__BipartiteGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BipartiteGraph_checkConsistency" "', argument " "1"" of type '" "dai::BipartiteGraph const *""'"); 
  }
  arg1 = reinterpret_cast< dai::BipartiteGraph * >(argp1);
  ((dai::BipartiteGraph const *)arg1)->checkConsistency();
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( BipartiteGraph_printDot, _wrap_BipartiteGraph_printDot, std::string() ) {
  dai::BipartiteGraph *arg1 = (dai::BipartiteGraph *) 0 ;
  std::ostream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("BipartiteGraph_printDot",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__BipartiteGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BipartiteGraph_printDot" "', argument " "1"" of type '" "dai::BipartiteGraph const *""'"); 
  }
  arg1 = reinterpret_cast< dai::BipartiteGraph * >(argp1);
  res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_std__ostream,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BipartiteGraph_printDot" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BipartiteGraph_printDot" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  arg2 = reinterpret_cast< std::ostream * >(argp2);
  ((dai::BipartiteGraph const *)arg1)->printDot(*arg2);
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( BipartiteGraph_toString, _wrap_BipartiteGraph_toString, std::string() ) {
  dai::BipartiteGraph *arg1 = (dai::BipartiteGraph *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  std::string result;
  
  if (!SWIG_check_num_args("BipartiteGraph_toString",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__BipartiteGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BipartiteGraph_toString" "', argument " "1"" of type '" "dai::BipartiteGraph const *""'"); 
  }
  arg1 = reinterpret_cast< dai::BipartiteGraph * >(argp1);
  result = ((dai::BipartiteGraph const *)arg1)->toString();
  _outv = SWIG_From_std_string(static_cast< std::string >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( BipartiteGraph___str__, _wrap_BipartiteGraph___str__, std::string() ) {
  dai::BipartiteGraph *arg1 = (dai::BipartiteGraph *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  char *result = 0 ;
  
  if (!SWIG_check_num_args("BipartiteGraph___str__",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__BipartiteGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BipartiteGraph___str__" "', argument " "1"" of type '" "dai::BipartiteGraph const *""'"); 
  }
  arg1 = reinterpret_cast< dai::BipartiteGraph * >(argp1);
  result = (char *)dai_BipartiteGraph___str__((dai::BipartiteGraph const *)arg1);
  _outv = SWIG_FromCharPtr((const char *)result);
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( BipartiteGraph___str, _wrap_BipartiteGraph___str, std::string() ) {
  dai::BipartiteGraph *arg1 = (dai::BipartiteGraph *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  std::string result;
  
  if (!SWIG_check_num_args("BipartiteGraph___str",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__BipartiteGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BipartiteGraph___str" "', argument " "1"" of type '" "dai::BipartiteGraph const *""'"); 
  }
  arg1 = reinterpret_cast< dai::BipartiteGraph * >(argp1);
  result = dai_BipartiteGraph___str((dai::BipartiteGraph const *)arg1);
  _outv = SWIG_From_std_string(static_cast< std::string >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( delete_BipartiteGraph, _wrap_delete_BipartiteGraph, std::string() ) {
  dai::BipartiteGraph *arg1 = (dai::BipartiteGraph *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("delete_BipartiteGraph",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__BipartiteGraph, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_BipartiteGraph" "', argument " "1"" of type '" "dai::BipartiteGraph *""'"); 
  }
  arg1 = reinterpret_cast< dai::BipartiteGraph * >(argp1);
  delete arg1;
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static swig_octave_member swig_BipartiteGraph_members[] = {
{"nb1",_wrap_BipartiteGraph_nb1,0,0,0,0},
{"nb2",_wrap_BipartiteGraph_nb2,0,0,0,0},
{"addNode1",_wrap_BipartiteGraph_addNode1,0,0,0,0},
{"addNode2",_wrap_BipartiteGraph_addNode2,0,0,0,0},
{"addEdge",_wrap_BipartiteGraph_addEdge,0,0,0,0},
{"eraseNode1",_wrap_BipartiteGraph_eraseNode1,0,0,0,0},
{"eraseNode2",_wrap_BipartiteGraph_eraseNode2,0,0,0,0},
{"eraseEdge",_wrap_BipartiteGraph_eraseEdge,0,0,0,0},
{"nrNodes1",_wrap_BipartiteGraph_nrNodes1,0,0,0,0},
{"nrNodes2",_wrap_BipartiteGraph_nrNodes2,0,0,0,0},
{"nrEdges",_wrap_BipartiteGraph_nrEdges,0,0,0,0},
{"hasEdge",_wrap_BipartiteGraph_hasEdge,0,0,0,0},
{"findNb1",_wrap_BipartiteGraph_findNb1,0,0,0,0},
{"findNb2",_wrap_BipartiteGraph_findNb2,0,0,0,0},
{"nb1Set",_wrap_BipartiteGraph_nb1Set,0,0,0,0},
{"nb2Set",_wrap_BipartiteGraph_nb2Set,0,0,0,0},
{"delta1",_wrap_BipartiteGraph_delta1,0,0,0,0},
{"delta2",_wrap_BipartiteGraph_delta2,0,0,0,0},
{"isConnected",_wrap_BipartiteGraph_isConnected,0,0,0,0},
{"isTree",_wrap_BipartiteGraph_isTree,0,0,0,0},
{"__eq__",_wrap_BipartiteGraph___eq__,0,0,0,0},
{"checkConsistency",_wrap_BipartiteGraph_checkConsistency,0,0,0,0},
{"printDot",_wrap_BipartiteGraph_printDot,0,0,0,0},
{"toString",_wrap_BipartiteGraph_toString,0,0,0,0},
{"__str__",_wrap_BipartiteGraph___str__,0,0,0,0},
{"__str",_wrap_BipartiteGraph___str,0,0,0,0},
{0,0,0,0,0,0}
};
static const char *swig_BipartiteGraph_base_names[] = {0};
static const swig_type_info *swig_BipartiteGraph_base[] = {0};
static swig_octave_class _wrap_class_BipartiteGraph = {"BipartiteGraph", &SWIGTYPE_p_dai__BipartiteGraph,0,_wrap_new_BipartiteGraph,0,_wrap_delete_BipartiteGraph,swig_BipartiteGraph_members,swig_BipartiteGraph_base_names,swig_BipartiteGraph_base };

static octave_value_list _wrap_new_FactorGraph__SWIG_0 (const octave_value_list& args, int nargout) {
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::FactorGraph *result = 0 ;
  
  if (!SWIG_check_num_args("new_FactorGraph",args.length(),0,0,0)) {
    SWIG_fail;
  }
  result = (dai::FactorGraph *)new dai::FactorGraph();
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dai__FactorGraph, 1 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static octave_value_list _wrap_new_FactorGraph__SWIG_1 (const octave_value_list& args, int nargout) {
  std::vector< dai::Factor,std::allocator< dai::Factor > > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::FactorGraph *result = 0 ;
  
  if (!SWIG_check_num_args("new_FactorGraph",args.length(),1,1,0)) {
    SWIG_fail;
  }
  {
    std::vector< dai::TFactor< double >,std::allocator< dai::TFactor< double > > > *ptr = (std::vector< dai::TFactor< double >,std::allocator< dai::TFactor< double > > > *)0;
    res1 = swig::asptr(args(0), &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_FactorGraph" "', argument " "1"" of type '" "std::vector< dai::Factor,std::allocator< dai::Factor > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_FactorGraph" "', argument " "1"" of type '" "std::vector< dai::Factor,std::allocator< dai::Factor > > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (dai::FactorGraph *)new dai::FactorGraph((std::vector< dai::Factor,std::allocator< dai::Factor > > const &)*arg1);
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dai__FactorGraph, 1 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  if (SWIG_IsNewObj(res1)) delete arg1;
  return _out;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return octave_value_list();
}


SWIG_DEFUN( new_FactorGraph, _wrap_new_FactorGraph, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[1]={
    octave_value_ref(args,0)
  };
  
  if (argc == 0) {
    return _wrap_new_FactorGraph__SWIG_0(args, nargout);
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< dai::TFactor< double >,std::allocator< dai::TFactor< double > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_FactorGraph__SWIG_1(args, nargout);
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


SWIG_DEFUN( delete_FactorGraph, _wrap_delete_FactorGraph, std::string() ) {
  dai::FactorGraph *arg1 = (dai::FactorGraph *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("delete_FactorGraph",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__FactorGraph, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_FactorGraph" "', argument " "1"" of type '" "dai::FactorGraph *""'"); 
  }
  arg1 = reinterpret_cast< dai::FactorGraph * >(argp1);
  delete arg1;
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( FactorGraph_clone, _wrap_FactorGraph_clone, std::string() ) {
  dai::FactorGraph *arg1 = (dai::FactorGraph *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::FactorGraph *result = 0 ;
  
  if (!SWIG_check_num_args("FactorGraph_clone",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__FactorGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FactorGraph_clone" "', argument " "1"" of type '" "dai::FactorGraph const *""'"); 
  }
  arg1 = reinterpret_cast< dai::FactorGraph * >(argp1);
  result = (dai::FactorGraph *)((dai::FactorGraph const *)arg1)->clone();
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dai__FactorGraph, 0 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( FactorGraph_var, _wrap_FactorGraph_var, std::string() ) {
  dai::FactorGraph *arg1 = (dai::FactorGraph *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::Var *result = 0 ;
  
  if (!SWIG_check_num_args("FactorGraph_var",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__FactorGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FactorGraph_var" "', argument " "1"" of type '" "dai::FactorGraph const *""'"); 
  }
  arg1 = reinterpret_cast< dai::FactorGraph * >(argp1);
  ecode2 = SWIG_AsVal_size_t(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FactorGraph_var" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  result = (dai::Var *) &((dai::FactorGraph const *)arg1)->var(arg2);
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dai__Var, 0 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( FactorGraph_vars, _wrap_FactorGraph_vars, std::string() ) {
  dai::FactorGraph *arg1 = (dai::FactorGraph *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  std::vector< dai::Var,std::allocator< dai::Var > > *result = 0 ;
  
  if (!SWIG_check_num_args("FactorGraph_vars",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__FactorGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FactorGraph_vars" "', argument " "1"" of type '" "dai::FactorGraph const *""'"); 
  }
  arg1 = reinterpret_cast< dai::FactorGraph * >(argp1);
  result = (std::vector< dai::Var,std::allocator< dai::Var > > *) &((dai::FactorGraph const *)arg1)->vars();
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_dai__Var_std__allocatorT_dai__Var_t_t, 0 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( FactorGraph_factor, _wrap_FactorGraph_factor, std::string() ) {
  dai::FactorGraph *arg1 = (dai::FactorGraph *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::Factor *result = 0 ;
  
  if (!SWIG_check_num_args("FactorGraph_factor",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__FactorGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FactorGraph_factor" "', argument " "1"" of type '" "dai::FactorGraph const *""'"); 
  }
  arg1 = reinterpret_cast< dai::FactorGraph * >(argp1);
  ecode2 = SWIG_AsVal_size_t(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FactorGraph_factor" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  result = (dai::Factor *) &((dai::FactorGraph const *)arg1)->factor(arg2);
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dai__TFactorT_double_t, 0 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( FactorGraph_factors, _wrap_FactorGraph_factors, std::string() ) {
  dai::FactorGraph *arg1 = (dai::FactorGraph *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  std::vector< dai::Factor,std::allocator< dai::Factor > > *result = 0 ;
  
  if (!SWIG_check_num_args("FactorGraph_factors",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__FactorGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FactorGraph_factors" "', argument " "1"" of type '" "dai::FactorGraph const *""'"); 
  }
  arg1 = reinterpret_cast< dai::FactorGraph * >(argp1);
  result = (std::vector< dai::Factor,std::allocator< dai::Factor > > *) &((dai::FactorGraph const *)arg1)->factors();
  _outv = swig::from(static_cast< std::vector< dai::TFactor< double >,std::allocator< dai::TFactor< double > > > >(*result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static octave_value_list _wrap_FactorGraph_nbV__SWIG_0 (const octave_value_list& args, int nargout) {
  dai::FactorGraph *arg1 = (dai::FactorGraph *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::Neighbors *result = 0 ;
  
  if (!SWIG_check_num_args("FactorGraph_nbV",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__FactorGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FactorGraph_nbV" "', argument " "1"" of type '" "dai::FactorGraph const *""'"); 
  }
  arg1 = reinterpret_cast< dai::FactorGraph * >(argp1);
  ecode2 = SWIG_AsVal_size_t(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FactorGraph_nbV" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  result = (dai::Neighbors *) &((dai::FactorGraph const *)arg1)->nbV(arg2);
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_dai__Neighbor_std__allocatorT_dai__Neighbor_t_t, 0 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static octave_value_list _wrap_FactorGraph_nbF__SWIG_0 (const octave_value_list& args, int nargout) {
  dai::FactorGraph *arg1 = (dai::FactorGraph *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::Neighbors *result = 0 ;
  
  if (!SWIG_check_num_args("FactorGraph_nbF",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__FactorGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FactorGraph_nbF" "', argument " "1"" of type '" "dai::FactorGraph const *""'"); 
  }
  arg1 = reinterpret_cast< dai::FactorGraph * >(argp1);
  ecode2 = SWIG_AsVal_size_t(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FactorGraph_nbF" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  result = (dai::Neighbors *) &((dai::FactorGraph const *)arg1)->nbF(arg2);
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_dai__Neighbor_std__allocatorT_dai__Neighbor_t_t, 0 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static octave_value_list _wrap_FactorGraph_nbV__SWIG_1 (const octave_value_list& args, int nargout) {
  dai::FactorGraph *arg1 = (dai::FactorGraph *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::Neighbor *result = 0 ;
  
  if (!SWIG_check_num_args("FactorGraph_nbV",args.length(),3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__FactorGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FactorGraph_nbV" "', argument " "1"" of type '" "dai::FactorGraph const *""'"); 
  }
  arg1 = reinterpret_cast< dai::FactorGraph * >(argp1);
  ecode2 = SWIG_AsVal_size_t(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FactorGraph_nbV" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  ecode3 = SWIG_AsVal_size_t(args(2), &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "FactorGraph_nbV" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  result = (dai::Neighbor *) &((dai::FactorGraph const *)arg1)->nbV(arg2,arg3);
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dai__Neighbor, 0 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( FactorGraph_nbV, _wrap_FactorGraph_nbV, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[3]={
    octave_value_ref(args,0),octave_value_ref(args,1),octave_value_ref(args,2)
  };
  
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dai__FactorGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_FactorGraph_nbV__SWIG_0(args, nargout);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dai__FactorGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_FactorGraph_nbV__SWIG_1(args, nargout);
        }
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


static octave_value_list _wrap_FactorGraph_nbF__SWIG_1 (const octave_value_list& args, int nargout) {
  dai::FactorGraph *arg1 = (dai::FactorGraph *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::Neighbor *result = 0 ;
  
  if (!SWIG_check_num_args("FactorGraph_nbF",args.length(),3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__FactorGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FactorGraph_nbF" "', argument " "1"" of type '" "dai::FactorGraph const *""'"); 
  }
  arg1 = reinterpret_cast< dai::FactorGraph * >(argp1);
  ecode2 = SWIG_AsVal_size_t(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FactorGraph_nbF" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  ecode3 = SWIG_AsVal_size_t(args(2), &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "FactorGraph_nbF" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  result = (dai::Neighbor *) &((dai::FactorGraph const *)arg1)->nbF(arg2,arg3);
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dai__Neighbor, 0 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( FactorGraph_nbF, _wrap_FactorGraph_nbF, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[3]={
    octave_value_ref(args,0),octave_value_ref(args,1),octave_value_ref(args,2)
  };
  
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dai__FactorGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_FactorGraph_nbF__SWIG_0(args, nargout);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dai__FactorGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_FactorGraph_nbF__SWIG_1(args, nargout);
        }
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


SWIG_DEFUN( FactorGraph_bipGraph, _wrap_FactorGraph_bipGraph, std::string() ) {
  dai::FactorGraph *arg1 = (dai::FactorGraph *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::BipartiteGraph *result = 0 ;
  
  if (!SWIG_check_num_args("FactorGraph_bipGraph",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__FactorGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FactorGraph_bipGraph" "', argument " "1"" of type '" "dai::FactorGraph const *""'"); 
  }
  arg1 = reinterpret_cast< dai::FactorGraph * >(argp1);
  result = (dai::BipartiteGraph *) &((dai::FactorGraph const *)arg1)->bipGraph();
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dai__BipartiteGraph, 0 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( FactorGraph_nrVars, _wrap_FactorGraph_nrVars, std::string() ) {
  dai::FactorGraph *arg1 = (dai::FactorGraph *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  size_t result;
  
  if (!SWIG_check_num_args("FactorGraph_nrVars",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__FactorGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FactorGraph_nrVars" "', argument " "1"" of type '" "dai::FactorGraph const *""'"); 
  }
  arg1 = reinterpret_cast< dai::FactorGraph * >(argp1);
  result = ((dai::FactorGraph const *)arg1)->nrVars();
  _outv = SWIG_From_size_t(static_cast< size_t >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( FactorGraph_nrFactors, _wrap_FactorGraph_nrFactors, std::string() ) {
  dai::FactorGraph *arg1 = (dai::FactorGraph *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  size_t result;
  
  if (!SWIG_check_num_args("FactorGraph_nrFactors",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__FactorGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FactorGraph_nrFactors" "', argument " "1"" of type '" "dai::FactorGraph const *""'"); 
  }
  arg1 = reinterpret_cast< dai::FactorGraph * >(argp1);
  result = ((dai::FactorGraph const *)arg1)->nrFactors();
  _outv = SWIG_From_size_t(static_cast< size_t >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( FactorGraph_nrEdges, _wrap_FactorGraph_nrEdges, std::string() ) {
  dai::FactorGraph *arg1 = (dai::FactorGraph *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  size_t result;
  
  if (!SWIG_check_num_args("FactorGraph_nrEdges",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__FactorGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FactorGraph_nrEdges" "', argument " "1"" of type '" "dai::FactorGraph const *""'"); 
  }
  arg1 = reinterpret_cast< dai::FactorGraph * >(argp1);
  result = ((dai::FactorGraph const *)arg1)->nrEdges();
  _outv = SWIG_From_size_t(static_cast< size_t >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( FactorGraph_findVar, _wrap_FactorGraph_findVar, std::string() ) {
  dai::FactorGraph *arg1 = (dai::FactorGraph *) 0 ;
  dai::Var *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  size_t result;
  
  if (!SWIG_check_num_args("FactorGraph_findVar",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__FactorGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FactorGraph_findVar" "', argument " "1"" of type '" "dai::FactorGraph const *""'"); 
  }
  arg1 = reinterpret_cast< dai::FactorGraph * >(argp1);
  res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_dai__Var,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FactorGraph_findVar" "', argument " "2"" of type '" "dai::Var const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FactorGraph_findVar" "', argument " "2"" of type '" "dai::Var const &""'"); 
  }
  arg2 = reinterpret_cast< dai::Var * >(argp2);
  result = ((dai::FactorGraph const *)arg1)->findVar((dai::Var const &)*arg2);
  _outv = SWIG_From_size_t(static_cast< size_t >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( FactorGraph_findVars, _wrap_FactorGraph_findVars, std::string() ) {
  dai::FactorGraph *arg1 = (dai::FactorGraph *) 0 ;
  dai::VarSet *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  SwigValueWrapper< dai::SmallSet< size_t > > result;
  
  if (!SWIG_check_num_args("FactorGraph_findVars",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__FactorGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FactorGraph_findVars" "', argument " "1"" of type '" "dai::FactorGraph const *""'"); 
  }
  arg1 = reinterpret_cast< dai::FactorGraph * >(argp1);
  res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_dai__VarSet,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FactorGraph_findVars" "', argument " "2"" of type '" "dai::VarSet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FactorGraph_findVars" "', argument " "2"" of type '" "dai::VarSet const &""'"); 
  }
  arg2 = reinterpret_cast< dai::VarSet * >(argp2);
  result = ((dai::FactorGraph const *)arg1)->findVars((dai::VarSet const &)*arg2);
  _outv = SWIG_NewPointerObj((new dai::SmallSet< size_t >(static_cast< const dai::SmallSet< size_t >& >(result))), SWIGTYPE_p_dai__SmallSetT_size_t_t, SWIG_POINTER_OWN |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( FactorGraph_findFactor, _wrap_FactorGraph_findFactor, std::string() ) {
  dai::FactorGraph *arg1 = (dai::FactorGraph *) 0 ;
  dai::VarSet *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  size_t result;
  
  if (!SWIG_check_num_args("FactorGraph_findFactor",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__FactorGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FactorGraph_findFactor" "', argument " "1"" of type '" "dai::FactorGraph const *""'"); 
  }
  arg1 = reinterpret_cast< dai::FactorGraph * >(argp1);
  res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_dai__VarSet,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FactorGraph_findFactor" "', argument " "2"" of type '" "dai::VarSet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FactorGraph_findFactor" "', argument " "2"" of type '" "dai::VarSet const &""'"); 
  }
  arg2 = reinterpret_cast< dai::VarSet * >(argp2);
  result = ((dai::FactorGraph const *)arg1)->findFactor((dai::VarSet const &)*arg2);
  _outv = SWIG_From_size_t(static_cast< size_t >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( FactorGraph_inds2vars, _wrap_FactorGraph_inds2vars, std::string() ) {
  dai::FactorGraph *arg1 = (dai::FactorGraph *) 0 ;
  std::vector< size_t,std::allocator< size_t > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::VarSet result;
  
  if (!SWIG_check_num_args("FactorGraph_inds2vars",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__FactorGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FactorGraph_inds2vars" "', argument " "1"" of type '" "dai::FactorGraph const *""'"); 
  }
  arg1 = reinterpret_cast< dai::FactorGraph * >(argp1);
  {
    std::vector< size_t,std::allocator< size_t > > *ptr = (std::vector< size_t,std::allocator< size_t > > *)0;
    res2 = swig::asptr(args(1), &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FactorGraph_inds2vars" "', argument " "2"" of type '" "std::vector< size_t,std::allocator< size_t > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FactorGraph_inds2vars" "', argument " "2"" of type '" "std::vector< size_t,std::allocator< size_t > > const &""'"); 
    }
    arg2 = ptr;
  }
  result = ((dai::FactorGraph const *)arg1)->inds2vars((std::vector< size_t,std::allocator< size_t > > const &)*arg2);
  _outv = SWIG_NewPointerObj((new dai::VarSet(static_cast< const dai::VarSet& >(result))), SWIGTYPE_p_dai__VarSet, SWIG_POINTER_OWN |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  if (SWIG_IsNewObj(res2)) delete arg2;
  return _out;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return octave_value_list();
}


static octave_value_list _wrap_FactorGraph_Delta__SWIG_0 (const octave_value_list& args, int nargout) {
  dai::FactorGraph *arg1 = (dai::FactorGraph *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::VarSet result;
  
  if (!SWIG_check_num_args("FactorGraph_Delta",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__FactorGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FactorGraph_Delta" "', argument " "1"" of type '" "dai::FactorGraph const *""'"); 
  }
  arg1 = reinterpret_cast< dai::FactorGraph * >(argp1);
  ecode2 = SWIG_AsVal_size_t(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FactorGraph_Delta" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  result = ((dai::FactorGraph const *)arg1)->Delta(arg2);
  _outv = SWIG_NewPointerObj((new dai::VarSet(static_cast< const dai::VarSet& >(result))), SWIGTYPE_p_dai__VarSet, SWIG_POINTER_OWN |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static octave_value_list _wrap_FactorGraph_Delta__SWIG_1 (const octave_value_list& args, int nargout) {
  dai::FactorGraph *arg1 = (dai::FactorGraph *) 0 ;
  dai::VarSet *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::VarSet result;
  
  if (!SWIG_check_num_args("FactorGraph_Delta",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__FactorGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FactorGraph_Delta" "', argument " "1"" of type '" "dai::FactorGraph const *""'"); 
  }
  arg1 = reinterpret_cast< dai::FactorGraph * >(argp1);
  res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_dai__VarSet,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FactorGraph_Delta" "', argument " "2"" of type '" "dai::VarSet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FactorGraph_Delta" "', argument " "2"" of type '" "dai::VarSet const &""'"); 
  }
  arg2 = reinterpret_cast< dai::VarSet * >(argp2);
  result = ((dai::FactorGraph const *)arg1)->Delta((dai::VarSet const &)*arg2);
  _outv = SWIG_NewPointerObj((new dai::VarSet(static_cast< const dai::VarSet& >(result))), SWIGTYPE_p_dai__VarSet, SWIG_POINTER_OWN |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( FactorGraph_Delta, _wrap_FactorGraph_Delta, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[2]={
    octave_value_ref(args,0),octave_value_ref(args,1)
  };
  
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dai__FactorGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_dai__VarSet, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_FactorGraph_Delta__SWIG_1(args, nargout);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dai__FactorGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_FactorGraph_Delta__SWIG_0(args, nargout);
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


static octave_value_list _wrap_FactorGraph_delta__SWIG_0 (const octave_value_list& args, int nargout) {
  dai::FactorGraph *arg1 = (dai::FactorGraph *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::VarSet result;
  
  if (!SWIG_check_num_args("FactorGraph_delta",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__FactorGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FactorGraph_delta" "', argument " "1"" of type '" "dai::FactorGraph const *""'"); 
  }
  arg1 = reinterpret_cast< dai::FactorGraph * >(argp1);
  ecode2 = SWIG_AsVal_size_t(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FactorGraph_delta" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  result = ((dai::FactorGraph const *)arg1)->delta(arg2);
  _outv = SWIG_NewPointerObj((new dai::VarSet(static_cast< const dai::VarSet& >(result))), SWIGTYPE_p_dai__VarSet, SWIG_POINTER_OWN |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static octave_value_list _wrap_FactorGraph_delta__SWIG_1 (const octave_value_list& args, int nargout) {
  dai::FactorGraph *arg1 = (dai::FactorGraph *) 0 ;
  dai::VarSet *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::VarSet result;
  
  if (!SWIG_check_num_args("FactorGraph_delta",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__FactorGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FactorGraph_delta" "', argument " "1"" of type '" "dai::FactorGraph const *""'"); 
  }
  arg1 = reinterpret_cast< dai::FactorGraph * >(argp1);
  res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_dai__VarSet,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FactorGraph_delta" "', argument " "2"" of type '" "dai::VarSet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FactorGraph_delta" "', argument " "2"" of type '" "dai::VarSet const &""'"); 
  }
  arg2 = reinterpret_cast< dai::VarSet * >(argp2);
  result = ((dai::FactorGraph const *)arg1)->delta((dai::VarSet const &)*arg2);
  _outv = SWIG_NewPointerObj((new dai::VarSet(static_cast< const dai::VarSet& >(result))), SWIGTYPE_p_dai__VarSet, SWIG_POINTER_OWN |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( FactorGraph_delta, _wrap_FactorGraph_delta, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[2]={
    octave_value_ref(args,0),octave_value_ref(args,1)
  };
  
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dai__FactorGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_dai__VarSet, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_FactorGraph_delta__SWIG_1(args, nargout);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dai__FactorGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_FactorGraph_delta__SWIG_0(args, nargout);
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


SWIG_DEFUN( FactorGraph_Deltai, _wrap_FactorGraph_Deltai, std::string() ) {
  dai::FactorGraph *arg1 = (dai::FactorGraph *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  SwigValueWrapper< dai::SmallSet< size_t > > result;
  
  if (!SWIG_check_num_args("FactorGraph_Deltai",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__FactorGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FactorGraph_Deltai" "', argument " "1"" of type '" "dai::FactorGraph const *""'"); 
  }
  arg1 = reinterpret_cast< dai::FactorGraph * >(argp1);
  ecode2 = SWIG_AsVal_size_t(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FactorGraph_Deltai" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  result = ((dai::FactorGraph const *)arg1)->Deltai(arg2);
  _outv = SWIG_NewPointerObj((new dai::SmallSet< size_t >(static_cast< const dai::SmallSet< size_t >& >(result))), SWIGTYPE_p_dai__SmallSetT_size_t_t, SWIG_POINTER_OWN |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( FactorGraph_deltai, _wrap_FactorGraph_deltai, std::string() ) {
  dai::FactorGraph *arg1 = (dai::FactorGraph *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  SwigValueWrapper< dai::SmallSet< size_t > > result;
  
  if (!SWIG_check_num_args("FactorGraph_deltai",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__FactorGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FactorGraph_deltai" "', argument " "1"" of type '" "dai::FactorGraph const *""'"); 
  }
  arg1 = reinterpret_cast< dai::FactorGraph * >(argp1);
  ecode2 = SWIG_AsVal_size_t(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FactorGraph_deltai" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  result = ((dai::FactorGraph const *)arg1)->deltai(arg2);
  _outv = SWIG_NewPointerObj((new dai::SmallSet< size_t >(static_cast< const dai::SmallSet< size_t >& >(result))), SWIGTYPE_p_dai__SmallSetT_size_t_t, SWIG_POINTER_OWN |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( FactorGraph_isConnected, _wrap_FactorGraph_isConnected, std::string() ) {
  dai::FactorGraph *arg1 = (dai::FactorGraph *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  bool result;
  
  if (!SWIG_check_num_args("FactorGraph_isConnected",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__FactorGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FactorGraph_isConnected" "', argument " "1"" of type '" "dai::FactorGraph const *""'"); 
  }
  arg1 = reinterpret_cast< dai::FactorGraph * >(argp1);
  result = (bool)((dai::FactorGraph const *)arg1)->isConnected();
  _outv = SWIG_From_bool(static_cast< bool >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( FactorGraph_isTree, _wrap_FactorGraph_isTree, std::string() ) {
  dai::FactorGraph *arg1 = (dai::FactorGraph *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  bool result;
  
  if (!SWIG_check_num_args("FactorGraph_isTree",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__FactorGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FactorGraph_isTree" "', argument " "1"" of type '" "dai::FactorGraph const *""'"); 
  }
  arg1 = reinterpret_cast< dai::FactorGraph * >(argp1);
  result = (bool)((dai::FactorGraph const *)arg1)->isTree();
  _outv = SWIG_From_bool(static_cast< bool >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( FactorGraph_isPairwise, _wrap_FactorGraph_isPairwise, std::string() ) {
  dai::FactorGraph *arg1 = (dai::FactorGraph *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  bool result;
  
  if (!SWIG_check_num_args("FactorGraph_isPairwise",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__FactorGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FactorGraph_isPairwise" "', argument " "1"" of type '" "dai::FactorGraph const *""'"); 
  }
  arg1 = reinterpret_cast< dai::FactorGraph * >(argp1);
  result = (bool)((dai::FactorGraph const *)arg1)->isPairwise();
  _outv = SWIG_From_bool(static_cast< bool >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( FactorGraph_isBinary, _wrap_FactorGraph_isBinary, std::string() ) {
  dai::FactorGraph *arg1 = (dai::FactorGraph *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  bool result;
  
  if (!SWIG_check_num_args("FactorGraph_isBinary",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__FactorGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FactorGraph_isBinary" "', argument " "1"" of type '" "dai::FactorGraph const *""'"); 
  }
  arg1 = reinterpret_cast< dai::FactorGraph * >(argp1);
  result = (bool)((dai::FactorGraph const *)arg1)->isBinary();
  _outv = SWIG_From_bool(static_cast< bool >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( FactorGraph_MarkovGraph, _wrap_FactorGraph_MarkovGraph, std::string() ) {
  dai::FactorGraph *arg1 = (dai::FactorGraph *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::GraphAL result;
  
  if (!SWIG_check_num_args("FactorGraph_MarkovGraph",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__FactorGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FactorGraph_MarkovGraph" "', argument " "1"" of type '" "dai::FactorGraph const *""'"); 
  }
  arg1 = reinterpret_cast< dai::FactorGraph * >(argp1);
  result = ((dai::FactorGraph const *)arg1)->MarkovGraph();
  _outv = SWIG_NewPointerObj((new dai::GraphAL(static_cast< const dai::GraphAL& >(result))), SWIGTYPE_p_dai__GraphAL, SWIG_POINTER_OWN |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( FactorGraph_isMaximal, _wrap_FactorGraph_isMaximal, std::string() ) {
  dai::FactorGraph *arg1 = (dai::FactorGraph *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  bool result;
  
  if (!SWIG_check_num_args("FactorGraph_isMaximal",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__FactorGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FactorGraph_isMaximal" "', argument " "1"" of type '" "dai::FactorGraph const *""'"); 
  }
  arg1 = reinterpret_cast< dai::FactorGraph * >(argp1);
  ecode2 = SWIG_AsVal_size_t(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FactorGraph_isMaximal" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  result = (bool)((dai::FactorGraph const *)arg1)->isMaximal(arg2);
  _outv = SWIG_From_bool(static_cast< bool >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( FactorGraph_maximalFactor, _wrap_FactorGraph_maximalFactor, std::string() ) {
  dai::FactorGraph *arg1 = (dai::FactorGraph *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  size_t result;
  
  if (!SWIG_check_num_args("FactorGraph_maximalFactor",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__FactorGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FactorGraph_maximalFactor" "', argument " "1"" of type '" "dai::FactorGraph const *""'"); 
  }
  arg1 = reinterpret_cast< dai::FactorGraph * >(argp1);
  ecode2 = SWIG_AsVal_size_t(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FactorGraph_maximalFactor" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  result = ((dai::FactorGraph const *)arg1)->maximalFactor(arg2);
  _outv = SWIG_From_size_t(static_cast< size_t >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( FactorGraph_maximalFactorDomains, _wrap_FactorGraph_maximalFactorDomains, std::string() ) {
  dai::FactorGraph *arg1 = (dai::FactorGraph *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  SwigValueWrapper< std::vector< dai::VarSet,std::allocator< dai::VarSet > > > result;
  
  if (!SWIG_check_num_args("FactorGraph_maximalFactorDomains",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__FactorGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FactorGraph_maximalFactorDomains" "', argument " "1"" of type '" "dai::FactorGraph const *""'"); 
  }
  arg1 = reinterpret_cast< dai::FactorGraph * >(argp1);
  result = ((dai::FactorGraph const *)arg1)->maximalFactorDomains();
  _outv = SWIG_NewPointerObj((new std::vector< dai::VarSet,std::allocator< dai::VarSet > >(static_cast< const std::vector< dai::VarSet,std::allocator< dai::VarSet > >& >(result))), SWIGTYPE_p_std__vectorT_dai__VarSet_std__allocatorT_dai__VarSet_t_t, SWIG_POINTER_OWN |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( FactorGraph_logScore, _wrap_FactorGraph_logScore, std::string() ) {
  dai::FactorGraph *arg1 = (dai::FactorGraph *) 0 ;
  std::vector< size_t,std::allocator< size_t > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::Real result;
  
  if (!SWIG_check_num_args("FactorGraph_logScore",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__FactorGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FactorGraph_logScore" "', argument " "1"" of type '" "dai::FactorGraph const *""'"); 
  }
  arg1 = reinterpret_cast< dai::FactorGraph * >(argp1);
  {
    std::vector< size_t,std::allocator< size_t > > *ptr = (std::vector< size_t,std::allocator< size_t > > *)0;
    res2 = swig::asptr(args(1), &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FactorGraph_logScore" "', argument " "2"" of type '" "std::vector< size_t,std::allocator< size_t > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FactorGraph_logScore" "', argument " "2"" of type '" "std::vector< size_t,std::allocator< size_t > > const &""'"); 
    }
    arg2 = ptr;
  }
  result = (dai::Real)((dai::FactorGraph const *)arg1)->logScore((std::vector< size_t,std::allocator< size_t > > const &)*arg2);
  _outv = SWIG_From_double(static_cast< double >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  if (SWIG_IsNewObj(res2)) delete arg2;
  return _out;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return octave_value_list();
}


static octave_value_list _wrap_FactorGraph_setFactor__SWIG_0 (const octave_value_list& args, int nargout) {
  dai::FactorGraph *arg1 = (dai::FactorGraph *) 0 ;
  size_t arg2 ;
  dai::Factor *arg3 = 0 ;
  bool arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("FactorGraph_setFactor",args.length(),4,4,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__FactorGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FactorGraph_setFactor" "', argument " "1"" of type '" "dai::FactorGraph *""'"); 
  }
  arg1 = reinterpret_cast< dai::FactorGraph * >(argp1);
  ecode2 = SWIG_AsVal_size_t(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FactorGraph_setFactor" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  res3 = SWIG_ConvertPtr(args(2), &argp3, SWIGTYPE_p_dai__TFactorT_double_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "FactorGraph_setFactor" "', argument " "3"" of type '" "dai::Factor const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FactorGraph_setFactor" "', argument " "3"" of type '" "dai::Factor const &""'"); 
  }
  arg3 = reinterpret_cast< dai::Factor * >(argp3);
  ecode4 = SWIG_AsVal_bool(args(3), &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "FactorGraph_setFactor" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  (arg1)->setFactor(arg2,(dai::Factor const &)*arg3,arg4);
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static octave_value_list _wrap_FactorGraph_setFactor__SWIG_1 (const octave_value_list& args, int nargout) {
  dai::FactorGraph *arg1 = (dai::FactorGraph *) 0 ;
  size_t arg2 ;
  dai::Factor *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("FactorGraph_setFactor",args.length(),3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__FactorGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FactorGraph_setFactor" "', argument " "1"" of type '" "dai::FactorGraph *""'"); 
  }
  arg1 = reinterpret_cast< dai::FactorGraph * >(argp1);
  ecode2 = SWIG_AsVal_size_t(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FactorGraph_setFactor" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  res3 = SWIG_ConvertPtr(args(2), &argp3, SWIGTYPE_p_dai__TFactorT_double_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "FactorGraph_setFactor" "', argument " "3"" of type '" "dai::Factor const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FactorGraph_setFactor" "', argument " "3"" of type '" "dai::Factor const &""'"); 
  }
  arg3 = reinterpret_cast< dai::Factor * >(argp3);
  (arg1)->setFactor(arg2,(dai::Factor const &)*arg3);
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( FactorGraph_setFactor, _wrap_FactorGraph_setFactor, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[4]={
    octave_value_ref(args,0),octave_value_ref(args,1),octave_value_ref(args,2),octave_value_ref(args,3)
  };
  
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dai__FactorGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_dai__TFactorT_double_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_FactorGraph_setFactor__SWIG_1(args, nargout);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dai__FactorGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_dai__TFactorT_double_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_FactorGraph_setFactor__SWIG_0(args, nargout);
          }
        }
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


static octave_value_list _wrap_FactorGraph_setFactors__SWIG_0 (const octave_value_list& args, int nargout) {
  dai::FactorGraph *arg1 = (dai::FactorGraph *) 0 ;
  std::map< size_t,dai::Factor > *arg2 = 0 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("FactorGraph_setFactors",args.length(),3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__FactorGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FactorGraph_setFactors" "', argument " "1"" of type '" "dai::FactorGraph *""'"); 
  }
  arg1 = reinterpret_cast< dai::FactorGraph * >(argp1);
  res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_std__mapT_size_t_dai__TFactorT_double_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FactorGraph_setFactors" "', argument " "2"" of type '" "std::map< size_t,dai::Factor > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FactorGraph_setFactors" "', argument " "2"" of type '" "std::map< size_t,dai::Factor > const &""'"); 
  }
  arg2 = reinterpret_cast< std::map< size_t,dai::Factor > * >(argp2);
  ecode3 = SWIG_AsVal_bool(args(2), &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "FactorGraph_setFactors" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  (arg1)->setFactors((std::map< size_t,dai::Factor > const &)*arg2,arg3);
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static octave_value_list _wrap_FactorGraph_setFactors__SWIG_1 (const octave_value_list& args, int nargout) {
  dai::FactorGraph *arg1 = (dai::FactorGraph *) 0 ;
  std::map< size_t,dai::Factor > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("FactorGraph_setFactors",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__FactorGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FactorGraph_setFactors" "', argument " "1"" of type '" "dai::FactorGraph *""'"); 
  }
  arg1 = reinterpret_cast< dai::FactorGraph * >(argp1);
  res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_std__mapT_size_t_dai__TFactorT_double_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FactorGraph_setFactors" "', argument " "2"" of type '" "std::map< size_t,dai::Factor > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FactorGraph_setFactors" "', argument " "2"" of type '" "std::map< size_t,dai::Factor > const &""'"); 
  }
  arg2 = reinterpret_cast< std::map< size_t,dai::Factor > * >(argp2);
  (arg1)->setFactors((std::map< size_t,dai::Factor > const &)*arg2);
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( FactorGraph_setFactors, _wrap_FactorGraph_setFactors, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[3]={
    octave_value_ref(args,0),octave_value_ref(args,1),octave_value_ref(args,2)
  };
  
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dai__FactorGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__mapT_size_t_dai__TFactorT_double_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_FactorGraph_setFactors__SWIG_1(args, nargout);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dai__FactorGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__mapT_size_t_dai__TFactorT_double_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_FactorGraph_setFactors__SWIG_0(args, nargout);
        }
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


SWIG_DEFUN( FactorGraph_backupFactor, _wrap_FactorGraph_backupFactor, std::string() ) {
  dai::FactorGraph *arg1 = (dai::FactorGraph *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("FactorGraph_backupFactor",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__FactorGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FactorGraph_backupFactor" "', argument " "1"" of type '" "dai::FactorGraph *""'"); 
  }
  arg1 = reinterpret_cast< dai::FactorGraph * >(argp1);
  ecode2 = SWIG_AsVal_size_t(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FactorGraph_backupFactor" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  (arg1)->backupFactor(arg2);
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( FactorGraph_restoreFactor, _wrap_FactorGraph_restoreFactor, std::string() ) {
  dai::FactorGraph *arg1 = (dai::FactorGraph *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("FactorGraph_restoreFactor",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__FactorGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FactorGraph_restoreFactor" "', argument " "1"" of type '" "dai::FactorGraph *""'"); 
  }
  arg1 = reinterpret_cast< dai::FactorGraph * >(argp1);
  ecode2 = SWIG_AsVal_size_t(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FactorGraph_restoreFactor" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  (arg1)->restoreFactor(arg2);
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static octave_value_list _wrap_FactorGraph_backupFactors__SWIG_0 (const octave_value_list& args, int nargout) {
  dai::FactorGraph *arg1 = (dai::FactorGraph *) 0 ;
  std::set< size_t > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("FactorGraph_backupFactors",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__FactorGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FactorGraph_backupFactors" "', argument " "1"" of type '" "dai::FactorGraph *""'"); 
  }
  arg1 = reinterpret_cast< dai::FactorGraph * >(argp1);
  res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_std__setT_size_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FactorGraph_backupFactors" "', argument " "2"" of type '" "std::set< size_t > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FactorGraph_backupFactors" "', argument " "2"" of type '" "std::set< size_t > const &""'"); 
  }
  arg2 = reinterpret_cast< std::set< size_t > * >(argp2);
  (arg1)->backupFactors((std::set< size_t > const &)*arg2);
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static octave_value_list _wrap_FactorGraph_restoreFactors__SWIG_0 (const octave_value_list& args, int nargout) {
  dai::FactorGraph *arg1 = (dai::FactorGraph *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("FactorGraph_restoreFactors",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__FactorGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FactorGraph_restoreFactors" "', argument " "1"" of type '" "dai::FactorGraph *""'"); 
  }
  arg1 = reinterpret_cast< dai::FactorGraph * >(argp1);
  (arg1)->restoreFactors();
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static octave_value_list _wrap_FactorGraph_backupFactors__SWIG_1 (const octave_value_list& args, int nargout) {
  dai::FactorGraph *arg1 = (dai::FactorGraph *) 0 ;
  dai::VarSet *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("FactorGraph_backupFactors",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__FactorGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FactorGraph_backupFactors" "', argument " "1"" of type '" "dai::FactorGraph *""'"); 
  }
  arg1 = reinterpret_cast< dai::FactorGraph * >(argp1);
  res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_dai__VarSet,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FactorGraph_backupFactors" "', argument " "2"" of type '" "dai::VarSet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FactorGraph_backupFactors" "', argument " "2"" of type '" "dai::VarSet const &""'"); 
  }
  arg2 = reinterpret_cast< dai::VarSet * >(argp2);
  (arg1)->backupFactors((dai::VarSet const &)*arg2);
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( FactorGraph_backupFactors, _wrap_FactorGraph_backupFactors, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[2]={
    octave_value_ref(args,0),octave_value_ref(args,1)
  };
  
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dai__FactorGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__setT_size_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_FactorGraph_backupFactors__SWIG_0(args, nargout);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dai__FactorGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_dai__VarSet, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_FactorGraph_backupFactors__SWIG_1(args, nargout);
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


static octave_value_list _wrap_FactorGraph_restoreFactors__SWIG_1 (const octave_value_list& args, int nargout) {
  dai::FactorGraph *arg1 = (dai::FactorGraph *) 0 ;
  dai::VarSet *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("FactorGraph_restoreFactors",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__FactorGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FactorGraph_restoreFactors" "', argument " "1"" of type '" "dai::FactorGraph *""'"); 
  }
  arg1 = reinterpret_cast< dai::FactorGraph * >(argp1);
  res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_dai__VarSet,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FactorGraph_restoreFactors" "', argument " "2"" of type '" "dai::VarSet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FactorGraph_restoreFactors" "', argument " "2"" of type '" "dai::VarSet const &""'"); 
  }
  arg2 = reinterpret_cast< dai::VarSet * >(argp2);
  (arg1)->restoreFactors((dai::VarSet const &)*arg2);
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( FactorGraph_restoreFactors, _wrap_FactorGraph_restoreFactors, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[2]={
    octave_value_ref(args,0),octave_value_ref(args,1)
  };
  
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dai__FactorGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_FactorGraph_restoreFactors__SWIG_0(args, nargout);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dai__FactorGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_dai__VarSet, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_FactorGraph_restoreFactors__SWIG_1(args, nargout);
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


SWIG_DEFUN( FactorGraph_maximalFactors, _wrap_FactorGraph_maximalFactors, std::string() ) {
  dai::FactorGraph *arg1 = (dai::FactorGraph *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::FactorGraph result;
  
  if (!SWIG_check_num_args("FactorGraph_maximalFactors",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__FactorGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FactorGraph_maximalFactors" "', argument " "1"" of type '" "dai::FactorGraph const *""'"); 
  }
  arg1 = reinterpret_cast< dai::FactorGraph * >(argp1);
  result = ((dai::FactorGraph const *)arg1)->maximalFactors();
  _outv = SWIG_NewPointerObj((new dai::FactorGraph(static_cast< const dai::FactorGraph& >(result))), SWIGTYPE_p_dai__FactorGraph, SWIG_POINTER_OWN |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( FactorGraph_clamped, _wrap_FactorGraph_clamped, std::string() ) {
  dai::FactorGraph *arg1 = (dai::FactorGraph *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::FactorGraph result;
  
  if (!SWIG_check_num_args("FactorGraph_clamped",args.length(),3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__FactorGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FactorGraph_clamped" "', argument " "1"" of type '" "dai::FactorGraph const *""'"); 
  }
  arg1 = reinterpret_cast< dai::FactorGraph * >(argp1);
  ecode2 = SWIG_AsVal_size_t(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FactorGraph_clamped" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  ecode3 = SWIG_AsVal_size_t(args(2), &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "FactorGraph_clamped" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  result = ((dai::FactorGraph const *)arg1)->clamped(arg2,arg3);
  _outv = SWIG_NewPointerObj((new dai::FactorGraph(static_cast< const dai::FactorGraph& >(result))), SWIGTYPE_p_dai__FactorGraph, SWIG_POINTER_OWN |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static octave_value_list _wrap_FactorGraph_clamp__SWIG_0 (const octave_value_list& args, int nargout) {
  dai::FactorGraph *arg1 = (dai::FactorGraph *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  bool arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("FactorGraph_clamp",args.length(),4,4,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__FactorGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FactorGraph_clamp" "', argument " "1"" of type '" "dai::FactorGraph *""'"); 
  }
  arg1 = reinterpret_cast< dai::FactorGraph * >(argp1);
  ecode2 = SWIG_AsVal_size_t(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FactorGraph_clamp" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  ecode3 = SWIG_AsVal_size_t(args(2), &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "FactorGraph_clamp" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  ecode4 = SWIG_AsVal_bool(args(3), &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "FactorGraph_clamp" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  (arg1)->clamp(arg2,arg3,arg4);
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static octave_value_list _wrap_FactorGraph_clamp__SWIG_1 (const octave_value_list& args, int nargout) {
  dai::FactorGraph *arg1 = (dai::FactorGraph *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("FactorGraph_clamp",args.length(),3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__FactorGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FactorGraph_clamp" "', argument " "1"" of type '" "dai::FactorGraph *""'"); 
  }
  arg1 = reinterpret_cast< dai::FactorGraph * >(argp1);
  ecode2 = SWIG_AsVal_size_t(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FactorGraph_clamp" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  ecode3 = SWIG_AsVal_size_t(args(2), &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "FactorGraph_clamp" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  (arg1)->clamp(arg2,arg3);
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( FactorGraph_clamp, _wrap_FactorGraph_clamp, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[4]={
    octave_value_ref(args,0),octave_value_ref(args,1),octave_value_ref(args,2),octave_value_ref(args,3)
  };
  
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dai__FactorGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_FactorGraph_clamp__SWIG_1(args, nargout);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dai__FactorGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_FactorGraph_clamp__SWIG_0(args, nargout);
          }
        }
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


static octave_value_list _wrap_FactorGraph_clampVar__SWIG_0 (const octave_value_list& args, int nargout) {
  dai::FactorGraph *arg1 = (dai::FactorGraph *) 0 ;
  size_t arg2 ;
  std::vector< size_t,std::allocator< size_t > > *arg3 = 0 ;
  bool arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  bool val4 ;
  int ecode4 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("FactorGraph_clampVar",args.length(),4,4,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__FactorGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FactorGraph_clampVar" "', argument " "1"" of type '" "dai::FactorGraph *""'"); 
  }
  arg1 = reinterpret_cast< dai::FactorGraph * >(argp1);
  ecode2 = SWIG_AsVal_size_t(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FactorGraph_clampVar" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    std::vector< size_t,std::allocator< size_t > > *ptr = (std::vector< size_t,std::allocator< size_t > > *)0;
    res3 = swig::asptr(args(2), &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "FactorGraph_clampVar" "', argument " "3"" of type '" "std::vector< size_t,std::allocator< size_t > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FactorGraph_clampVar" "', argument " "3"" of type '" "std::vector< size_t,std::allocator< size_t > > const &""'"); 
    }
    arg3 = ptr;
  }
  ecode4 = SWIG_AsVal_bool(args(3), &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "FactorGraph_clampVar" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  (arg1)->clampVar(arg2,(std::vector< size_t,std::allocator< size_t > > const &)*arg3,arg4);
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  if (SWIG_IsNewObj(res3)) delete arg3;
  return _out;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return octave_value_list();
}


static octave_value_list _wrap_FactorGraph_clampVar__SWIG_1 (const octave_value_list& args, int nargout) {
  dai::FactorGraph *arg1 = (dai::FactorGraph *) 0 ;
  size_t arg2 ;
  std::vector< size_t,std::allocator< size_t > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("FactorGraph_clampVar",args.length(),3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__FactorGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FactorGraph_clampVar" "', argument " "1"" of type '" "dai::FactorGraph *""'"); 
  }
  arg1 = reinterpret_cast< dai::FactorGraph * >(argp1);
  ecode2 = SWIG_AsVal_size_t(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FactorGraph_clampVar" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    std::vector< size_t,std::allocator< size_t > > *ptr = (std::vector< size_t,std::allocator< size_t > > *)0;
    res3 = swig::asptr(args(2), &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "FactorGraph_clampVar" "', argument " "3"" of type '" "std::vector< size_t,std::allocator< size_t > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FactorGraph_clampVar" "', argument " "3"" of type '" "std::vector< size_t,std::allocator< size_t > > const &""'"); 
    }
    arg3 = ptr;
  }
  (arg1)->clampVar(arg2,(std::vector< size_t,std::allocator< size_t > > const &)*arg3);
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  if (SWIG_IsNewObj(res3)) delete arg3;
  return _out;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return octave_value_list();
}


SWIG_DEFUN( FactorGraph_clampVar, _wrap_FactorGraph_clampVar, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[4]={
    octave_value_ref(args,0),octave_value_ref(args,1),octave_value_ref(args,2),octave_value_ref(args,3)
  };
  
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dai__FactorGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector< size_t,std::allocator< size_t > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_FactorGraph_clampVar__SWIG_1(args, nargout);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dai__FactorGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector< size_t,std::allocator< size_t > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_FactorGraph_clampVar__SWIG_0(args, nargout);
          }
        }
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


static octave_value_list _wrap_FactorGraph_clampFactor__SWIG_0 (const octave_value_list& args, int nargout) {
  dai::FactorGraph *arg1 = (dai::FactorGraph *) 0 ;
  size_t arg2 ;
  std::vector< size_t,std::allocator< size_t > > *arg3 = 0 ;
  bool arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  bool val4 ;
  int ecode4 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("FactorGraph_clampFactor",args.length(),4,4,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__FactorGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FactorGraph_clampFactor" "', argument " "1"" of type '" "dai::FactorGraph *""'"); 
  }
  arg1 = reinterpret_cast< dai::FactorGraph * >(argp1);
  ecode2 = SWIG_AsVal_size_t(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FactorGraph_clampFactor" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    std::vector< size_t,std::allocator< size_t > > *ptr = (std::vector< size_t,std::allocator< size_t > > *)0;
    res3 = swig::asptr(args(2), &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "FactorGraph_clampFactor" "', argument " "3"" of type '" "std::vector< size_t,std::allocator< size_t > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FactorGraph_clampFactor" "', argument " "3"" of type '" "std::vector< size_t,std::allocator< size_t > > const &""'"); 
    }
    arg3 = ptr;
  }
  ecode4 = SWIG_AsVal_bool(args(3), &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "FactorGraph_clampFactor" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  (arg1)->clampFactor(arg2,(std::vector< size_t,std::allocator< size_t > > const &)*arg3,arg4);
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  if (SWIG_IsNewObj(res3)) delete arg3;
  return _out;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return octave_value_list();
}


static octave_value_list _wrap_FactorGraph_clampFactor__SWIG_1 (const octave_value_list& args, int nargout) {
  dai::FactorGraph *arg1 = (dai::FactorGraph *) 0 ;
  size_t arg2 ;
  std::vector< size_t,std::allocator< size_t > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("FactorGraph_clampFactor",args.length(),3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__FactorGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FactorGraph_clampFactor" "', argument " "1"" of type '" "dai::FactorGraph *""'"); 
  }
  arg1 = reinterpret_cast< dai::FactorGraph * >(argp1);
  ecode2 = SWIG_AsVal_size_t(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FactorGraph_clampFactor" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    std::vector< size_t,std::allocator< size_t > > *ptr = (std::vector< size_t,std::allocator< size_t > > *)0;
    res3 = swig::asptr(args(2), &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "FactorGraph_clampFactor" "', argument " "3"" of type '" "std::vector< size_t,std::allocator< size_t > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FactorGraph_clampFactor" "', argument " "3"" of type '" "std::vector< size_t,std::allocator< size_t > > const &""'"); 
    }
    arg3 = ptr;
  }
  (arg1)->clampFactor(arg2,(std::vector< size_t,std::allocator< size_t > > const &)*arg3);
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  if (SWIG_IsNewObj(res3)) delete arg3;
  return _out;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return octave_value_list();
}


SWIG_DEFUN( FactorGraph_clampFactor, _wrap_FactorGraph_clampFactor, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[4]={
    octave_value_ref(args,0),octave_value_ref(args,1),octave_value_ref(args,2),octave_value_ref(args,3)
  };
  
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dai__FactorGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector< size_t,std::allocator< size_t > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_FactorGraph_clampFactor__SWIG_1(args, nargout);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dai__FactorGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector< size_t,std::allocator< size_t > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_FactorGraph_clampFactor__SWIG_0(args, nargout);
          }
        }
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


static octave_value_list _wrap_FactorGraph_makeCavity__SWIG_0 (const octave_value_list& args, int nargout) {
  dai::FactorGraph *arg1 = (dai::FactorGraph *) 0 ;
  size_t arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("FactorGraph_makeCavity",args.length(),3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__FactorGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FactorGraph_makeCavity" "', argument " "1"" of type '" "dai::FactorGraph *""'"); 
  }
  arg1 = reinterpret_cast< dai::FactorGraph * >(argp1);
  ecode2 = SWIG_AsVal_size_t(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FactorGraph_makeCavity" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  ecode3 = SWIG_AsVal_bool(args(2), &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "FactorGraph_makeCavity" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  (arg1)->makeCavity(arg2,arg3);
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static octave_value_list _wrap_FactorGraph_makeCavity__SWIG_1 (const octave_value_list& args, int nargout) {
  dai::FactorGraph *arg1 = (dai::FactorGraph *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("FactorGraph_makeCavity",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__FactorGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FactorGraph_makeCavity" "', argument " "1"" of type '" "dai::FactorGraph *""'"); 
  }
  arg1 = reinterpret_cast< dai::FactorGraph * >(argp1);
  ecode2 = SWIG_AsVal_size_t(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FactorGraph_makeCavity" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  (arg1)->makeCavity(arg2);
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( FactorGraph_makeCavity, _wrap_FactorGraph_makeCavity, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[3]={
    octave_value_ref(args,0),octave_value_ref(args,1),octave_value_ref(args,2)
  };
  
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dai__FactorGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_FactorGraph_makeCavity__SWIG_1(args, nargout);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dai__FactorGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_FactorGraph_makeCavity__SWIG_0(args, nargout);
        }
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


SWIG_DEFUN( FactorGraph_makeRegionCavity, _wrap_FactorGraph_makeRegionCavity, std::string() ) {
  dai::FactorGraph *arg1 = (dai::FactorGraph *) 0 ;
  std::vector< size_t,std::allocator< size_t > > arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("FactorGraph_makeRegionCavity",args.length(),3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__FactorGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FactorGraph_makeRegionCavity" "', argument " "1"" of type '" "dai::FactorGraph *""'"); 
  }
  arg1 = reinterpret_cast< dai::FactorGraph * >(argp1);
  {
    std::vector< size_t,std::allocator< size_t > > *ptr = (std::vector< size_t,std::allocator< size_t > > *)0;
    int res = swig::asptr(args(1), &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "FactorGraph_makeRegionCavity" "', argument " "2"" of type '" "std::vector< size_t,std::allocator< size_t > >""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  ecode3 = SWIG_AsVal_bool(args(2), &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "FactorGraph_makeRegionCavity" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  (arg1)->makeRegionCavity(arg2,arg3);
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( FactorGraph_ReadFromFile, _wrap_FactorGraph_ReadFromFile, std::string() ) {
  dai::FactorGraph *arg1 = (dai::FactorGraph *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("FactorGraph_ReadFromFile",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__FactorGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FactorGraph_ReadFromFile" "', argument " "1"" of type '" "dai::FactorGraph *""'"); 
  }
  arg1 = reinterpret_cast< dai::FactorGraph * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(args(1), &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FactorGraph_ReadFromFile" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  (arg1)->ReadFromFile((char const *)arg2);
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return _out;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return octave_value_list();
}


static octave_value_list _wrap_FactorGraph_WriteToFile__SWIG_0 (const octave_value_list& args, int nargout) {
  dai::FactorGraph *arg1 = (dai::FactorGraph *) 0 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("FactorGraph_WriteToFile",args.length(),3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__FactorGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FactorGraph_WriteToFile" "', argument " "1"" of type '" "dai::FactorGraph const *""'"); 
  }
  arg1 = reinterpret_cast< dai::FactorGraph * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(args(1), &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FactorGraph_WriteToFile" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_size_t(args(2), &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "FactorGraph_WriteToFile" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  ((dai::FactorGraph const *)arg1)->WriteToFile((char const *)arg2,arg3);
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return _out;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return octave_value_list();
}


static octave_value_list _wrap_FactorGraph_WriteToFile__SWIG_1 (const octave_value_list& args, int nargout) {
  dai::FactorGraph *arg1 = (dai::FactorGraph *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("FactorGraph_WriteToFile",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__FactorGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FactorGraph_WriteToFile" "', argument " "1"" of type '" "dai::FactorGraph const *""'"); 
  }
  arg1 = reinterpret_cast< dai::FactorGraph * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(args(1), &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FactorGraph_WriteToFile" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ((dai::FactorGraph const *)arg1)->WriteToFile((char const *)arg2);
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return _out;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return octave_value_list();
}


SWIG_DEFUN( FactorGraph_WriteToFile, _wrap_FactorGraph_WriteToFile, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[3]={
    octave_value_ref(args,0),octave_value_ref(args,1),octave_value_ref(args,2)
  };
  
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dai__FactorGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_FactorGraph_WriteToFile__SWIG_1(args, nargout);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dai__FactorGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_FactorGraph_WriteToFile__SWIG_0(args, nargout);
        }
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


static octave_value_list _wrap_FactorGraph_printDot__SWIG_0 (const octave_value_list& args, int nargout) {
  dai::FactorGraph *arg1 = (dai::FactorGraph *) 0 ;
  std::ostream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("FactorGraph_printDot",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__FactorGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FactorGraph_printDot" "', argument " "1"" of type '" "dai::FactorGraph const *""'"); 
  }
  arg1 = reinterpret_cast< dai::FactorGraph * >(argp1);
  res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_std__ostream,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FactorGraph_printDot" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FactorGraph_printDot" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  arg2 = reinterpret_cast< std::ostream * >(argp2);
  ((dai::FactorGraph const *)arg1)->printDot(*arg2);
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( FactorGraph_toString, _wrap_FactorGraph_toString, std::string() ) {
  dai::FactorGraph *arg1 = (dai::FactorGraph *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  std::string result;
  
  if (!SWIG_check_num_args("FactorGraph_toString",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__FactorGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FactorGraph_toString" "', argument " "1"" of type '" "dai::FactorGraph const *""'"); 
  }
  arg1 = reinterpret_cast< dai::FactorGraph * >(argp1);
  result = ((dai::FactorGraph const *)arg1)->toString();
  _outv = SWIG_From_std_string(static_cast< std::string >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( FactorGraph_fromString, _wrap_FactorGraph_fromString, std::string() ) {
  dai::FactorGraph *arg1 = (dai::FactorGraph *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("FactorGraph_fromString",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__FactorGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FactorGraph_fromString" "', argument " "1"" of type '" "dai::FactorGraph *""'"); 
  }
  arg1 = reinterpret_cast< dai::FactorGraph * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(args(1), &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FactorGraph_fromString" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FactorGraph_fromString" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  (arg1)->fromString((std::string const &)*arg2);
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  if (SWIG_IsNewObj(res2)) delete arg2;
  return _out;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return octave_value_list();
}


SWIG_DEFUN( FactorGraph___str__, _wrap_FactorGraph___str__, std::string() ) {
  dai::FactorGraph *arg1 = (dai::FactorGraph *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  char *result = 0 ;
  
  if (!SWIG_check_num_args("FactorGraph___str__",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__FactorGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FactorGraph___str__" "', argument " "1"" of type '" "dai::FactorGraph const *""'"); 
  }
  arg1 = reinterpret_cast< dai::FactorGraph * >(argp1);
  result = (char *)dai_FactorGraph___str__((dai::FactorGraph const *)arg1);
  _outv = SWIG_FromCharPtr((const char *)result);
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( FactorGraph___str, _wrap_FactorGraph___str, std::string() ) {
  dai::FactorGraph *arg1 = (dai::FactorGraph *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  std::string result;
  
  if (!SWIG_check_num_args("FactorGraph___str",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__FactorGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FactorGraph___str" "', argument " "1"" of type '" "dai::FactorGraph const *""'"); 
  }
  arg1 = reinterpret_cast< dai::FactorGraph * >(argp1);
  result = dai_FactorGraph___str((dai::FactorGraph const *)arg1);
  _outv = SWIG_From_std_string(static_cast< std::string >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static octave_value_list _wrap_FactorGraph_printDot__SWIG_1 (const octave_value_list& args, int nargout) {
  dai::FactorGraph *arg1 = (dai::FactorGraph *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("FactorGraph_printDot",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__FactorGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FactorGraph_printDot" "', argument " "1"" of type '" "dai::FactorGraph const *""'"); 
  }
  arg1 = reinterpret_cast< dai::FactorGraph * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(args(1), &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FactorGraph_printDot" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FactorGraph_printDot" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  dai_FactorGraph_printDot__SWIG_1((dai::FactorGraph const *)arg1,(std::string const &)*arg2);
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  if (SWIG_IsNewObj(res2)) delete arg2;
  return _out;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return octave_value_list();
}


SWIG_DEFUN( FactorGraph_printDot, _wrap_FactorGraph_printDot, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[2]={
    octave_value_ref(args,0),octave_value_ref(args,1)
  };
  
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dai__FactorGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__ostream, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_FactorGraph_printDot__SWIG_0(args, nargout);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dai__FactorGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_FactorGraph_printDot__SWIG_1(args, nargout);
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


static swig_octave_member swig_FactorGraph_members[] = {
{"clone",_wrap_FactorGraph_clone,0,0,0,0},
{"var",_wrap_FactorGraph_var,0,0,0,0},
{"vars",_wrap_FactorGraph_vars,0,0,0,0},
{"factor",_wrap_FactorGraph_factor,0,0,0,0},
{"factors",_wrap_FactorGraph_factors,0,0,0,0},
{"nbV",_wrap_FactorGraph_nbV,0,0,0,0},
{"nbF",_wrap_FactorGraph_nbF,0,0,0,0},
{"bipGraph",_wrap_FactorGraph_bipGraph,0,0,0,0},
{"nrVars",_wrap_FactorGraph_nrVars,0,0,0,0},
{"nrFactors",_wrap_FactorGraph_nrFactors,0,0,0,0},
{"nrEdges",_wrap_FactorGraph_nrEdges,0,0,0,0},
{"findVar",_wrap_FactorGraph_findVar,0,0,0,0},
{"findVars",_wrap_FactorGraph_findVars,0,0,0,0},
{"findFactor",_wrap_FactorGraph_findFactor,0,0,0,0},
{"inds2vars",_wrap_FactorGraph_inds2vars,0,0,0,0},
{"Delta",_wrap_FactorGraph_Delta,0,0,0,0},
{"delta",_wrap_FactorGraph_delta,0,0,0,0},
{"Deltai",_wrap_FactorGraph_Deltai,0,0,0,0},
{"deltai",_wrap_FactorGraph_deltai,0,0,0,0},
{"isConnected",_wrap_FactorGraph_isConnected,0,0,0,0},
{"isTree",_wrap_FactorGraph_isTree,0,0,0,0},
{"isPairwise",_wrap_FactorGraph_isPairwise,0,0,0,0},
{"isBinary",_wrap_FactorGraph_isBinary,0,0,0,0},
{"MarkovGraph",_wrap_FactorGraph_MarkovGraph,0,0,0,0},
{"isMaximal",_wrap_FactorGraph_isMaximal,0,0,0,0},
{"maximalFactor",_wrap_FactorGraph_maximalFactor,0,0,0,0},
{"maximalFactorDomains",_wrap_FactorGraph_maximalFactorDomains,0,0,0,0},
{"logScore",_wrap_FactorGraph_logScore,0,0,0,0},
{"setFactor",_wrap_FactorGraph_setFactor,0,0,0,0},
{"setFactors",_wrap_FactorGraph_setFactors,0,0,0,0},
{"backupFactor",_wrap_FactorGraph_backupFactor,0,0,0,0},
{"restoreFactor",_wrap_FactorGraph_restoreFactor,0,0,0,0},
{"backupFactors",_wrap_FactorGraph_backupFactors,0,0,0,0},
{"restoreFactors",_wrap_FactorGraph_restoreFactors,0,0,0,0},
{"maximalFactors",_wrap_FactorGraph_maximalFactors,0,0,0,0},
{"clamped",_wrap_FactorGraph_clamped,0,0,0,0},
{"clamp",_wrap_FactorGraph_clamp,0,0,0,0},
{"clampVar",_wrap_FactorGraph_clampVar,0,0,0,0},
{"clampFactor",_wrap_FactorGraph_clampFactor,0,0,0,0},
{"makeCavity",_wrap_FactorGraph_makeCavity,0,0,0,0},
{"makeRegionCavity",_wrap_FactorGraph_makeRegionCavity,0,0,0,0},
{"ReadFromFile",_wrap_FactorGraph_ReadFromFile,0,0,0,0},
{"WriteToFile",_wrap_FactorGraph_WriteToFile,0,0,0,0},
{"toString",_wrap_FactorGraph_toString,0,0,0,0},
{"fromString",_wrap_FactorGraph_fromString,0,0,0,0},
{"__str__",_wrap_FactorGraph___str__,0,0,0,0},
{"__str",_wrap_FactorGraph___str,0,0,0,0},
{"printDot",_wrap_FactorGraph_printDot,0,0,0,0},
{0,0,0,0,0,0}
};
static const char *swig_FactorGraph_base_names[] = {0};
static const swig_type_info *swig_FactorGraph_base[] = {0};
static swig_octave_class _wrap_class_FactorGraph = {"FactorGraph", &SWIGTYPE_p_dai__FactorGraph,0,_wrap_new_FactorGraph,0,_wrap_delete_FactorGraph,swig_FactorGraph_members,swig_FactorGraph_base_names,swig_FactorGraph_base };

static octave_value_list _wrap_new_Region__SWIG_0 (const octave_value_list& args, int nargout) {
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::Region *result = 0 ;
  
  if (!SWIG_check_num_args("new_Region",args.length(),0,0,0)) {
    SWIG_fail;
  }
  result = (dai::Region *)new dai::Region();
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dai__Region, 1 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static octave_value_list _wrap_new_Region__SWIG_1 (const octave_value_list& args, int nargout) {
  dai::VarSet *arg1 = 0 ;
  dai::Real arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::Region *result = 0 ;
  
  if (!SWIG_check_num_args("new_Region",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1, SWIGTYPE_p_dai__VarSet,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Region" "', argument " "1"" of type '" "dai::VarSet const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Region" "', argument " "1"" of type '" "dai::VarSet const &""'"); 
  }
  arg1 = reinterpret_cast< dai::VarSet * >(argp1);
  ecode2 = SWIG_AsVal_double(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Region" "', argument " "2"" of type '" "dai::Real""'");
  } 
  arg2 = static_cast< dai::Real >(val2);
  result = (dai::Region *)new dai::Region((dai::VarSet const &)*arg1,arg2);
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dai__Region, 1 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( new_Region, _wrap_new_Region, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[2]={
    octave_value_ref(args,0),octave_value_ref(args,1)
  };
  
  if (argc == 0) {
    return _wrap_new_Region__SWIG_0(args, nargout);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dai__VarSet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_Region__SWIG_1(args, nargout);
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


static octave_value_list _wrap_Region_c__SWIG_0 (const octave_value_list& args, int nargout) {
  dai::Region *arg1 = (dai::Region *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::Real *result = 0 ;
  
  if (!SWIG_check_num_args("Region_c",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__Region, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Region_c" "', argument " "1"" of type '" "dai::Region const *""'"); 
  }
  arg1 = reinterpret_cast< dai::Region * >(argp1);
  result = (dai::Real *) &((dai::Region const *)arg1)->c();
  _outv = SWIG_From_double(static_cast< double >(*result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static octave_value_list _wrap_Region_c__SWIG_1 (const octave_value_list& args, int nargout) {
  dai::Region *arg1 = (dai::Region *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::Real *result = 0 ;
  
  if (!SWIG_check_num_args("Region_c",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__Region, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Region_c" "', argument " "1"" of type '" "dai::Region *""'"); 
  }
  arg1 = reinterpret_cast< dai::Region * >(argp1);
  result = (dai::Real *) &(arg1)->c();
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( Region_c, _wrap_Region_c, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[1]={
    octave_value_ref(args,0)
  };
  
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dai__Region, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Region_c__SWIG_1(args, nargout);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dai__Region, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Region_c__SWIG_0(args, nargout);
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


SWIG_DEFUN( delete_Region, _wrap_delete_Region, std::string() ) {
  dai::Region *arg1 = (dai::Region *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("delete_Region",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__Region, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Region" "', argument " "1"" of type '" "dai::Region *""'"); 
  }
  arg1 = reinterpret_cast< dai::Region * >(argp1);
  delete arg1;
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static swig_octave_member swig_Region_members[] = {
{"c",_wrap_Region_c,0,0,0,0},
{0,0,0,0,0,0}
};
static const char *swig_Region_base_names[] = {"_p_dai__VarSet",0};
static const swig_type_info *swig_Region_base[] = {0,0};
static swig_octave_class _wrap_class_Region = {"Region", &SWIGTYPE_p_dai__Region,0,_wrap_new_Region,0,_wrap_delete_Region,swig_Region_members,swig_Region_base_names,swig_Region_base };

static octave_value_list _wrap_new_FRegion__SWIG_0 (const octave_value_list& args, int nargout) {
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::FRegion *result = 0 ;
  
  if (!SWIG_check_num_args("new_FRegion",args.length(),0,0,0)) {
    SWIG_fail;
  }
  result = (dai::FRegion *)new dai::FRegion();
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dai__FRegion, 1 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static octave_value_list _wrap_new_FRegion__SWIG_1 (const octave_value_list& args, int nargout) {
  dai::Factor *arg1 = 0 ;
  dai::Real arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::FRegion *result = 0 ;
  
  if (!SWIG_check_num_args("new_FRegion",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1, SWIGTYPE_p_dai__TFactorT_double_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_FRegion" "', argument " "1"" of type '" "dai::Factor const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_FRegion" "', argument " "1"" of type '" "dai::Factor const &""'"); 
  }
  arg1 = reinterpret_cast< dai::Factor * >(argp1);
  ecode2 = SWIG_AsVal_double(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_FRegion" "', argument " "2"" of type '" "dai::Real""'");
  } 
  arg2 = static_cast< dai::Real >(val2);
  result = (dai::FRegion *)new dai::FRegion((dai::Factor const &)*arg1,arg2);
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dai__FRegion, 1 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( new_FRegion, _wrap_new_FRegion, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[2]={
    octave_value_ref(args,0),octave_value_ref(args,1)
  };
  
  if (argc == 0) {
    return _wrap_new_FRegion__SWIG_0(args, nargout);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dai__TFactorT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_FRegion__SWIG_1(args, nargout);
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


static octave_value_list _wrap_FRegion_c__SWIG_0 (const octave_value_list& args, int nargout) {
  dai::FRegion *arg1 = (dai::FRegion *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::Real *result = 0 ;
  
  if (!SWIG_check_num_args("FRegion_c",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__FRegion, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FRegion_c" "', argument " "1"" of type '" "dai::FRegion const *""'"); 
  }
  arg1 = reinterpret_cast< dai::FRegion * >(argp1);
  result = (dai::Real *) &((dai::FRegion const *)arg1)->c();
  _outv = SWIG_From_double(static_cast< double >(*result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static octave_value_list _wrap_FRegion_c__SWIG_1 (const octave_value_list& args, int nargout) {
  dai::FRegion *arg1 = (dai::FRegion *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::Real *result = 0 ;
  
  if (!SWIG_check_num_args("FRegion_c",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__FRegion, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FRegion_c" "', argument " "1"" of type '" "dai::FRegion *""'"); 
  }
  arg1 = reinterpret_cast< dai::FRegion * >(argp1);
  result = (dai::Real *) &(arg1)->c();
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( FRegion_c, _wrap_FRegion_c, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[1]={
    octave_value_ref(args,0)
  };
  
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dai__FRegion, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_FRegion_c__SWIG_1(args, nargout);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dai__FRegion, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_FRegion_c__SWIG_0(args, nargout);
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


SWIG_DEFUN( delete_FRegion, _wrap_delete_FRegion, std::string() ) {
  dai::FRegion *arg1 = (dai::FRegion *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("delete_FRegion",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__FRegion, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_FRegion" "', argument " "1"" of type '" "dai::FRegion *""'"); 
  }
  arg1 = reinterpret_cast< dai::FRegion * >(argp1);
  delete arg1;
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static swig_octave_member swig_FRegion_members[] = {
{"c",_wrap_FRegion_c,0,0,0,0},
{0,0,0,0,0,0}
};
static const char *swig_FRegion_base_names[] = {"_p_dai__TFactorT_double_t",0};
static const swig_type_info *swig_FRegion_base[] = {0,0};
static swig_octave_class _wrap_class_FRegion = {"FRegion", &SWIGTYPE_p_dai__FRegion,0,_wrap_new_FRegion,0,_wrap_delete_FRegion,swig_FRegion_members,swig_FRegion_base_names,swig_FRegion_base };

static octave_value_list _wrap_new_RegionGraph__SWIG_0 (const octave_value_list& args, int nargout) {
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::RegionGraph *result = 0 ;
  
  if (!SWIG_check_num_args("new_RegionGraph",args.length(),0,0,0)) {
    SWIG_fail;
  }
  result = (dai::RegionGraph *)new dai::RegionGraph();
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dai__RegionGraph, 1 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static octave_value_list _wrap_new_RegionGraph__SWIG_1 (const octave_value_list& args, int nargout) {
  dai::FactorGraph *arg1 = 0 ;
  std::vector< dai::VarSet,std::allocator< dai::VarSet > > *arg2 = 0 ;
  std::vector< dai::Region,std::allocator< dai::Region > > *arg3 = 0 ;
  std::vector< std::pair< size_t,size_t >,std::allocator< std::pair< size_t,size_t > > > *arg4 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::RegionGraph *result = 0 ;
  
  if (!SWIG_check_num_args("new_RegionGraph",args.length(),4,4,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1, SWIGTYPE_p_dai__FactorGraph,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_RegionGraph" "', argument " "1"" of type '" "dai::FactorGraph const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_RegionGraph" "', argument " "1"" of type '" "dai::FactorGraph const &""'"); 
  }
  arg1 = reinterpret_cast< dai::FactorGraph * >(argp1);
  res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_std__vectorT_dai__VarSet_std__allocatorT_dai__VarSet_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_RegionGraph" "', argument " "2"" of type '" "std::vector< dai::VarSet,std::allocator< dai::VarSet > > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_RegionGraph" "', argument " "2"" of type '" "std::vector< dai::VarSet,std::allocator< dai::VarSet > > const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< dai::VarSet,std::allocator< dai::VarSet > > * >(argp2);
  res3 = SWIG_ConvertPtr(args(2), &argp3, SWIGTYPE_p_std__vectorT_dai__Region_std__allocatorT_dai__Region_t_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_RegionGraph" "', argument " "3"" of type '" "std::vector< dai::Region,std::allocator< dai::Region > > const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_RegionGraph" "', argument " "3"" of type '" "std::vector< dai::Region,std::allocator< dai::Region > > const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< dai::Region,std::allocator< dai::Region > > * >(argp3);
  res4 = SWIG_ConvertPtr(args(3), &argp4, SWIGTYPE_p_std__vectorT_std__pairT_size_t_size_t_t_std__allocatorT_std__pairT_size_t_size_t_t_t_t,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "new_RegionGraph" "', argument " "4"" of type '" "std::vector< std::pair< size_t,size_t >,std::allocator< std::pair< size_t,size_t > > > const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_RegionGraph" "', argument " "4"" of type '" "std::vector< std::pair< size_t,size_t >,std::allocator< std::pair< size_t,size_t > > > const &""'"); 
  }
  arg4 = reinterpret_cast< std::vector< std::pair< size_t,size_t >,std::allocator< std::pair< size_t,size_t > > > * >(argp4);
  result = (dai::RegionGraph *)new dai::RegionGraph((dai::FactorGraph const &)*arg1,(std::vector< dai::VarSet,std::allocator< dai::VarSet > > const &)*arg2,(std::vector< dai::Region,std::allocator< dai::Region > > const &)*arg3,(std::vector< std::pair< size_t,size_t >,std::allocator< std::pair< size_t,size_t > > > const &)*arg4);
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dai__RegionGraph, 1 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static octave_value_list _wrap_new_RegionGraph__SWIG_2 (const octave_value_list& args, int nargout) {
  dai::FactorGraph *arg1 = 0 ;
  std::vector< dai::VarSet,std::allocator< dai::VarSet > > *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::RegionGraph *result = 0 ;
  
  if (!SWIG_check_num_args("new_RegionGraph",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1, SWIGTYPE_p_dai__FactorGraph,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_RegionGraph" "', argument " "1"" of type '" "dai::FactorGraph const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_RegionGraph" "', argument " "1"" of type '" "dai::FactorGraph const &""'"); 
  }
  arg1 = reinterpret_cast< dai::FactorGraph * >(argp1);
  res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_std__vectorT_dai__VarSet_std__allocatorT_dai__VarSet_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_RegionGraph" "', argument " "2"" of type '" "std::vector< dai::VarSet,std::allocator< dai::VarSet > > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_RegionGraph" "', argument " "2"" of type '" "std::vector< dai::VarSet,std::allocator< dai::VarSet > > const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< dai::VarSet,std::allocator< dai::VarSet > > * >(argp2);
  result = (dai::RegionGraph *)new dai::RegionGraph((dai::FactorGraph const &)*arg1,(std::vector< dai::VarSet,std::allocator< dai::VarSet > > const &)*arg2);
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dai__RegionGraph, 1 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( new_RegionGraph, _wrap_new_RegionGraph, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[4]={
    octave_value_ref(args,0),octave_value_ref(args,1),octave_value_ref(args,2),octave_value_ref(args,3)
  };
  
  if (argc == 0) {
    return _wrap_new_RegionGraph__SWIG_0(args, nargout);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dai__FactorGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__vectorT_dai__VarSet_std__allocatorT_dai__VarSet_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_RegionGraph__SWIG_2(args, nargout);
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dai__FactorGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__vectorT_dai__VarSet_std__allocatorT_dai__VarSet_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_std__vectorT_dai__Region_std__allocatorT_dai__Region_t_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_std__vectorT_std__pairT_size_t_size_t_t_std__allocatorT_std__pairT_size_t_size_t_t_t_t, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_new_RegionGraph__SWIG_1(args, nargout);
          }
        }
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


SWIG_DEFUN( RegionGraph_clone, _wrap_RegionGraph_clone, std::string() ) {
  dai::RegionGraph *arg1 = (dai::RegionGraph *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::RegionGraph *result = 0 ;
  
  if (!SWIG_check_num_args("RegionGraph_clone",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__RegionGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RegionGraph_clone" "', argument " "1"" of type '" "dai::RegionGraph const *""'"); 
  }
  arg1 = reinterpret_cast< dai::RegionGraph * >(argp1);
  result = (dai::RegionGraph *)((dai::RegionGraph const *)arg1)->clone();
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dai__RegionGraph, 0 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( RegionGraph_nrORs, _wrap_RegionGraph_nrORs, std::string() ) {
  dai::RegionGraph *arg1 = (dai::RegionGraph *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  size_t result;
  
  if (!SWIG_check_num_args("RegionGraph_nrORs",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__RegionGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RegionGraph_nrORs" "', argument " "1"" of type '" "dai::RegionGraph const *""'"); 
  }
  arg1 = reinterpret_cast< dai::RegionGraph * >(argp1);
  result = ((dai::RegionGraph const *)arg1)->nrORs();
  _outv = SWIG_From_size_t(static_cast< size_t >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( RegionGraph_nrIRs, _wrap_RegionGraph_nrIRs, std::string() ) {
  dai::RegionGraph *arg1 = (dai::RegionGraph *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  size_t result;
  
  if (!SWIG_check_num_args("RegionGraph_nrIRs",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__RegionGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RegionGraph_nrIRs" "', argument " "1"" of type '" "dai::RegionGraph const *""'"); 
  }
  arg1 = reinterpret_cast< dai::RegionGraph * >(argp1);
  result = ((dai::RegionGraph const *)arg1)->nrIRs();
  _outv = SWIG_From_size_t(static_cast< size_t >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static octave_value_list _wrap_RegionGraph_OR__SWIG_0 (const octave_value_list& args, int nargout) {
  dai::RegionGraph *arg1 = (dai::RegionGraph *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::FRegion *result = 0 ;
  
  if (!SWIG_check_num_args("RegionGraph_OR",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__RegionGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RegionGraph_OR" "', argument " "1"" of type '" "dai::RegionGraph const *""'"); 
  }
  arg1 = reinterpret_cast< dai::RegionGraph * >(argp1);
  ecode2 = SWIG_AsVal_size_t(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RegionGraph_OR" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  result = (dai::FRegion *) &((dai::RegionGraph const *)arg1)->OR(arg2);
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dai__FRegion, 0 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static octave_value_list _wrap_RegionGraph_OR__SWIG_1 (const octave_value_list& args, int nargout) {
  dai::RegionGraph *arg1 = (dai::RegionGraph *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::FRegion *result = 0 ;
  
  if (!SWIG_check_num_args("RegionGraph_OR",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__RegionGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RegionGraph_OR" "', argument " "1"" of type '" "dai::RegionGraph *""'"); 
  }
  arg1 = reinterpret_cast< dai::RegionGraph * >(argp1);
  ecode2 = SWIG_AsVal_size_t(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RegionGraph_OR" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  result = (dai::FRegion *) &(arg1)->OR(arg2);
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dai__FRegion, 0 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( RegionGraph_OR, _wrap_RegionGraph_OR, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[2]={
    octave_value_ref(args,0),octave_value_ref(args,1)
  };
  
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dai__RegionGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_RegionGraph_OR__SWIG_1(args, nargout);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dai__RegionGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_RegionGraph_OR__SWIG_0(args, nargout);
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


static octave_value_list _wrap_RegionGraph_IR__SWIG_0 (const octave_value_list& args, int nargout) {
  dai::RegionGraph *arg1 = (dai::RegionGraph *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::Region *result = 0 ;
  
  if (!SWIG_check_num_args("RegionGraph_IR",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__RegionGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RegionGraph_IR" "', argument " "1"" of type '" "dai::RegionGraph const *""'"); 
  }
  arg1 = reinterpret_cast< dai::RegionGraph * >(argp1);
  ecode2 = SWIG_AsVal_size_t(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RegionGraph_IR" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  result = (dai::Region *) &((dai::RegionGraph const *)arg1)->IR(arg2);
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dai__Region, 0 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static octave_value_list _wrap_RegionGraph_IR__SWIG_1 (const octave_value_list& args, int nargout) {
  dai::RegionGraph *arg1 = (dai::RegionGraph *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::Region *result = 0 ;
  
  if (!SWIG_check_num_args("RegionGraph_IR",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__RegionGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RegionGraph_IR" "', argument " "1"" of type '" "dai::RegionGraph *""'"); 
  }
  arg1 = reinterpret_cast< dai::RegionGraph * >(argp1);
  ecode2 = SWIG_AsVal_size_t(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RegionGraph_IR" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  result = (dai::Region *) &(arg1)->IR(arg2);
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dai__Region, 0 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( RegionGraph_IR, _wrap_RegionGraph_IR, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[2]={
    octave_value_ref(args,0),octave_value_ref(args,1)
  };
  
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dai__RegionGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_RegionGraph_IR__SWIG_1(args, nargout);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dai__RegionGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_RegionGraph_IR__SWIG_0(args, nargout);
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


SWIG_DEFUN( RegionGraph_fac2OR, _wrap_RegionGraph_fac2OR, std::string() ) {
  dai::RegionGraph *arg1 = (dai::RegionGraph *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  size_t result;
  
  if (!SWIG_check_num_args("RegionGraph_fac2OR",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__RegionGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RegionGraph_fac2OR" "', argument " "1"" of type '" "dai::RegionGraph const *""'"); 
  }
  arg1 = reinterpret_cast< dai::RegionGraph * >(argp1);
  ecode2 = SWIG_AsVal_size_t(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RegionGraph_fac2OR" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  result = ((dai::RegionGraph const *)arg1)->fac2OR(arg2);
  _outv = SWIG_From_size_t(static_cast< size_t >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( RegionGraph_nbOR, _wrap_RegionGraph_nbOR, std::string() ) {
  dai::RegionGraph *arg1 = (dai::RegionGraph *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::Neighbors *result = 0 ;
  
  if (!SWIG_check_num_args("RegionGraph_nbOR",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__RegionGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RegionGraph_nbOR" "', argument " "1"" of type '" "dai::RegionGraph const *""'"); 
  }
  arg1 = reinterpret_cast< dai::RegionGraph * >(argp1);
  ecode2 = SWIG_AsVal_size_t(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RegionGraph_nbOR" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  result = (dai::Neighbors *) &((dai::RegionGraph const *)arg1)->nbOR(arg2);
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_dai__Neighbor_std__allocatorT_dai__Neighbor_t_t, 0 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( RegionGraph_nbIR, _wrap_RegionGraph_nbIR, std::string() ) {
  dai::RegionGraph *arg1 = (dai::RegionGraph *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::Neighbors *result = 0 ;
  
  if (!SWIG_check_num_args("RegionGraph_nbIR",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__RegionGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RegionGraph_nbIR" "', argument " "1"" of type '" "dai::RegionGraph const *""'"); 
  }
  arg1 = reinterpret_cast< dai::RegionGraph * >(argp1);
  ecode2 = SWIG_AsVal_size_t(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RegionGraph_nbIR" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  result = (dai::Neighbors *) &((dai::RegionGraph const *)arg1)->nbIR(arg2);
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_dai__Neighbor_std__allocatorT_dai__Neighbor_t_t, 0 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( RegionGraph_DAG, _wrap_RegionGraph_DAG, std::string() ) {
  dai::RegionGraph *arg1 = (dai::RegionGraph *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::BipartiteGraph *result = 0 ;
  
  if (!SWIG_check_num_args("RegionGraph_DAG",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__RegionGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RegionGraph_DAG" "', argument " "1"" of type '" "dai::RegionGraph const *""'"); 
  }
  arg1 = reinterpret_cast< dai::RegionGraph * >(argp1);
  result = (dai::BipartiteGraph *) &((dai::RegionGraph const *)arg1)->DAG();
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dai__BipartiteGraph, 0 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( RegionGraph_checkCountingNumbers, _wrap_RegionGraph_checkCountingNumbers, std::string() ) {
  dai::RegionGraph *arg1 = (dai::RegionGraph *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  bool result;
  
  if (!SWIG_check_num_args("RegionGraph_checkCountingNumbers",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__RegionGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RegionGraph_checkCountingNumbers" "', argument " "1"" of type '" "dai::RegionGraph const *""'"); 
  }
  arg1 = reinterpret_cast< dai::RegionGraph * >(argp1);
  result = (bool)((dai::RegionGraph const *)arg1)->checkCountingNumbers();
  _outv = SWIG_From_bool(static_cast< bool >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static octave_value_list _wrap_RegionGraph_setFactor__SWIG_0 (const octave_value_list& args, int nargout) {
  dai::RegionGraph *arg1 = (dai::RegionGraph *) 0 ;
  size_t arg2 ;
  dai::Factor *arg3 = 0 ;
  bool arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("RegionGraph_setFactor",args.length(),4,4,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__RegionGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RegionGraph_setFactor" "', argument " "1"" of type '" "dai::RegionGraph *""'"); 
  }
  arg1 = reinterpret_cast< dai::RegionGraph * >(argp1);
  ecode2 = SWIG_AsVal_size_t(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RegionGraph_setFactor" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  res3 = SWIG_ConvertPtr(args(2), &argp3, SWIGTYPE_p_dai__TFactorT_double_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "RegionGraph_setFactor" "', argument " "3"" of type '" "dai::Factor const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RegionGraph_setFactor" "', argument " "3"" of type '" "dai::Factor const &""'"); 
  }
  arg3 = reinterpret_cast< dai::Factor * >(argp3);
  ecode4 = SWIG_AsVal_bool(args(3), &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "RegionGraph_setFactor" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  (arg1)->setFactor(arg2,(dai::Factor const &)*arg3,arg4);
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static octave_value_list _wrap_RegionGraph_setFactor__SWIG_1 (const octave_value_list& args, int nargout) {
  dai::RegionGraph *arg1 = (dai::RegionGraph *) 0 ;
  size_t arg2 ;
  dai::Factor *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("RegionGraph_setFactor",args.length(),3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__RegionGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RegionGraph_setFactor" "', argument " "1"" of type '" "dai::RegionGraph *""'"); 
  }
  arg1 = reinterpret_cast< dai::RegionGraph * >(argp1);
  ecode2 = SWIG_AsVal_size_t(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RegionGraph_setFactor" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  res3 = SWIG_ConvertPtr(args(2), &argp3, SWIGTYPE_p_dai__TFactorT_double_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "RegionGraph_setFactor" "', argument " "3"" of type '" "dai::Factor const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RegionGraph_setFactor" "', argument " "3"" of type '" "dai::Factor const &""'"); 
  }
  arg3 = reinterpret_cast< dai::Factor * >(argp3);
  (arg1)->setFactor(arg2,(dai::Factor const &)*arg3);
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( RegionGraph_setFactor, _wrap_RegionGraph_setFactor, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[4]={
    octave_value_ref(args,0),octave_value_ref(args,1),octave_value_ref(args,2),octave_value_ref(args,3)
  };
  
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dai__RegionGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_dai__TFactorT_double_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_RegionGraph_setFactor__SWIG_1(args, nargout);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dai__RegionGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_dai__TFactorT_double_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_RegionGraph_setFactor__SWIG_0(args, nargout);
          }
        }
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


static octave_value_list _wrap_RegionGraph_setFactors__SWIG_0 (const octave_value_list& args, int nargout) {
  dai::RegionGraph *arg1 = (dai::RegionGraph *) 0 ;
  std::map< size_t,dai::Factor > *arg2 = 0 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("RegionGraph_setFactors",args.length(),3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__RegionGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RegionGraph_setFactors" "', argument " "1"" of type '" "dai::RegionGraph *""'"); 
  }
  arg1 = reinterpret_cast< dai::RegionGraph * >(argp1);
  res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_std__mapT_size_t_dai__TFactorT_double_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RegionGraph_setFactors" "', argument " "2"" of type '" "std::map< size_t,dai::Factor > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RegionGraph_setFactors" "', argument " "2"" of type '" "std::map< size_t,dai::Factor > const &""'"); 
  }
  arg2 = reinterpret_cast< std::map< size_t,dai::Factor > * >(argp2);
  ecode3 = SWIG_AsVal_bool(args(2), &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RegionGraph_setFactors" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  (arg1)->setFactors((std::map< size_t,dai::Factor > const &)*arg2,arg3);
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static octave_value_list _wrap_RegionGraph_setFactors__SWIG_1 (const octave_value_list& args, int nargout) {
  dai::RegionGraph *arg1 = (dai::RegionGraph *) 0 ;
  std::map< size_t,dai::Factor > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("RegionGraph_setFactors",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__RegionGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RegionGraph_setFactors" "', argument " "1"" of type '" "dai::RegionGraph *""'"); 
  }
  arg1 = reinterpret_cast< dai::RegionGraph * >(argp1);
  res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_std__mapT_size_t_dai__TFactorT_double_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RegionGraph_setFactors" "', argument " "2"" of type '" "std::map< size_t,dai::Factor > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RegionGraph_setFactors" "', argument " "2"" of type '" "std::map< size_t,dai::Factor > const &""'"); 
  }
  arg2 = reinterpret_cast< std::map< size_t,dai::Factor > * >(argp2);
  (arg1)->setFactors((std::map< size_t,dai::Factor > const &)*arg2);
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( RegionGraph_setFactors, _wrap_RegionGraph_setFactors, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[3]={
    octave_value_ref(args,0),octave_value_ref(args,1),octave_value_ref(args,2)
  };
  
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dai__RegionGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__mapT_size_t_dai__TFactorT_double_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_RegionGraph_setFactors__SWIG_1(args, nargout);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dai__RegionGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__mapT_size_t_dai__TFactorT_double_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_RegionGraph_setFactors__SWIG_0(args, nargout);
        }
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


SWIG_DEFUN( RegionGraph_ReadFromFile, _wrap_RegionGraph_ReadFromFile, std::string() ) {
  dai::RegionGraph *arg1 = (dai::RegionGraph *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("RegionGraph_ReadFromFile",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__RegionGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RegionGraph_ReadFromFile" "', argument " "1"" of type '" "dai::RegionGraph *""'"); 
  }
  arg1 = reinterpret_cast< dai::RegionGraph * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(args(1), &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RegionGraph_ReadFromFile" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  (arg1)->ReadFromFile((char const *)arg2);
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return _out;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return octave_value_list();
}


static octave_value_list _wrap_RegionGraph_WriteToFile__SWIG_0 (const octave_value_list& args, int nargout) {
  dai::RegionGraph *arg1 = (dai::RegionGraph *) 0 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("RegionGraph_WriteToFile",args.length(),3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__RegionGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RegionGraph_WriteToFile" "', argument " "1"" of type '" "dai::RegionGraph const *""'"); 
  }
  arg1 = reinterpret_cast< dai::RegionGraph * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(args(1), &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RegionGraph_WriteToFile" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_size_t(args(2), &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RegionGraph_WriteToFile" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  ((dai::RegionGraph const *)arg1)->WriteToFile((char const *)arg2,arg3);
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return _out;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return octave_value_list();
}


static octave_value_list _wrap_RegionGraph_WriteToFile__SWIG_1 (const octave_value_list& args, int nargout) {
  dai::RegionGraph *arg1 = (dai::RegionGraph *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("RegionGraph_WriteToFile",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__RegionGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RegionGraph_WriteToFile" "', argument " "1"" of type '" "dai::RegionGraph const *""'"); 
  }
  arg1 = reinterpret_cast< dai::RegionGraph * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(args(1), &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RegionGraph_WriteToFile" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ((dai::RegionGraph const *)arg1)->WriteToFile((char const *)arg2);
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return _out;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return octave_value_list();
}


SWIG_DEFUN( RegionGraph_WriteToFile, _wrap_RegionGraph_WriteToFile, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[3]={
    octave_value_ref(args,0),octave_value_ref(args,1),octave_value_ref(args,2)
  };
  
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dai__RegionGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_RegionGraph_WriteToFile__SWIG_1(args, nargout);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dai__RegionGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_RegionGraph_WriteToFile__SWIG_0(args, nargout);
        }
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


SWIG_DEFUN( RegionGraph_toString, _wrap_RegionGraph_toString, std::string() ) {
  dai::RegionGraph *arg1 = (dai::RegionGraph *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  std::string result;
  
  if (!SWIG_check_num_args("RegionGraph_toString",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__RegionGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RegionGraph_toString" "', argument " "1"" of type '" "dai::RegionGraph const *""'"); 
  }
  arg1 = reinterpret_cast< dai::RegionGraph * >(argp1);
  result = ((dai::RegionGraph const *)arg1)->toString();
  _outv = SWIG_From_std_string(static_cast< std::string >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( RegionGraph_printDot, _wrap_RegionGraph_printDot, std::string() ) {
  dai::RegionGraph *arg1 = (dai::RegionGraph *) 0 ;
  std::ostream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("RegionGraph_printDot",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__RegionGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RegionGraph_printDot" "', argument " "1"" of type '" "dai::RegionGraph const *""'"); 
  }
  arg1 = reinterpret_cast< dai::RegionGraph * >(argp1);
  res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_std__ostream,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RegionGraph_printDot" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RegionGraph_printDot" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  arg2 = reinterpret_cast< std::ostream * >(argp2);
  ((dai::RegionGraph const *)arg1)->printDot(*arg2);
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( RegionGraph___str__, _wrap_RegionGraph___str__, std::string() ) {
  dai::RegionGraph *arg1 = (dai::RegionGraph *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  char *result = 0 ;
  
  if (!SWIG_check_num_args("RegionGraph___str__",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__RegionGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RegionGraph___str__" "', argument " "1"" of type '" "dai::RegionGraph const *""'"); 
  }
  arg1 = reinterpret_cast< dai::RegionGraph * >(argp1);
  result = (char *)dai_RegionGraph___str__((dai::RegionGraph const *)arg1);
  _outv = SWIG_FromCharPtr((const char *)result);
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( RegionGraph___str, _wrap_RegionGraph___str, std::string() ) {
  dai::RegionGraph *arg1 = (dai::RegionGraph *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  std::string result;
  
  if (!SWIG_check_num_args("RegionGraph___str",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__RegionGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RegionGraph___str" "', argument " "1"" of type '" "dai::RegionGraph const *""'"); 
  }
  arg1 = reinterpret_cast< dai::RegionGraph * >(argp1);
  result = dai_RegionGraph___str((dai::RegionGraph const *)arg1);
  _outv = SWIG_From_std_string(static_cast< std::string >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( delete_RegionGraph, _wrap_delete_RegionGraph, std::string() ) {
  dai::RegionGraph *arg1 = (dai::RegionGraph *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("delete_RegionGraph",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__RegionGraph, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_RegionGraph" "', argument " "1"" of type '" "dai::RegionGraph *""'"); 
  }
  arg1 = reinterpret_cast< dai::RegionGraph * >(argp1);
  delete arg1;
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static swig_octave_member swig_RegionGraph_members[] = {
{"clone",_wrap_RegionGraph_clone,0,0,0,0},
{"nrORs",_wrap_RegionGraph_nrORs,0,0,0,0},
{"nrIRs",_wrap_RegionGraph_nrIRs,0,0,0,0},
{"OR",_wrap_RegionGraph_OR,0,0,0,0},
{"IR",_wrap_RegionGraph_IR,0,0,0,0},
{"fac2OR",_wrap_RegionGraph_fac2OR,0,0,0,0},
{"nbOR",_wrap_RegionGraph_nbOR,0,0,0,0},
{"nbIR",_wrap_RegionGraph_nbIR,0,0,0,0},
{"DAG",_wrap_RegionGraph_DAG,0,0,0,0},
{"checkCountingNumbers",_wrap_RegionGraph_checkCountingNumbers,0,0,0,0},
{"setFactor",_wrap_RegionGraph_setFactor,0,0,0,0},
{"setFactors",_wrap_RegionGraph_setFactors,0,0,0,0},
{"ReadFromFile",_wrap_RegionGraph_ReadFromFile,0,0,0,0},
{"WriteToFile",_wrap_RegionGraph_WriteToFile,0,0,0,0},
{"toString",_wrap_RegionGraph_toString,0,0,0,0},
{"printDot",_wrap_RegionGraph_printDot,0,0,0,0},
{"__str__",_wrap_RegionGraph___str__,0,0,0,0},
{"__str",_wrap_RegionGraph___str,0,0,0,0},
{0,0,0,0,0,0}
};
static const char *swig_RegionGraph_base_names[] = {"_p_dai__FactorGraph",0};
static const swig_type_info *swig_RegionGraph_base[] = {0,0};
static swig_octave_class _wrap_class_RegionGraph = {"RegionGraph", &SWIGTYPE_p_dai__RegionGraph,0,_wrap_new_RegionGraph,0,_wrap_delete_RegionGraph,swig_RegionGraph_members,swig_RegionGraph_base_names,swig_RegionGraph_base };

static octave_value_list _wrap_new_PairIntBigInt__SWIG_0 (const octave_value_list& args, int nargout) {
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  std::pair< size_t,dai::BigInt > *result = 0 ;
  
  if (!SWIG_check_num_args("new_PairIntBigInt",args.length(),0,0,0)) {
    SWIG_fail;
  }
  result = (std::pair< size_t,dai::BigInt > *)new std::pair< size_t,dai::BigInt >();
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__pairT_size_t_mpz_t, 1 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static octave_value_list _wrap_new_PairIntBigInt__SWIG_1 (const octave_value_list& args, int nargout) {
  size_t arg1 ;
  mpz_class arg2 ;
  size_t val1 ;
  int ecode1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  std::pair< size_t,dai::BigInt > *result = 0 ;
  
  if (!SWIG_check_num_args("new_PairIntBigInt",args.length(),2,2,0)) {
    SWIG_fail;
  }
  ecode1 = SWIG_AsVal_size_t(args(0), &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_PairIntBigInt" "', argument " "1"" of type '" "size_t""'");
  } 
  arg1 = static_cast< size_t >(val1);
  {
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_mpz_class,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_PairIntBigInt" "', argument " "2"" of type '" "mpz_class""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_PairIntBigInt" "', argument " "2"" of type '" "mpz_class""'");
    } else {
      arg2 = *(reinterpret_cast< mpz_class * >(argp2));
    }
  }
  result = (std::pair< size_t,dai::BigInt > *)new std::pair< size_t,dai::BigInt >(arg1,arg2);
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__pairT_size_t_mpz_t, 1 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static octave_value_list _wrap_new_PairIntBigInt__SWIG_2 (const octave_value_list& args, int nargout) {
  std::pair< size_t,dai::BigInt > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  std::pair< size_t,dai::BigInt > *result = 0 ;
  
  if (!SWIG_check_num_args("new_PairIntBigInt",args.length(),1,1,0)) {
    SWIG_fail;
  }
  {
    std::pair< size_t,mpz_class > *ptr = (std::pair< size_t,mpz_class > *)0;
    res1 = swig::asptr(args(0), &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_PairIntBigInt" "', argument " "1"" of type '" "std::pair< size_t,dai::BigInt > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_PairIntBigInt" "', argument " "1"" of type '" "std::pair< size_t,dai::BigInt > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (std::pair< size_t,dai::BigInt > *)new std::pair< size_t,dai::BigInt >((std::pair< size_t,dai::BigInt > const &)*arg1);
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__pairT_size_t_mpz_t, 1 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  if (SWIG_IsNewObj(res1)) delete arg1;
  return _out;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return octave_value_list();
}


SWIG_DEFUN( new_PairIntBigInt, _wrap_new_PairIntBigInt, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[2]={
    octave_value_ref(args,0),octave_value_ref(args,1)
  };
  
  if (argc == 0) {
    return _wrap_new_PairIntBigInt__SWIG_0(args, nargout);
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::pair< size_t,mpz_class >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_PairIntBigInt__SWIG_2(args, nargout);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mpz_class, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_PairIntBigInt__SWIG_1(args, nargout);
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


SWIG_DEFUN( PairIntBigInt_first_set, _wrap_PairIntBigInt_first_set, std::string() ) {
  std::pair< size_t,dai::BigInt > *arg1 = (std::pair< size_t,dai::BigInt > *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("PairIntBigInt_first_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_std__pairT_size_t_mpz_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PairIntBigInt_first_set" "', argument " "1"" of type '" "std::pair< size_t,dai::BigInt > *""'"); 
  }
  arg1 = reinterpret_cast< std::pair< size_t,dai::BigInt > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PairIntBigInt_first_set" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  if (arg1) (arg1)->first = arg2;
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( PairIntBigInt_first_get, _wrap_PairIntBigInt_first_get, std::string() ) {
  std::pair< size_t,dai::BigInt > *arg1 = (std::pair< size_t,dai::BigInt > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  size_t result;
  
  if (!SWIG_check_num_args("PairIntBigInt_first_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_std__pairT_size_t_mpz_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PairIntBigInt_first_get" "', argument " "1"" of type '" "std::pair< size_t,dai::BigInt > *""'"); 
  }
  arg1 = reinterpret_cast< std::pair< size_t,dai::BigInt > * >(argp1);
  result =  ((arg1)->first);
  _outv = SWIG_From_size_t(static_cast< size_t >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( PairIntBigInt_second_set, _wrap_PairIntBigInt_second_set, std::string() ) {
  std::pair< size_t,dai::BigInt > *arg1 = (std::pair< size_t,dai::BigInt > *) 0 ;
  mpz_class arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("PairIntBigInt_second_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_std__pairT_size_t_mpz_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PairIntBigInt_second_set" "', argument " "1"" of type '" "std::pair< size_t,dai::BigInt > *""'"); 
  }
  arg1 = reinterpret_cast< std::pair< size_t,dai::BigInt > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_mpz_class,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PairIntBigInt_second_set" "', argument " "2"" of type '" "mpz_class""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PairIntBigInt_second_set" "', argument " "2"" of type '" "mpz_class""'");
    } else {
      arg2 = *(reinterpret_cast< mpz_class * >(argp2));
    }
  }
  if (arg1) (arg1)->second = arg2;
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( PairIntBigInt_second_get, _wrap_PairIntBigInt_second_get, std::string() ) {
  std::pair< size_t,dai::BigInt > *arg1 = (std::pair< size_t,dai::BigInt > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  mpz_class result;
  
  if (!SWIG_check_num_args("PairIntBigInt_second_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_std__pairT_size_t_mpz_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PairIntBigInt_second_get" "', argument " "1"" of type '" "std::pair< size_t,dai::BigInt > *""'"); 
  }
  arg1 = reinterpret_cast< std::pair< size_t,dai::BigInt > * >(argp1);
  result =  ((arg1)->second);
  _outv = SWIG_NewPointerObj((new mpz_class(static_cast< const mpz_class& >(result))), SWIGTYPE_p_mpz_class, SWIG_POINTER_OWN |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( delete_PairIntBigInt, _wrap_delete_PairIntBigInt, std::string() ) {
  std::pair< size_t,dai::BigInt > *arg1 = (std::pair< size_t,dai::BigInt > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("delete_PairIntBigInt",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_std__pairT_size_t_mpz_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_PairIntBigInt" "', argument " "1"" of type '" "std::pair< size_t,dai::BigInt > *""'"); 
  }
  arg1 = reinterpret_cast< std::pair< size_t,dai::BigInt > * >(argp1);
  delete arg1;
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static swig_octave_member swig_PairIntBigInt_members[] = {
{"first",0,_wrap_PairIntBigInt_first_get,_wrap_PairIntBigInt_first_set,0,0},
{"second",0,_wrap_PairIntBigInt_second_get,_wrap_PairIntBigInt_second_set,0,0},
{0,0,0,0,0,0}
};
static const char *swig_PairIntBigInt_base_names[] = {0};
static const swig_type_info *swig_PairIntBigInt_base[] = {0};
static swig_octave_class _wrap_class_PairIntBigInt = {"PairIntBigInt", &SWIGTYPE_p_std__pairT_size_t_mpz_t,0,_wrap_new_PairIntBigInt,0,_wrap_delete_PairIntBigInt,swig_PairIntBigInt_members,swig_PairIntBigInt_base_names,swig_PairIntBigInt_base };

static octave_value_list _wrap_new_ClusterGraph__SWIG_0 (const octave_value_list& args, int nargout) {
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::ClusterGraph *result = 0 ;
  
  if (!SWIG_check_num_args("new_ClusterGraph",args.length(),0,0,0)) {
    SWIG_fail;
  }
  result = (dai::ClusterGraph *)new dai::ClusterGraph();
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dai__ClusterGraph, 1 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static octave_value_list _wrap_new_ClusterGraph__SWIG_1 (const octave_value_list& args, int nargout) {
  std::vector< dai::VarSet,std::allocator< dai::VarSet > > *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::ClusterGraph *result = 0 ;
  
  if (!SWIG_check_num_args("new_ClusterGraph",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1, SWIGTYPE_p_std__vectorT_dai__VarSet_std__allocatorT_dai__VarSet_t_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ClusterGraph" "', argument " "1"" of type '" "std::vector< dai::VarSet,std::allocator< dai::VarSet > > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ClusterGraph" "', argument " "1"" of type '" "std::vector< dai::VarSet,std::allocator< dai::VarSet > > const &""'"); 
  }
  arg1 = reinterpret_cast< std::vector< dai::VarSet,std::allocator< dai::VarSet > > * >(argp1);
  result = (dai::ClusterGraph *)new dai::ClusterGraph((std::vector< dai::VarSet,std::allocator< dai::VarSet > > const &)*arg1);
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dai__ClusterGraph, 1 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static octave_value_list _wrap_new_ClusterGraph__SWIG_2 (const octave_value_list& args, int nargout) {
  dai::FactorGraph *arg1 = 0 ;
  bool arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::ClusterGraph *result = 0 ;
  
  if (!SWIG_check_num_args("new_ClusterGraph",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1, SWIGTYPE_p_dai__FactorGraph,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ClusterGraph" "', argument " "1"" of type '" "dai::FactorGraph const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ClusterGraph" "', argument " "1"" of type '" "dai::FactorGraph const &""'"); 
  }
  arg1 = reinterpret_cast< dai::FactorGraph * >(argp1);
  ecode2 = SWIG_AsVal_bool(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_ClusterGraph" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  result = (dai::ClusterGraph *)new dai::ClusterGraph((dai::FactorGraph const &)*arg1,arg2);
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dai__ClusterGraph, 1 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( new_ClusterGraph, _wrap_new_ClusterGraph, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[2]={
    octave_value_ref(args,0),octave_value_ref(args,1)
  };
  
  if (argc == 0) {
    return _wrap_new_ClusterGraph__SWIG_0(args, nargout);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_dai__VarSet_std__allocatorT_dai__VarSet_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ClusterGraph__SWIG_1(args, nargout);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dai__FactorGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_ClusterGraph__SWIG_2(args, nargout);
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


SWIG_DEFUN( ClusterGraph_bipGraph, _wrap_ClusterGraph_bipGraph, std::string() ) {
  dai::ClusterGraph *arg1 = (dai::ClusterGraph *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::BipartiteGraph *result = 0 ;
  
  if (!SWIG_check_num_args("ClusterGraph_bipGraph",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__ClusterGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterGraph_bipGraph" "', argument " "1"" of type '" "dai::ClusterGraph const *""'"); 
  }
  arg1 = reinterpret_cast< dai::ClusterGraph * >(argp1);
  result = (dai::BipartiteGraph *) &((dai::ClusterGraph const *)arg1)->bipGraph();
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dai__BipartiteGraph, 0 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( ClusterGraph_nrVars, _wrap_ClusterGraph_nrVars, std::string() ) {
  dai::ClusterGraph *arg1 = (dai::ClusterGraph *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  size_t result;
  
  if (!SWIG_check_num_args("ClusterGraph_nrVars",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__ClusterGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterGraph_nrVars" "', argument " "1"" of type '" "dai::ClusterGraph const *""'"); 
  }
  arg1 = reinterpret_cast< dai::ClusterGraph * >(argp1);
  result = ((dai::ClusterGraph const *)arg1)->nrVars();
  _outv = SWIG_From_size_t(static_cast< size_t >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( ClusterGraph_vars, _wrap_ClusterGraph_vars, std::string() ) {
  dai::ClusterGraph *arg1 = (dai::ClusterGraph *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  std::vector< dai::Var,std::allocator< dai::Var > > *result = 0 ;
  
  if (!SWIG_check_num_args("ClusterGraph_vars",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__ClusterGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterGraph_vars" "', argument " "1"" of type '" "dai::ClusterGraph const *""'"); 
  }
  arg1 = reinterpret_cast< dai::ClusterGraph * >(argp1);
  result = (std::vector< dai::Var,std::allocator< dai::Var > > *) &((dai::ClusterGraph const *)arg1)->vars();
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_dai__Var_std__allocatorT_dai__Var_t_t, 0 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( ClusterGraph_var, _wrap_ClusterGraph_var, std::string() ) {
  dai::ClusterGraph *arg1 = (dai::ClusterGraph *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::Var *result = 0 ;
  
  if (!SWIG_check_num_args("ClusterGraph_var",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__ClusterGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterGraph_var" "', argument " "1"" of type '" "dai::ClusterGraph const *""'"); 
  }
  arg1 = reinterpret_cast< dai::ClusterGraph * >(argp1);
  ecode2 = SWIG_AsVal_size_t(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ClusterGraph_var" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  result = (dai::Var *) &((dai::ClusterGraph const *)arg1)->var(arg2);
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dai__Var, 0 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( ClusterGraph_nrClusters, _wrap_ClusterGraph_nrClusters, std::string() ) {
  dai::ClusterGraph *arg1 = (dai::ClusterGraph *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  size_t result;
  
  if (!SWIG_check_num_args("ClusterGraph_nrClusters",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__ClusterGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterGraph_nrClusters" "', argument " "1"" of type '" "dai::ClusterGraph const *""'"); 
  }
  arg1 = reinterpret_cast< dai::ClusterGraph * >(argp1);
  result = ((dai::ClusterGraph const *)arg1)->nrClusters();
  _outv = SWIG_From_size_t(static_cast< size_t >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( ClusterGraph_clusters, _wrap_ClusterGraph_clusters, std::string() ) {
  dai::ClusterGraph *arg1 = (dai::ClusterGraph *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  std::vector< dai::VarSet,std::allocator< dai::VarSet > > *result = 0 ;
  
  if (!SWIG_check_num_args("ClusterGraph_clusters",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__ClusterGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterGraph_clusters" "', argument " "1"" of type '" "dai::ClusterGraph const *""'"); 
  }
  arg1 = reinterpret_cast< dai::ClusterGraph * >(argp1);
  result = (std::vector< dai::VarSet,std::allocator< dai::VarSet > > *) &((dai::ClusterGraph const *)arg1)->clusters();
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_dai__VarSet_std__allocatorT_dai__VarSet_t_t, 0 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( ClusterGraph_cluster, _wrap_ClusterGraph_cluster, std::string() ) {
  dai::ClusterGraph *arg1 = (dai::ClusterGraph *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::VarSet *result = 0 ;
  
  if (!SWIG_check_num_args("ClusterGraph_cluster",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__ClusterGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterGraph_cluster" "', argument " "1"" of type '" "dai::ClusterGraph const *""'"); 
  }
  arg1 = reinterpret_cast< dai::ClusterGraph * >(argp1);
  ecode2 = SWIG_AsVal_size_t(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ClusterGraph_cluster" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  result = (dai::VarSet *) &((dai::ClusterGraph const *)arg1)->cluster(arg2);
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dai__VarSet, 0 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( ClusterGraph_findVar, _wrap_ClusterGraph_findVar, std::string() ) {
  dai::ClusterGraph *arg1 = (dai::ClusterGraph *) 0 ;
  dai::Var *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  size_t result;
  
  if (!SWIG_check_num_args("ClusterGraph_findVar",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__ClusterGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterGraph_findVar" "', argument " "1"" of type '" "dai::ClusterGraph const *""'"); 
  }
  arg1 = reinterpret_cast< dai::ClusterGraph * >(argp1);
  res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_dai__Var,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ClusterGraph_findVar" "', argument " "2"" of type '" "dai::Var const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClusterGraph_findVar" "', argument " "2"" of type '" "dai::Var const &""'"); 
  }
  arg2 = reinterpret_cast< dai::Var * >(argp2);
  result = ((dai::ClusterGraph const *)arg1)->findVar((dai::Var const &)*arg2);
  _outv = SWIG_From_size_t(static_cast< size_t >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( ClusterGraph_findCluster, _wrap_ClusterGraph_findCluster, std::string() ) {
  dai::ClusterGraph *arg1 = (dai::ClusterGraph *) 0 ;
  dai::VarSet *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  size_t result;
  
  if (!SWIG_check_num_args("ClusterGraph_findCluster",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__ClusterGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterGraph_findCluster" "', argument " "1"" of type '" "dai::ClusterGraph const *""'"); 
  }
  arg1 = reinterpret_cast< dai::ClusterGraph * >(argp1);
  res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_dai__VarSet,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ClusterGraph_findCluster" "', argument " "2"" of type '" "dai::VarSet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClusterGraph_findCluster" "', argument " "2"" of type '" "dai::VarSet const &""'"); 
  }
  arg2 = reinterpret_cast< dai::VarSet * >(argp2);
  result = ((dai::ClusterGraph const *)arg1)->findCluster((dai::VarSet const &)*arg2);
  _outv = SWIG_From_size_t(static_cast< size_t >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( ClusterGraph_Delta, _wrap_ClusterGraph_Delta, std::string() ) {
  dai::ClusterGraph *arg1 = (dai::ClusterGraph *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::VarSet result;
  
  if (!SWIG_check_num_args("ClusterGraph_Delta",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__ClusterGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterGraph_Delta" "', argument " "1"" of type '" "dai::ClusterGraph const *""'"); 
  }
  arg1 = reinterpret_cast< dai::ClusterGraph * >(argp1);
  ecode2 = SWIG_AsVal_size_t(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ClusterGraph_Delta" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  result = ((dai::ClusterGraph const *)arg1)->Delta(arg2);
  _outv = SWIG_NewPointerObj((new dai::VarSet(static_cast< const dai::VarSet& >(result))), SWIGTYPE_p_dai__VarSet, SWIG_POINTER_OWN |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( ClusterGraph_delta, _wrap_ClusterGraph_delta, std::string() ) {
  dai::ClusterGraph *arg1 = (dai::ClusterGraph *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::VarSet result;
  
  if (!SWIG_check_num_args("ClusterGraph_delta",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__ClusterGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterGraph_delta" "', argument " "1"" of type '" "dai::ClusterGraph const *""'"); 
  }
  arg1 = reinterpret_cast< dai::ClusterGraph * >(argp1);
  ecode2 = SWIG_AsVal_size_t(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ClusterGraph_delta" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  result = ((dai::ClusterGraph const *)arg1)->delta(arg2);
  _outv = SWIG_NewPointerObj((new dai::VarSet(static_cast< const dai::VarSet& >(result))), SWIGTYPE_p_dai__VarSet, SWIG_POINTER_OWN |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( ClusterGraph_adj, _wrap_ClusterGraph_adj, std::string() ) {
  dai::ClusterGraph *arg1 = (dai::ClusterGraph *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  bool result;
  
  if (!SWIG_check_num_args("ClusterGraph_adj",args.length(),3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__ClusterGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterGraph_adj" "', argument " "1"" of type '" "dai::ClusterGraph const *""'"); 
  }
  arg1 = reinterpret_cast< dai::ClusterGraph * >(argp1);
  ecode2 = SWIG_AsVal_size_t(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ClusterGraph_adj" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  ecode3 = SWIG_AsVal_size_t(args(2), &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ClusterGraph_adj" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  result = (bool)((dai::ClusterGraph const *)arg1)->adj(arg2,arg3);
  _outv = SWIG_From_bool(static_cast< bool >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( ClusterGraph_isMaximal, _wrap_ClusterGraph_isMaximal, std::string() ) {
  dai::ClusterGraph *arg1 = (dai::ClusterGraph *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  bool result;
  
  if (!SWIG_check_num_args("ClusterGraph_isMaximal",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__ClusterGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterGraph_isMaximal" "', argument " "1"" of type '" "dai::ClusterGraph const *""'"); 
  }
  arg1 = reinterpret_cast< dai::ClusterGraph * >(argp1);
  ecode2 = SWIG_AsVal_size_t(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ClusterGraph_isMaximal" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  result = (bool)((dai::ClusterGraph const *)arg1)->isMaximal(arg2);
  _outv = SWIG_From_bool(static_cast< bool >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( ClusterGraph_insert, _wrap_ClusterGraph_insert, std::string() ) {
  dai::ClusterGraph *arg1 = (dai::ClusterGraph *) 0 ;
  dai::VarSet *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  size_t result;
  
  if (!SWIG_check_num_args("ClusterGraph_insert",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__ClusterGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterGraph_insert" "', argument " "1"" of type '" "dai::ClusterGraph *""'"); 
  }
  arg1 = reinterpret_cast< dai::ClusterGraph * >(argp1);
  res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_dai__VarSet,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ClusterGraph_insert" "', argument " "2"" of type '" "dai::VarSet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClusterGraph_insert" "', argument " "2"" of type '" "dai::VarSet const &""'"); 
  }
  arg2 = reinterpret_cast< dai::VarSet * >(argp2);
  result = (arg1)->insert((dai::VarSet const &)*arg2);
  _outv = SWIG_From_size_t(static_cast< size_t >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( ClusterGraph_eraseNonMaximal, _wrap_ClusterGraph_eraseNonMaximal, std::string() ) {
  dai::ClusterGraph *arg1 = (dai::ClusterGraph *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::ClusterGraph *result = 0 ;
  
  if (!SWIG_check_num_args("ClusterGraph_eraseNonMaximal",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__ClusterGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterGraph_eraseNonMaximal" "', argument " "1"" of type '" "dai::ClusterGraph *""'"); 
  }
  arg1 = reinterpret_cast< dai::ClusterGraph * >(argp1);
  result = (dai::ClusterGraph *) &(arg1)->eraseNonMaximal();
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dai__ClusterGraph, 0 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( ClusterGraph_eraseSubsuming, _wrap_ClusterGraph_eraseSubsuming, std::string() ) {
  dai::ClusterGraph *arg1 = (dai::ClusterGraph *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::ClusterGraph *result = 0 ;
  
  if (!SWIG_check_num_args("ClusterGraph_eraseSubsuming",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__ClusterGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterGraph_eraseSubsuming" "', argument " "1"" of type '" "dai::ClusterGraph *""'"); 
  }
  arg1 = reinterpret_cast< dai::ClusterGraph * >(argp1);
  ecode2 = SWIG_AsVal_size_t(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ClusterGraph_eraseSubsuming" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  result = (dai::ClusterGraph *) &(arg1)->eraseSubsuming(arg2);
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dai__ClusterGraph, 0 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( ClusterGraph_elimVar, _wrap_ClusterGraph_elimVar, std::string() ) {
  dai::ClusterGraph *arg1 = (dai::ClusterGraph *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::VarSet result;
  
  if (!SWIG_check_num_args("ClusterGraph_elimVar",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__ClusterGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterGraph_elimVar" "', argument " "1"" of type '" "dai::ClusterGraph *""'"); 
  }
  arg1 = reinterpret_cast< dai::ClusterGraph * >(argp1);
  ecode2 = SWIG_AsVal_size_t(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ClusterGraph_elimVar" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  result = (arg1)->elimVar(arg2);
  _outv = SWIG_NewPointerObj((new dai::VarSet(static_cast< const dai::VarSet& >(result))), SWIGTYPE_p_dai__VarSet, SWIG_POINTER_OWN |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( ClusterGraph_toString, _wrap_ClusterGraph_toString, std::string() ) {
  dai::ClusterGraph *arg1 = (dai::ClusterGraph *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  std::string result;
  
  if (!SWIG_check_num_args("ClusterGraph_toString",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__ClusterGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterGraph_toString" "', argument " "1"" of type '" "dai::ClusterGraph const *""'"); 
  }
  arg1 = reinterpret_cast< dai::ClusterGraph * >(argp1);
  result = ((dai::ClusterGraph const *)arg1)->toString();
  _outv = SWIG_From_std_string(static_cast< std::string >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( delete_ClusterGraph, _wrap_delete_ClusterGraph, std::string() ) {
  dai::ClusterGraph *arg1 = (dai::ClusterGraph *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("delete_ClusterGraph",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__ClusterGraph, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ClusterGraph" "', argument " "1"" of type '" "dai::ClusterGraph *""'"); 
  }
  arg1 = reinterpret_cast< dai::ClusterGraph * >(argp1);
  delete arg1;
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static swig_octave_member swig_ClusterGraph_members[] = {
{"bipGraph",_wrap_ClusterGraph_bipGraph,0,0,0,0},
{"nrVars",_wrap_ClusterGraph_nrVars,0,0,0,0},
{"vars",_wrap_ClusterGraph_vars,0,0,0,0},
{"var",_wrap_ClusterGraph_var,0,0,0,0},
{"nrClusters",_wrap_ClusterGraph_nrClusters,0,0,0,0},
{"clusters",_wrap_ClusterGraph_clusters,0,0,0,0},
{"cluster",_wrap_ClusterGraph_cluster,0,0,0,0},
{"findVar",_wrap_ClusterGraph_findVar,0,0,0,0},
{"findCluster",_wrap_ClusterGraph_findCluster,0,0,0,0},
{"Delta",_wrap_ClusterGraph_Delta,0,0,0,0},
{"delta",_wrap_ClusterGraph_delta,0,0,0,0},
{"adj",_wrap_ClusterGraph_adj,0,0,0,0},
{"isMaximal",_wrap_ClusterGraph_isMaximal,0,0,0,0},
{"insert",_wrap_ClusterGraph_insert,0,0,0,0},
{"eraseNonMaximal",_wrap_ClusterGraph_eraseNonMaximal,0,0,0,0},
{"eraseSubsuming",_wrap_ClusterGraph_eraseSubsuming,0,0,0,0},
{"elimVar",_wrap_ClusterGraph_elimVar,0,0,0,0},
{"toString",_wrap_ClusterGraph_toString,0,0,0,0},
{0,0,0,0,0,0}
};
static const char *swig_ClusterGraph_base_names[] = {0};
static const swig_type_info *swig_ClusterGraph_base[] = {0};
static swig_octave_class _wrap_class_ClusterGraph = {"ClusterGraph", &SWIGTYPE_p_dai__ClusterGraph,0,_wrap_new_ClusterGraph,0,_wrap_delete_ClusterGraph,swig_ClusterGraph_members,swig_ClusterGraph_base_names,swig_ClusterGraph_base };

SWIG_DEFUN( new_sequentialVariableElimination, _wrap_new_sequentialVariableElimination, std::string() ) {
  SwigValueWrapper< std::vector< dai::Var,std::allocator< dai::Var > > > arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::sequentialVariableElimination *result = 0 ;
  
  if (!SWIG_check_num_args("new_sequentialVariableElimination",args.length(),1,1,0)) {
    SWIG_fail;
  }
  {
    res1 = SWIG_ConvertPtr(args(0), &argp1, SWIGTYPE_p_std__vectorT_dai__Var_std__allocatorT_dai__Var_t_t,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_sequentialVariableElimination" "', argument " "1"" of type '" "std::vector< dai::Var,std::allocator< dai::Var > > const""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_sequentialVariableElimination" "', argument " "1"" of type '" "std::vector< dai::Var,std::allocator< dai::Var > > const""'");
    } else {
      arg1 = *(reinterpret_cast< std::vector< dai::Var,std::allocator< dai::Var > > * >(argp1));
    }
  }
  result = (dai::sequentialVariableElimination *)new dai::sequentialVariableElimination(arg1);
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dai__sequentialVariableElimination, 1 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( sequentialVariableElimination___paren__, _wrap_sequentialVariableElimination___paren__, std::string() ) {
  dai::sequentialVariableElimination *arg1 = (dai::sequentialVariableElimination *) 0 ;
  dai::ClusterGraph *arg2 = 0 ;
  std::set< size_t > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  size_t result;
  
  if (!SWIG_check_num_args("sequentialVariableElimination___paren__",args.length(),3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__sequentialVariableElimination, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sequentialVariableElimination___paren__" "', argument " "1"" of type '" "dai::sequentialVariableElimination *""'"); 
  }
  arg1 = reinterpret_cast< dai::sequentialVariableElimination * >(argp1);
  res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_dai__ClusterGraph,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "sequentialVariableElimination___paren__" "', argument " "2"" of type '" "dai::ClusterGraph const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "sequentialVariableElimination___paren__" "', argument " "2"" of type '" "dai::ClusterGraph const &""'"); 
  }
  arg2 = reinterpret_cast< dai::ClusterGraph * >(argp2);
  res3 = SWIG_ConvertPtr(args(2), &argp3, SWIGTYPE_p_std__setT_size_t_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "sequentialVariableElimination___paren__" "', argument " "3"" of type '" "std::set< size_t > const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "sequentialVariableElimination___paren__" "', argument " "3"" of type '" "std::set< size_t > const &""'"); 
  }
  arg3 = reinterpret_cast< std::set< size_t > * >(argp3);
  result = (arg1)->operator ()((dai::ClusterGraph const &)*arg2,(std::set< size_t > const &)*arg3);
  _outv = SWIG_From_size_t(static_cast< size_t >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( delete_sequentialVariableElimination, _wrap_delete_sequentialVariableElimination, std::string() ) {
  dai::sequentialVariableElimination *arg1 = (dai::sequentialVariableElimination *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("delete_sequentialVariableElimination",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__sequentialVariableElimination, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_sequentialVariableElimination" "', argument " "1"" of type '" "dai::sequentialVariableElimination *""'"); 
  }
  arg1 = reinterpret_cast< dai::sequentialVariableElimination * >(argp1);
  delete arg1;
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static swig_octave_member swig_sequentialVariableElimination_members[] = {
{"__paren__",_wrap_sequentialVariableElimination___paren__,0,0,0,0},
{0,0,0,0,0,0}
};
static const char *swig_sequentialVariableElimination_base_names[] = {0};
static const swig_type_info *swig_sequentialVariableElimination_base[] = {0};
static swig_octave_class _wrap_class_sequentialVariableElimination = {"sequentialVariableElimination", &SWIGTYPE_p_dai__sequentialVariableElimination,0,_wrap_new_sequentialVariableElimination,0,_wrap_delete_sequentialVariableElimination,swig_sequentialVariableElimination_members,swig_sequentialVariableElimination_base_names,swig_sequentialVariableElimination_base };

SWIG_DEFUN( new_greedyVariableElimination, _wrap_new_greedyVariableElimination, std::string() ) {
  dai::greedyVariableElimination::eliminationCostFunction arg1 = (dai::greedyVariableElimination::eliminationCostFunction) 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::greedyVariableElimination *result = 0 ;
  
  if (!SWIG_check_num_args("new_greedyVariableElimination",args.length(),1,1,0)) {
    SWIG_fail;
  }
  {
    int res = SWIG_ConvertFunctionPtr(args(0), (void**)(&arg1), SWIGTYPE_p_f_r_q_const__dai__ClusterGraph_size_t__size_t);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "new_greedyVariableElimination" "', argument " "1"" of type '" "dai::greedyVariableElimination::eliminationCostFunction""'"); 
    }
  }
  result = (dai::greedyVariableElimination *)new dai::greedyVariableElimination(arg1);
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dai__greedyVariableElimination, 1 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( greedyVariableElimination___paren__, _wrap_greedyVariableElimination___paren__, std::string() ) {
  dai::greedyVariableElimination *arg1 = (dai::greedyVariableElimination *) 0 ;
  dai::ClusterGraph *arg2 = 0 ;
  std::set< size_t > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  size_t result;
  
  if (!SWIG_check_num_args("greedyVariableElimination___paren__",args.length(),3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__greedyVariableElimination, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "greedyVariableElimination___paren__" "', argument " "1"" of type '" "dai::greedyVariableElimination *""'"); 
  }
  arg1 = reinterpret_cast< dai::greedyVariableElimination * >(argp1);
  res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_dai__ClusterGraph,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "greedyVariableElimination___paren__" "', argument " "2"" of type '" "dai::ClusterGraph const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "greedyVariableElimination___paren__" "', argument " "2"" of type '" "dai::ClusterGraph const &""'"); 
  }
  arg2 = reinterpret_cast< dai::ClusterGraph * >(argp2);
  res3 = SWIG_ConvertPtr(args(2), &argp3, SWIGTYPE_p_std__setT_size_t_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "greedyVariableElimination___paren__" "', argument " "3"" of type '" "std::set< size_t > const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "greedyVariableElimination___paren__" "', argument " "3"" of type '" "std::set< size_t > const &""'"); 
  }
  arg3 = reinterpret_cast< std::set< size_t > * >(argp3);
  result = (arg1)->operator ()((dai::ClusterGraph const &)*arg2,(std::set< size_t > const &)*arg3);
  _outv = SWIG_From_size_t(static_cast< size_t >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( delete_greedyVariableElimination, _wrap_delete_greedyVariableElimination, std::string() ) {
  dai::greedyVariableElimination *arg1 = (dai::greedyVariableElimination *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("delete_greedyVariableElimination",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__greedyVariableElimination, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_greedyVariableElimination" "', argument " "1"" of type '" "dai::greedyVariableElimination *""'"); 
  }
  arg1 = reinterpret_cast< dai::greedyVariableElimination * >(argp1);
  delete arg1;
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static swig_octave_member swig_greedyVariableElimination_members[] = {
{"__paren__",_wrap_greedyVariableElimination___paren__,0,0,0,0},
{0,0,0,0,0,0}
};
static const char *swig_greedyVariableElimination_base_names[] = {0};
static const swig_type_info *swig_greedyVariableElimination_base[] = {0};
static swig_octave_class _wrap_class_greedyVariableElimination = {"greedyVariableElimination", &SWIGTYPE_p_dai__greedyVariableElimination,0,_wrap_new_greedyVariableElimination,0,_wrap_delete_greedyVariableElimination,swig_greedyVariableElimination_members,swig_greedyVariableElimination_base_names,swig_greedyVariableElimination_base };

static octave_value_list _wrap_new_PropertySet__SWIG_0 (const octave_value_list& args, int nargout) {
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::PropertySet *result = 0 ;
  
  if (!SWIG_check_num_args("new_PropertySet",args.length(),0,0,0)) {
    SWIG_fail;
  }
  result = (dai::PropertySet *)new dai::PropertySet();
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dai__PropertySet, 1 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static octave_value_list _wrap_new_PropertySet__SWIG_1 (const octave_value_list& args, int nargout) {
  std::string *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::PropertySet *result = 0 ;
  
  if (!SWIG_check_num_args("new_PropertySet",args.length(),1,1,0)) {
    SWIG_fail;
  }
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(args(0), &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_PropertySet" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_PropertySet" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  result = (dai::PropertySet *)new dai::PropertySet((std::string const &)*arg1);
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dai__PropertySet, 1 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  if (SWIG_IsNewObj(res1)) delete arg1;
  return _out;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return octave_value_list();
}


SWIG_DEFUN( new_PropertySet, _wrap_new_PropertySet, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[1]={
    octave_value_ref(args,0)
  };
  
  if (argc == 0) {
    return _wrap_new_PropertySet__SWIG_0(args, nargout);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_PropertySet__SWIG_1(args, nargout);
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


static octave_value_list _wrap_PropertySet_set__SWIG_0 (const octave_value_list& args, int nargout) {
  dai::PropertySet *arg1 = (dai::PropertySet *) 0 ;
  dai::PropertyKey *arg2 = 0 ;
  dai::PropertyValue *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  void *argp3 ;
  int res3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::PropertySet *result = 0 ;
  
  if (!SWIG_check_num_args("PropertySet_set",args.length(),3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__PropertySet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PropertySet_set" "', argument " "1"" of type '" "dai::PropertySet *""'"); 
  }
  arg1 = reinterpret_cast< dai::PropertySet * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(args(1), &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PropertySet_set" "', argument " "2"" of type '" "dai::PropertyKey const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PropertySet_set" "', argument " "2"" of type '" "dai::PropertyKey const &""'"); 
    }
    arg2 = ptr;
  }
  res3 = SWIG_ConvertPtr(args(2), &argp3, SWIGTYPE_p_boost__any,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "PropertySet_set" "', argument " "3"" of type '" "dai::PropertyValue const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PropertySet_set" "', argument " "3"" of type '" "dai::PropertyValue const &""'"); 
  }
  arg3 = reinterpret_cast< dai::PropertyValue * >(argp3);
  result = (dai::PropertySet *) &(arg1)->set((dai::PropertyKey const &)*arg2,(dai::PropertyValue const &)*arg3);
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dai__PropertySet, 0 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  if (SWIG_IsNewObj(res2)) delete arg2;
  return _out;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return octave_value_list();
}


static octave_value_list _wrap_PropertySet_set__SWIG_1 (const octave_value_list& args, int nargout) {
  dai::PropertySet *arg1 = (dai::PropertySet *) 0 ;
  dai::PropertySet *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::PropertySet *result = 0 ;
  
  if (!SWIG_check_num_args("PropertySet_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__PropertySet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PropertySet_set" "', argument " "1"" of type '" "dai::PropertySet *""'"); 
  }
  arg1 = reinterpret_cast< dai::PropertySet * >(argp1);
  res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_dai__PropertySet,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PropertySet_set" "', argument " "2"" of type '" "dai::PropertySet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PropertySet_set" "', argument " "2"" of type '" "dai::PropertySet const &""'"); 
  }
  arg2 = reinterpret_cast< dai::PropertySet * >(argp2);
  result = (dai::PropertySet *) &(arg1)->set((dai::PropertySet const &)*arg2);
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dai__PropertySet, 0 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( PropertySet_set, _wrap_PropertySet_set, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[3]={
    octave_value_ref(args,0),octave_value_ref(args,1),octave_value_ref(args,2)
  };
  
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dai__PropertySet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_dai__PropertySet, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_PropertySet_set__SWIG_1(args, nargout);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dai__PropertySet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_boost__any, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_PropertySet_set__SWIG_0(args, nargout);
        }
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


SWIG_DEFUN( PropertySet___paren__, _wrap_PropertySet___paren__, std::string() ) {
  dai::PropertySet *arg1 = (dai::PropertySet *) 0 ;
  dai::PropertyKey *arg2 = 0 ;
  dai::PropertyValue *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  void *argp3 ;
  int res3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::PropertySet result;
  
  if (!SWIG_check_num_args("PropertySet___paren__",args.length(),3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__PropertySet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PropertySet___paren__" "', argument " "1"" of type '" "dai::PropertySet const *""'"); 
  }
  arg1 = reinterpret_cast< dai::PropertySet * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(args(1), &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PropertySet___paren__" "', argument " "2"" of type '" "dai::PropertyKey const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PropertySet___paren__" "', argument " "2"" of type '" "dai::PropertyKey const &""'"); 
    }
    arg2 = ptr;
  }
  res3 = SWIG_ConvertPtr(args(2), &argp3, SWIGTYPE_p_boost__any,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "PropertySet___paren__" "', argument " "3"" of type '" "dai::PropertyValue const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PropertySet___paren__" "', argument " "3"" of type '" "dai::PropertyValue const &""'"); 
  }
  arg3 = reinterpret_cast< dai::PropertyValue * >(argp3);
  result = ((dai::PropertySet const *)arg1)->operator ()((dai::PropertyKey const &)*arg2,(dai::PropertyValue const &)*arg3);
  _outv = SWIG_NewPointerObj((new dai::PropertySet(static_cast< const dai::PropertySet& >(result))), SWIGTYPE_p_dai__PropertySet, SWIG_POINTER_OWN |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  if (SWIG_IsNewObj(res2)) delete arg2;
  return _out;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return octave_value_list();
}


SWIG_DEFUN( PropertySet_size, _wrap_PropertySet_size, std::string() ) {
  dai::PropertySet *arg1 = (dai::PropertySet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  size_t result;
  
  if (!SWIG_check_num_args("PropertySet_size",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__PropertySet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PropertySet_size" "', argument " "1"" of type '" "dai::PropertySet const *""'"); 
  }
  arg1 = reinterpret_cast< dai::PropertySet * >(argp1);
  result = ((dai::PropertySet const *)arg1)->size();
  _outv = SWIG_From_size_t(static_cast< size_t >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( PropertySet_clear, _wrap_PropertySet_clear, std::string() ) {
  dai::PropertySet *arg1 = (dai::PropertySet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("PropertySet_clear",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__PropertySet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PropertySet_clear" "', argument " "1"" of type '" "dai::PropertySet *""'"); 
  }
  arg1 = reinterpret_cast< dai::PropertySet * >(argp1);
  (arg1)->clear();
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( PropertySet_erase, _wrap_PropertySet_erase, std::string() ) {
  dai::PropertySet *arg1 = (dai::PropertySet *) 0 ;
  dai::PropertyKey *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  size_t result;
  
  if (!SWIG_check_num_args("PropertySet_erase",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__PropertySet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PropertySet_erase" "', argument " "1"" of type '" "dai::PropertySet *""'"); 
  }
  arg1 = reinterpret_cast< dai::PropertySet * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(args(1), &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PropertySet_erase" "', argument " "2"" of type '" "dai::PropertyKey const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PropertySet_erase" "', argument " "2"" of type '" "dai::PropertyKey const &""'"); 
    }
    arg2 = ptr;
  }
  result = (arg1)->erase((dai::PropertyKey const &)*arg2);
  _outv = SWIG_From_size_t(static_cast< size_t >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  if (SWIG_IsNewObj(res2)) delete arg2;
  return _out;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return octave_value_list();
}


SWIG_DEFUN( PropertySet_hasKey, _wrap_PropertySet_hasKey, std::string() ) {
  dai::PropertySet *arg1 = (dai::PropertySet *) 0 ;
  dai::PropertyKey *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  bool result;
  
  if (!SWIG_check_num_args("PropertySet_hasKey",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__PropertySet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PropertySet_hasKey" "', argument " "1"" of type '" "dai::PropertySet const *""'"); 
  }
  arg1 = reinterpret_cast< dai::PropertySet * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(args(1), &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PropertySet_hasKey" "', argument " "2"" of type '" "dai::PropertyKey const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PropertySet_hasKey" "', argument " "2"" of type '" "dai::PropertyKey const &""'"); 
    }
    arg2 = ptr;
  }
  result = (bool)((dai::PropertySet const *)arg1)->hasKey((dai::PropertyKey const &)*arg2);
  _outv = SWIG_From_bool(static_cast< bool >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  if (SWIG_IsNewObj(res2)) delete arg2;
  return _out;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return octave_value_list();
}


SWIG_DEFUN( PropertySet_keys, _wrap_PropertySet_keys, std::string() ) {
  dai::PropertySet *arg1 = (dai::PropertySet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  SwigValueWrapper< std::set< std::string > > result;
  
  if (!SWIG_check_num_args("PropertySet_keys",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__PropertySet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PropertySet_keys" "', argument " "1"" of type '" "dai::PropertySet const *""'"); 
  }
  arg1 = reinterpret_cast< dai::PropertySet * >(argp1);
  result = ((dai::PropertySet const *)arg1)->keys();
  _outv = SWIG_NewPointerObj((new std::set< dai::PropertyKey >(static_cast< const std::set< dai::PropertyKey >& >(result))), SWIGTYPE_p_std__setT_std__string_t, SWIG_POINTER_OWN |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( PropertySet_get, _wrap_PropertySet_get, std::string() ) {
  dai::PropertySet *arg1 = (dai::PropertySet *) 0 ;
  dai::PropertyKey *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::PropertyValue *result = 0 ;
  
  if (!SWIG_check_num_args("PropertySet_get",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__PropertySet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PropertySet_get" "', argument " "1"" of type '" "dai::PropertySet const *""'"); 
  }
  arg1 = reinterpret_cast< dai::PropertySet * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(args(1), &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PropertySet_get" "', argument " "2"" of type '" "dai::PropertyKey const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PropertySet_get" "', argument " "2"" of type '" "dai::PropertyKey const &""'"); 
    }
    arg2 = ptr;
  }
  result = (dai::PropertyValue *) &((dai::PropertySet const *)arg1)->get((dai::PropertyKey const &)*arg2);
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_boost__any, 0 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  if (SWIG_IsNewObj(res2)) delete arg2;
  return _out;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return octave_value_list();
}


SWIG_DEFUN( PropertySet_toString, _wrap_PropertySet_toString, std::string() ) {
  dai::PropertySet *arg1 = (dai::PropertySet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  std::string result;
  
  if (!SWIG_check_num_args("PropertySet_toString",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__PropertySet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PropertySet_toString" "', argument " "1"" of type '" "dai::PropertySet const *""'"); 
  }
  arg1 = reinterpret_cast< dai::PropertySet * >(argp1);
  result = ((dai::PropertySet const *)arg1)->toString();
  _outv = SWIG_From_std_string(static_cast< std::string >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( PropertySet_fromString, _wrap_PropertySet_fromString, std::string() ) {
  dai::PropertySet *arg1 = (dai::PropertySet *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("PropertySet_fromString",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__PropertySet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PropertySet_fromString" "', argument " "1"" of type '" "dai::PropertySet *""'"); 
  }
  arg1 = reinterpret_cast< dai::PropertySet * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(args(1), &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PropertySet_fromString" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PropertySet_fromString" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  (arg1)->fromString((std::string const &)*arg2);
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  if (SWIG_IsNewObj(res2)) delete arg2;
  return _out;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return octave_value_list();
}


SWIG_DEFUN( PropertySet___setitem__, _wrap_PropertySet___setitem__, std::string() ) {
  dai::PropertySet *arg1 = (dai::PropertySet *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("PropertySet___setitem__",args.length(),3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__PropertySet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PropertySet___setitem__" "', argument " "1"" of type '" "dai::PropertySet *""'"); 
  }
  arg1 = reinterpret_cast< dai::PropertySet * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(args(1), &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PropertySet___setitem__" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_AsCharPtrAndSize(args(2), &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "PropertySet___setitem__" "', argument " "3"" of type '" "char *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  dai_PropertySet___setitem__(arg1,arg2,arg3);
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return _out;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return octave_value_list();
}


SWIG_DEFUN( PropertySet___str__, _wrap_PropertySet___str__, std::string() ) {
  dai::PropertySet *arg1 = (dai::PropertySet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  char *result = 0 ;
  
  if (!SWIG_check_num_args("PropertySet___str__",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__PropertySet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PropertySet___str__" "', argument " "1"" of type '" "dai::PropertySet const *""'"); 
  }
  arg1 = reinterpret_cast< dai::PropertySet * >(argp1);
  result = (char *)dai_PropertySet___str__((dai::PropertySet const *)arg1);
  _outv = SWIG_FromCharPtr((const char *)result);
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( PropertySet___str, _wrap_PropertySet___str, std::string() ) {
  dai::PropertySet *arg1 = (dai::PropertySet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  std::string result;
  
  if (!SWIG_check_num_args("PropertySet___str",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__PropertySet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PropertySet___str" "', argument " "1"" of type '" "dai::PropertySet const *""'"); 
  }
  arg1 = reinterpret_cast< dai::PropertySet * >(argp1);
  result = dai_PropertySet___str((dai::PropertySet const *)arg1);
  _outv = SWIG_From_std_string(static_cast< std::string >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( delete_PropertySet, _wrap_delete_PropertySet, std::string() ) {
  dai::PropertySet *arg1 = (dai::PropertySet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("delete_PropertySet",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__PropertySet, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_PropertySet" "', argument " "1"" of type '" "dai::PropertySet *""'"); 
  }
  arg1 = reinterpret_cast< dai::PropertySet * >(argp1);
  delete arg1;
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static swig_octave_member swig_PropertySet_members[] = {
{"set",_wrap_PropertySet_set,0,0,0,0},
{"__paren__",_wrap_PropertySet___paren__,0,0,0,0},
{"size",_wrap_PropertySet_size,0,0,0,0},
{"clear",_wrap_PropertySet_clear,0,0,0,0},
{"erase",_wrap_PropertySet_erase,0,0,0,0},
{"hasKey",_wrap_PropertySet_hasKey,0,0,0,0},
{"keys",_wrap_PropertySet_keys,0,0,0,0},
{"get",_wrap_PropertySet_get,0,0,0,0},
{"toString",_wrap_PropertySet_toString,0,0,0,0},
{"fromString",_wrap_PropertySet_fromString,0,0,0,0},
{"__setitem__",_wrap_PropertySet___setitem__,0,0,0,0},
{"__str__",_wrap_PropertySet___str__,0,0,0,0},
{"__str",_wrap_PropertySet___str,0,0,0,0},
{0,0,0,0,0,0}
};
static const char *swig_PropertySet_base_names[] = {0};
static const swig_type_info *swig_PropertySet_base[] = {0};
static swig_octave_class _wrap_class_PropertySet = {"PropertySet", &SWIGTYPE_p_dai__PropertySet,0,_wrap_new_PropertySet,0,_wrap_delete_PropertySet,swig_PropertySet_members,swig_PropertySet_base_names,swig_PropertySet_base };

static octave_value_list _wrap_new_IndexFor__SWIG_0 (const octave_value_list& args, int nargout) {
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::IndexFor *result = 0 ;
  
  if (!SWIG_check_num_args("new_IndexFor",args.length(),0,0,0)) {
    SWIG_fail;
  }
  result = (dai::IndexFor *)new dai::IndexFor();
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dai__IndexFor, 1 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static octave_value_list _wrap_new_IndexFor__SWIG_1 (const octave_value_list& args, int nargout) {
  dai::VarSet *arg1 = 0 ;
  dai::VarSet *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::IndexFor *result = 0 ;
  
  if (!SWIG_check_num_args("new_IndexFor",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1, SWIGTYPE_p_dai__VarSet,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_IndexFor" "', argument " "1"" of type '" "dai::VarSet const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_IndexFor" "', argument " "1"" of type '" "dai::VarSet const &""'"); 
  }
  arg1 = reinterpret_cast< dai::VarSet * >(argp1);
  res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_dai__VarSet,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_IndexFor" "', argument " "2"" of type '" "dai::VarSet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_IndexFor" "', argument " "2"" of type '" "dai::VarSet const &""'"); 
  }
  arg2 = reinterpret_cast< dai::VarSet * >(argp2);
  result = (dai::IndexFor *)new dai::IndexFor((dai::VarSet const &)*arg1,(dai::VarSet const &)*arg2);
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dai__IndexFor, 1 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( new_IndexFor, _wrap_new_IndexFor, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[2]={
    octave_value_ref(args,0),octave_value_ref(args,1)
  };
  
  if (argc == 0) {
    return _wrap_new_IndexFor__SWIG_0(args, nargout);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dai__VarSet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_dai__VarSet, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_IndexFor__SWIG_1(args, nargout);
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


SWIG_DEFUN( IndexFor_reset, _wrap_IndexFor_reset, std::string() ) {
  dai::IndexFor *arg1 = (dai::IndexFor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::IndexFor *result = 0 ;
  
  if (!SWIG_check_num_args("IndexFor_reset",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__IndexFor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IndexFor_reset" "', argument " "1"" of type '" "dai::IndexFor *""'"); 
  }
  arg1 = reinterpret_cast< dai::IndexFor * >(argp1);
  result = (dai::IndexFor *) &(arg1)->reset();
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dai__IndexFor, 0 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( IndexFor_toInt, _wrap_IndexFor_toInt, std::string() ) {
  dai::IndexFor *arg1 = (dai::IndexFor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  size_t result;
  
  if (!SWIG_check_num_args("IndexFor_toInt",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__IndexFor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IndexFor_toInt" "', argument " "1"" of type '" "dai::IndexFor const *""'"); 
  }
  arg1 = reinterpret_cast< dai::IndexFor * >(argp1);
  result = ((dai::IndexFor const *)arg1)->operator size_t();
  _outv = SWIG_From_size_t(static_cast< size_t >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( IndexFor_valid, _wrap_IndexFor_valid, std::string() ) {
  dai::IndexFor *arg1 = (dai::IndexFor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  bool result;
  
  if (!SWIG_check_num_args("IndexFor_valid",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__IndexFor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IndexFor_valid" "', argument " "1"" of type '" "dai::IndexFor const *""'"); 
  }
  arg1 = reinterpret_cast< dai::IndexFor * >(argp1);
  result = (bool)((dai::IndexFor const *)arg1)->valid();
  _outv = SWIG_From_bool(static_cast< bool >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( IndexFor_next, _wrap_IndexFor_next, std::string() ) {
  dai::IndexFor *arg1 = (dai::IndexFor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("IndexFor_next",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__IndexFor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IndexFor_next" "', argument " "1"" of type '" "dai::IndexFor *""'"); 
  }
  arg1 = reinterpret_cast< dai::IndexFor * >(argp1);
  dai_IndexFor_next(arg1);
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( delete_IndexFor, _wrap_delete_IndexFor, std::string() ) {
  dai::IndexFor *arg1 = (dai::IndexFor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("delete_IndexFor",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__IndexFor, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_IndexFor" "', argument " "1"" of type '" "dai::IndexFor *""'"); 
  }
  arg1 = reinterpret_cast< dai::IndexFor * >(argp1);
  delete arg1;
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static swig_octave_member swig_IndexFor_members[] = {
{"reset",_wrap_IndexFor_reset,0,0,0,0},
{"toInt",_wrap_IndexFor_toInt,0,0,0,0},
{"valid",_wrap_IndexFor_valid,0,0,0,0},
{"next",_wrap_IndexFor_next,0,0,0,0},
{0,0,0,0,0,0}
};
static const char *swig_IndexFor_base_names[] = {0};
static const swig_type_info *swig_IndexFor_base[] = {0};
static swig_octave_class _wrap_class_IndexFor = {"IndexFor", &SWIGTYPE_p_dai__IndexFor,0,_wrap_new_IndexFor,0,_wrap_delete_IndexFor,swig_IndexFor_members,swig_IndexFor_base_names,swig_IndexFor_base };

static octave_value_list _wrap_new_Permute__SWIG_0 (const octave_value_list& args, int nargout) {
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::Permute *result = 0 ;
  
  if (!SWIG_check_num_args("new_Permute",args.length(),0,0,0)) {
    SWIG_fail;
  }
  result = (dai::Permute *)new dai::Permute();
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dai__Permute, 1 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static octave_value_list _wrap_new_Permute__SWIG_1 (const octave_value_list& args, int nargout) {
  std::vector< size_t,std::allocator< size_t > > *arg1 = 0 ;
  std::vector< size_t,std::allocator< size_t > > *arg2 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  int res2 = SWIG_OLDOBJ ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::Permute *result = 0 ;
  
  if (!SWIG_check_num_args("new_Permute",args.length(),2,2,0)) {
    SWIG_fail;
  }
  {
    std::vector< size_t,std::allocator< size_t > > *ptr = (std::vector< size_t,std::allocator< size_t > > *)0;
    res1 = swig::asptr(args(0), &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Permute" "', argument " "1"" of type '" "std::vector< size_t,std::allocator< size_t > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Permute" "', argument " "1"" of type '" "std::vector< size_t,std::allocator< size_t > > const &""'"); 
    }
    arg1 = ptr;
  }
  {
    std::vector< size_t,std::allocator< size_t > > *ptr = (std::vector< size_t,std::allocator< size_t > > *)0;
    res2 = swig::asptr(args(1), &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_Permute" "', argument " "2"" of type '" "std::vector< size_t,std::allocator< size_t > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Permute" "', argument " "2"" of type '" "std::vector< size_t,std::allocator< size_t > > const &""'"); 
    }
    arg2 = ptr;
  }
  result = (dai::Permute *)new dai::Permute((std::vector< size_t,std::allocator< size_t > > const &)*arg1,(std::vector< size_t,std::allocator< size_t > > const &)*arg2);
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dai__Permute, 1 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return _out;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return octave_value_list();
}


static octave_value_list _wrap_new_Permute__SWIG_2 (const octave_value_list& args, int nargout) {
  std::vector< dai::Var,std::allocator< dai::Var > > *arg1 = 0 ;
  bool arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::Permute *result = 0 ;
  
  if (!SWIG_check_num_args("new_Permute",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1, SWIGTYPE_p_std__vectorT_dai__Var_std__allocatorT_dai__Var_t_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Permute" "', argument " "1"" of type '" "std::vector< dai::Var,std::allocator< dai::Var > > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Permute" "', argument " "1"" of type '" "std::vector< dai::Var,std::allocator< dai::Var > > const &""'"); 
  }
  arg1 = reinterpret_cast< std::vector< dai::Var,std::allocator< dai::Var > > * >(argp1);
  ecode2 = SWIG_AsVal_bool(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Permute" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  result = (dai::Permute *)new dai::Permute((std::vector< dai::Var,std::allocator< dai::Var > > const &)*arg1,arg2);
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dai__Permute, 1 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static octave_value_list _wrap_new_Permute__SWIG_3 (const octave_value_list& args, int nargout) {
  std::vector< dai::Var,std::allocator< dai::Var > > *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::Permute *result = 0 ;
  
  if (!SWIG_check_num_args("new_Permute",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1, SWIGTYPE_p_std__vectorT_dai__Var_std__allocatorT_dai__Var_t_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Permute" "', argument " "1"" of type '" "std::vector< dai::Var,std::allocator< dai::Var > > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Permute" "', argument " "1"" of type '" "std::vector< dai::Var,std::allocator< dai::Var > > const &""'"); 
  }
  arg1 = reinterpret_cast< std::vector< dai::Var,std::allocator< dai::Var > > * >(argp1);
  result = (dai::Permute *)new dai::Permute((std::vector< dai::Var,std::allocator< dai::Var > > const &)*arg1);
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dai__Permute, 1 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( new_Permute, _wrap_new_Permute, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[2]={
    octave_value_ref(args,0),octave_value_ref(args,1)
  };
  
  if (argc == 0) {
    return _wrap_new_Permute__SWIG_0(args, nargout);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_dai__Var_std__allocatorT_dai__Var_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Permute__SWIG_3(args, nargout);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_dai__Var_std__allocatorT_dai__Var_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_Permute__SWIG_2(args, nargout);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< size_t,std::allocator< size_t > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = swig::asptr(argv[1], (std::vector< size_t,std::allocator< size_t > >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_Permute__SWIG_1(args, nargout);
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


SWIG_DEFUN( Permute_convertLinearIndex, _wrap_Permute_convertLinearIndex, std::string() ) {
  dai::Permute *arg1 = (dai::Permute *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  size_t result;
  
  if (!SWIG_check_num_args("Permute_convertLinearIndex",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__Permute, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Permute_convertLinearIndex" "', argument " "1"" of type '" "dai::Permute const *""'"); 
  }
  arg1 = reinterpret_cast< dai::Permute * >(argp1);
  ecode2 = SWIG_AsVal_size_t(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Permute_convertLinearIndex" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  result = ((dai::Permute const *)arg1)->convertLinearIndex(arg2);
  _outv = SWIG_From_size_t(static_cast< size_t >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static octave_value_list _wrap_Permute_sigma__SWIG_0 (const octave_value_list& args, int nargout) {
  dai::Permute *arg1 = (dai::Permute *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  std::vector< size_t,std::allocator< size_t > > *result = 0 ;
  
  if (!SWIG_check_num_args("Permute_sigma",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__Permute, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Permute_sigma" "', argument " "1"" of type '" "dai::Permute const *""'"); 
  }
  arg1 = reinterpret_cast< dai::Permute * >(argp1);
  result = (std::vector< size_t,std::allocator< size_t > > *) &((dai::Permute const *)arg1)->sigma();
  _outv = swig::from(static_cast< std::vector< size_t,std::allocator< size_t > > >(*result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static octave_value_list _wrap_Permute_sigma__SWIG_1 (const octave_value_list& args, int nargout) {
  dai::Permute *arg1 = (dai::Permute *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  std::vector< size_t,std::allocator< size_t > > *result = 0 ;
  
  if (!SWIG_check_num_args("Permute_sigma",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__Permute, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Permute_sigma" "', argument " "1"" of type '" "dai::Permute *""'"); 
  }
  arg1 = reinterpret_cast< dai::Permute * >(argp1);
  result = (std::vector< size_t,std::allocator< size_t > > *) &(arg1)->sigma();
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_size_t_std__allocatorT_size_t_t_t, 0 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( Permute_sigma, _wrap_Permute_sigma, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[1]={
    octave_value_ref(args,0)
  };
  
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dai__Permute, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Permute_sigma__SWIG_1(args, nargout);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dai__Permute, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Permute_sigma__SWIG_0(args, nargout);
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


SWIG_DEFUN( Permute_ranges, _wrap_Permute_ranges, std::string() ) {
  dai::Permute *arg1 = (dai::Permute *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  std::vector< size_t,std::allocator< size_t > > *result = 0 ;
  
  if (!SWIG_check_num_args("Permute_ranges",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__Permute, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Permute_ranges" "', argument " "1"" of type '" "dai::Permute *""'"); 
  }
  arg1 = reinterpret_cast< dai::Permute * >(argp1);
  result = (std::vector< size_t,std::allocator< size_t > > *) &(arg1)->ranges();
  _outv = swig::from(static_cast< std::vector< size_t,std::allocator< size_t > > >(*result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( Permute_inverse, _wrap_Permute_inverse, std::string() ) {
  dai::Permute *arg1 = (dai::Permute *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::Permute result;
  
  if (!SWIG_check_num_args("Permute_inverse",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__Permute, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Permute_inverse" "', argument " "1"" of type '" "dai::Permute const *""'"); 
  }
  arg1 = reinterpret_cast< dai::Permute * >(argp1);
  result = ((dai::Permute const *)arg1)->inverse();
  _outv = SWIG_NewPointerObj((new dai::Permute(static_cast< const dai::Permute& >(result))), SWIGTYPE_p_dai__Permute, SWIG_POINTER_OWN |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( Permute___getitem__, _wrap_Permute___getitem__, std::string() ) {
  dai::Permute *arg1 = (dai::Permute *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  size_t result;
  
  if (!SWIG_check_num_args("Permute___getitem__",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__Permute, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Permute___getitem__" "', argument " "1"" of type '" "dai::Permute const *""'"); 
  }
  arg1 = reinterpret_cast< dai::Permute * >(argp1);
  ecode2 = SWIG_AsVal_int(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Permute___getitem__" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = dai_Permute___getitem__((dai::Permute const *)arg1,arg2);
  _outv = SWIG_From_size_t(static_cast< size_t >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( Permute___paren__, _wrap_Permute___paren__, std::string() ) {
  dai::Permute *arg1 = (dai::Permute *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  size_t result;
  
  if (!SWIG_check_num_args("Permute___paren__",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__Permute, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Permute___paren__" "', argument " "1"" of type '" "dai::Permute const *""'"); 
  }
  arg1 = reinterpret_cast< dai::Permute * >(argp1);
  ecode2 = SWIG_AsVal_int(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Permute___paren__" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = dai_Permute___paren__((dai::Permute const *)arg1,arg2);
  _outv = SWIG_From_size_t(static_cast< size_t >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( delete_Permute, _wrap_delete_Permute, std::string() ) {
  dai::Permute *arg1 = (dai::Permute *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("delete_Permute",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__Permute, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Permute" "', argument " "1"" of type '" "dai::Permute *""'"); 
  }
  arg1 = reinterpret_cast< dai::Permute * >(argp1);
  delete arg1;
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static swig_octave_member swig_Permute_members[] = {
{"convertLinearIndex",_wrap_Permute_convertLinearIndex,0,0,0,0},
{"sigma",_wrap_Permute_sigma,0,0,0,0},
{"ranges",_wrap_Permute_ranges,0,0,0,0},
{"inverse",_wrap_Permute_inverse,0,0,0,0},
{"__getitem__",_wrap_Permute___getitem__,0,0,0,0},
{"__paren__",_wrap_Permute___paren__,0,0,0,0},
{0,0,0,0,0,0}
};
static const char *swig_Permute_base_names[] = {0};
static const swig_type_info *swig_Permute_base[] = {0};
static swig_octave_class _wrap_class_Permute = {"Permute", &SWIGTYPE_p_dai__Permute,0,_wrap_new_Permute,0,_wrap_delete_Permute,swig_Permute_members,swig_Permute_base_names,swig_Permute_base };

static octave_value_list _wrap_new_multifor__SWIG_0 (const octave_value_list& args, int nargout) {
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::multifor *result = 0 ;
  
  if (!SWIG_check_num_args("new_multifor",args.length(),0,0,0)) {
    SWIG_fail;
  }
  result = (dai::multifor *)new dai::multifor();
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dai__multifor, 1 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static octave_value_list _wrap_new_multifor__SWIG_1 (const octave_value_list& args, int nargout) {
  std::vector< size_t,std::allocator< size_t > > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::multifor *result = 0 ;
  
  if (!SWIG_check_num_args("new_multifor",args.length(),1,1,0)) {
    SWIG_fail;
  }
  {
    std::vector< size_t,std::allocator< size_t > > *ptr = (std::vector< size_t,std::allocator< size_t > > *)0;
    res1 = swig::asptr(args(0), &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_multifor" "', argument " "1"" of type '" "std::vector< size_t,std::allocator< size_t > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_multifor" "', argument " "1"" of type '" "std::vector< size_t,std::allocator< size_t > > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (dai::multifor *)new dai::multifor((std::vector< size_t,std::allocator< size_t > > const &)*arg1);
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dai__multifor, 1 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  if (SWIG_IsNewObj(res1)) delete arg1;
  return _out;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return octave_value_list();
}


SWIG_DEFUN( new_multifor, _wrap_new_multifor, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[1]={
    octave_value_ref(args,0)
  };
  
  if (argc == 0) {
    return _wrap_new_multifor__SWIG_0(args, nargout);
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< size_t,std::allocator< size_t > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_multifor__SWIG_1(args, nargout);
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


SWIG_DEFUN( multifor_toInt, _wrap_multifor_toInt, std::string() ) {
  dai::multifor *arg1 = (dai::multifor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  size_t result;
  
  if (!SWIG_check_num_args("multifor_toInt",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__multifor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "multifor_toInt" "', argument " "1"" of type '" "dai::multifor const *""'"); 
  }
  arg1 = reinterpret_cast< dai::multifor * >(argp1);
  result = ((dai::multifor const *)arg1)->operator size_t();
  _outv = SWIG_From_size_t(static_cast< size_t >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( multifor_reset, _wrap_multifor_reset, std::string() ) {
  dai::multifor *arg1 = (dai::multifor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::multifor *result = 0 ;
  
  if (!SWIG_check_num_args("multifor_reset",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__multifor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "multifor_reset" "', argument " "1"" of type '" "dai::multifor *""'"); 
  }
  arg1 = reinterpret_cast< dai::multifor * >(argp1);
  result = (dai::multifor *) &(arg1)->reset();
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dai__multifor, 0 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( multifor_valid, _wrap_multifor_valid, std::string() ) {
  dai::multifor *arg1 = (dai::multifor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  bool result;
  
  if (!SWIG_check_num_args("multifor_valid",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__multifor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "multifor_valid" "', argument " "1"" of type '" "dai::multifor const *""'"); 
  }
  arg1 = reinterpret_cast< dai::multifor * >(argp1);
  result = (bool)((dai::multifor const *)arg1)->valid();
  _outv = SWIG_From_bool(static_cast< bool >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( multifor_next, _wrap_multifor_next, std::string() ) {
  dai::multifor *arg1 = (dai::multifor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("multifor_next",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__multifor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "multifor_next" "', argument " "1"" of type '" "dai::multifor *""'"); 
  }
  arg1 = reinterpret_cast< dai::multifor * >(argp1);
  dai_multifor_next(arg1);
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( multifor___getitem__, _wrap_multifor___getitem__, std::string() ) {
  dai::multifor *arg1 = (dai::multifor *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  size_t result;
  
  if (!SWIG_check_num_args("multifor___getitem__",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__multifor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "multifor___getitem__" "', argument " "1"" of type '" "dai::multifor const *""'"); 
  }
  arg1 = reinterpret_cast< dai::multifor * >(argp1);
  ecode2 = SWIG_AsVal_int(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "multifor___getitem__" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = dai_multifor___getitem__((dai::multifor const *)arg1,arg2);
  _outv = SWIG_From_size_t(static_cast< size_t >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( multifor___paren__, _wrap_multifor___paren__, std::string() ) {
  dai::multifor *arg1 = (dai::multifor *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  size_t result;
  
  if (!SWIG_check_num_args("multifor___paren__",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__multifor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "multifor___paren__" "', argument " "1"" of type '" "dai::multifor const *""'"); 
  }
  arg1 = reinterpret_cast< dai::multifor * >(argp1);
  ecode2 = SWIG_AsVal_int(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "multifor___paren__" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = dai_multifor___paren__((dai::multifor const *)arg1,arg2);
  _outv = SWIG_From_size_t(static_cast< size_t >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( delete_multifor, _wrap_delete_multifor, std::string() ) {
  dai::multifor *arg1 = (dai::multifor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("delete_multifor",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__multifor, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_multifor" "', argument " "1"" of type '" "dai::multifor *""'"); 
  }
  arg1 = reinterpret_cast< dai::multifor * >(argp1);
  delete arg1;
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static swig_octave_member swig_multifor_members[] = {
{"toInt",_wrap_multifor_toInt,0,0,0,0},
{"reset",_wrap_multifor_reset,0,0,0,0},
{"valid",_wrap_multifor_valid,0,0,0,0},
{"next",_wrap_multifor_next,0,0,0,0},
{"__getitem__",_wrap_multifor___getitem__,0,0,0,0},
{"__paren__",_wrap_multifor___paren__,0,0,0,0},
{0,0,0,0,0,0}
};
static const char *swig_multifor_base_names[] = {0};
static const swig_type_info *swig_multifor_base[] = {0};
static swig_octave_class _wrap_class_multifor = {"multifor", &SWIGTYPE_p_dai__multifor,0,_wrap_new_multifor,0,_wrap_delete_multifor,swig_multifor_members,swig_multifor_base_names,swig_multifor_base };

static octave_value_list _wrap_new_State__SWIG_0 (const octave_value_list& args, int nargout) {
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::State *result = 0 ;
  
  if (!SWIG_check_num_args("new_State",args.length(),0,0,0)) {
    SWIG_fail;
  }
  result = (dai::State *)new dai::State();
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dai__State, 1 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static octave_value_list _wrap_new_State__SWIG_1 (const octave_value_list& args, int nargout) {
  dai::VarSet *arg1 = 0 ;
  dai::BigInt arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::State *result = 0 ;
  
  if (!SWIG_check_num_args("new_State",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1, SWIGTYPE_p_dai__VarSet,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_State" "', argument " "1"" of type '" "dai::VarSet const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_State" "', argument " "1"" of type '" "dai::VarSet const &""'"); 
  }
  arg1 = reinterpret_cast< dai::VarSet * >(argp1);
  {
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_mpz_class,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_State" "', argument " "2"" of type '" "dai::BigInt""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_State" "', argument " "2"" of type '" "dai::BigInt""'");
    } else {
      arg2 = *(reinterpret_cast< dai::BigInt * >(argp2));
    }
  }
  result = (dai::State *)new dai::State((dai::VarSet const &)*arg1,arg2);
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dai__State, 1 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static octave_value_list _wrap_new_State__SWIG_2 (const octave_value_list& args, int nargout) {
  dai::VarSet *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::State *result = 0 ;
  
  if (!SWIG_check_num_args("new_State",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1, SWIGTYPE_p_dai__VarSet,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_State" "', argument " "1"" of type '" "dai::VarSet const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_State" "', argument " "1"" of type '" "dai::VarSet const &""'"); 
  }
  arg1 = reinterpret_cast< dai::VarSet * >(argp1);
  result = (dai::State *)new dai::State((dai::VarSet const &)*arg1);
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dai__State, 1 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static octave_value_list _wrap_new_State__SWIG_3 (const octave_value_list& args, int nargout) {
  std::map< dai::Var,size_t > *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::State *result = 0 ;
  
  if (!SWIG_check_num_args("new_State",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1, SWIGTYPE_p_std__mapT_dai__Var_size_t_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_State" "', argument " "1"" of type '" "std::map< dai::Var,size_t > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_State" "', argument " "1"" of type '" "std::map< dai::Var,size_t > const &""'"); 
  }
  arg1 = reinterpret_cast< std::map< dai::Var,size_t > * >(argp1);
  result = (dai::State *)new dai::State((std::map< dai::Var,size_t > const &)*arg1);
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dai__State, 1 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( new_State, _wrap_new_State, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[2]={
    octave_value_ref(args,0),octave_value_ref(args,1)
  };
  
  if (argc == 0) {
    return _wrap_new_State__SWIG_0(args, nargout);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dai__VarSet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_State__SWIG_2(args, nargout);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__mapT_dai__Var_size_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_State__SWIG_3(args, nargout);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dai__VarSet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mpz_class, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_State__SWIG_1(args, nargout);
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


SWIG_DEFUN( State_begin, _wrap_State_begin, std::string() ) {
  dai::State *arg1 = (dai::State *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::State::const_iterator result;
  
  if (!SWIG_check_num_args("State_begin",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__State, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "State_begin" "', argument " "1"" of type '" "dai::State const *""'"); 
  }
  arg1 = reinterpret_cast< dai::State * >(argp1);
  result = ((dai::State const *)arg1)->begin();
  _outv = SWIG_NewPointerObj((new dai::State::const_iterator(static_cast< const dai::State::const_iterator& >(result))), SWIGTYPE_p_std__mapT_dai__Var_size_t_t__const_iterator, SWIG_POINTER_OWN |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( State_end, _wrap_State_end, std::string() ) {
  dai::State *arg1 = (dai::State *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::State::const_iterator result;
  
  if (!SWIG_check_num_args("State_end",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__State, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "State_end" "', argument " "1"" of type '" "dai::State const *""'"); 
  }
  arg1 = reinterpret_cast< dai::State * >(argp1);
  result = ((dai::State const *)arg1)->end();
  _outv = SWIG_NewPointerObj((new dai::State::const_iterator(static_cast< const dai::State::const_iterator& >(result))), SWIGTYPE_p_std__mapT_dai__Var_size_t_t__const_iterator, SWIG_POINTER_OWN |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( State_toInt, _wrap_State_toInt, std::string() ) {
  dai::State *arg1 = (dai::State *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  size_t result;
  
  if (!SWIG_check_num_args("State_toInt",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__State, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "State_toInt" "', argument " "1"" of type '" "dai::State const *""'"); 
  }
  arg1 = reinterpret_cast< dai::State * >(argp1);
  result = ((dai::State const *)arg1)->operator size_t();
  _outv = SWIG_From_size_t(static_cast< size_t >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( State_get, _wrap_State_get, std::string() ) {
  dai::State *arg1 = (dai::State *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  std::map< dai::Var,size_t > *result = 0 ;
  
  if (!SWIG_check_num_args("State_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__State, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "State_get" "', argument " "1"" of type '" "dai::State const *""'"); 
  }
  arg1 = reinterpret_cast< dai::State * >(argp1);
  result = (std::map< dai::Var,size_t > *) &((dai::State const *)arg1)->get();
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__mapT_dai__Var_size_t_t, 0 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static octave_value_list _wrap_State___paren____SWIG_0 (const octave_value_list& args, int nargout) {
  dai::State *arg1 = (dai::State *) 0 ;
  dai::Var *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  size_t result;
  
  if (!SWIG_check_num_args("State___paren__",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__State, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "State___paren__" "', argument " "1"" of type '" "dai::State const *""'"); 
  }
  arg1 = reinterpret_cast< dai::State * >(argp1);
  res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_dai__Var,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "State___paren__" "', argument " "2"" of type '" "dai::Var const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "State___paren__" "', argument " "2"" of type '" "dai::Var const &""'"); 
  }
  arg2 = reinterpret_cast< dai::Var * >(argp2);
  result = ((dai::State const *)arg1)->operator ()((dai::Var const &)*arg2);
  _outv = SWIG_From_size_t(static_cast< size_t >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static octave_value_list _wrap_State___paren____SWIG_1 (const octave_value_list& args, int nargout) {
  dai::State *arg1 = (dai::State *) 0 ;
  dai::VarSet *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::BigInt result;
  
  if (!SWIG_check_num_args("State___paren__",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__State, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "State___paren__" "', argument " "1"" of type '" "dai::State const *""'"); 
  }
  arg1 = reinterpret_cast< dai::State * >(argp1);
  res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_dai__VarSet,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "State___paren__" "', argument " "2"" of type '" "dai::VarSet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "State___paren__" "', argument " "2"" of type '" "dai::VarSet const &""'"); 
  }
  arg2 = reinterpret_cast< dai::VarSet * >(argp2);
  result = ((dai::State const *)arg1)->operator ()((dai::VarSet const &)*arg2);
  _outv = SWIG_NewPointerObj((new dai::BigInt(static_cast< const dai::BigInt& >(result))), SWIGTYPE_p_mpz_class, SWIG_POINTER_OWN |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( State___paren__, _wrap_State___paren__, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[2]={
    octave_value_ref(args,0),octave_value_ref(args,1)
  };
  
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dai__State, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_dai__Var, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_State___paren____SWIG_0(args, nargout);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dai__State, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_dai__VarSet, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_State___paren____SWIG_1(args, nargout);
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


SWIG_DEFUN( State_valid, _wrap_State_valid, std::string() ) {
  dai::State *arg1 = (dai::State *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  bool result;
  
  if (!SWIG_check_num_args("State_valid",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__State, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "State_valid" "', argument " "1"" of type '" "dai::State const *""'"); 
  }
  arg1 = reinterpret_cast< dai::State * >(argp1);
  result = (bool)((dai::State const *)arg1)->valid();
  _outv = SWIG_From_bool(static_cast< bool >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( State_reset, _wrap_State_reset, std::string() ) {
  dai::State *arg1 = (dai::State *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("State_reset",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__State, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "State_reset" "', argument " "1"" of type '" "dai::State *""'"); 
  }
  arg1 = reinterpret_cast< dai::State * >(argp1);
  (arg1)->reset();
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( State_next, _wrap_State_next, std::string() ) {
  dai::State *arg1 = (dai::State *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("State_next",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__State, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "State_next" "', argument " "1"" of type '" "dai::State *""'"); 
  }
  arg1 = reinterpret_cast< dai::State * >(argp1);
  dai_State_next(arg1);
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( delete_State, _wrap_delete_State, std::string() ) {
  dai::State *arg1 = (dai::State *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("delete_State",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__State, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_State" "', argument " "1"" of type '" "dai::State *""'"); 
  }
  arg1 = reinterpret_cast< dai::State * >(argp1);
  delete arg1;
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static swig_octave_member swig_State_members[] = {
{"begin",_wrap_State_begin,0,0,0,0},
{"end",_wrap_State_end,0,0,0,0},
{"toInt",_wrap_State_toInt,0,0,0,0},
{"get",_wrap_State_get,0,0,0,0},
{"__paren__",_wrap_State___paren__,0,0,0,0},
{"valid",_wrap_State_valid,0,0,0,0},
{"reset",_wrap_State_reset,0,0,0,0},
{"next",_wrap_State_next,0,0,0,0},
{0,0,0,0,0,0}
};
static const char *swig_State_base_names[] = {0};
static const swig_type_info *swig_State_base[] = {0};
static swig_octave_class _wrap_class_State = {"State", &SWIGTYPE_p_dai__State,0,_wrap_new_State,0,_wrap_delete_State,swig_State_members,swig_State_base_names,swig_State_base };

SWIG_DEFUN( delete_InfAlg, _wrap_delete_InfAlg, std::string() ) {
  dai::InfAlg *arg1 = (dai::InfAlg *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("delete_InfAlg",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__InfAlg, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_InfAlg" "', argument " "1"" of type '" "dai::InfAlg *""'"); 
  }
  arg1 = reinterpret_cast< dai::InfAlg * >(argp1);
  delete arg1;
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( InfAlg_clone, _wrap_InfAlg_clone, std::string() ) {
  dai::InfAlg *arg1 = (dai::InfAlg *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::InfAlg *result = 0 ;
  
  if (!SWIG_check_num_args("InfAlg_clone",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__InfAlg, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InfAlg_clone" "', argument " "1"" of type '" "dai::InfAlg const *""'"); 
  }
  arg1 = reinterpret_cast< dai::InfAlg * >(argp1);
  result = (dai::InfAlg *)((dai::InfAlg const *)arg1)->clone();
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dai__InfAlg, 0 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( InfAlg_construct, _wrap_InfAlg_construct, std::string() ) {
  dai::InfAlg *arg1 = (dai::InfAlg *) 0 ;
  dai::FactorGraph *arg2 = 0 ;
  dai::PropertySet *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::InfAlg *result = 0 ;
  
  if (!SWIG_check_num_args("InfAlg_construct",args.length(),3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__InfAlg, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InfAlg_construct" "', argument " "1"" of type '" "dai::InfAlg const *""'"); 
  }
  arg1 = reinterpret_cast< dai::InfAlg * >(argp1);
  res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_dai__FactorGraph,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "InfAlg_construct" "', argument " "2"" of type '" "dai::FactorGraph const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "InfAlg_construct" "', argument " "2"" of type '" "dai::FactorGraph const &""'"); 
  }
  arg2 = reinterpret_cast< dai::FactorGraph * >(argp2);
  res3 = SWIG_ConvertPtr(args(2), &argp3, SWIGTYPE_p_dai__PropertySet,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "InfAlg_construct" "', argument " "3"" of type '" "dai::PropertySet const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "InfAlg_construct" "', argument " "3"" of type '" "dai::PropertySet const &""'"); 
  }
  arg3 = reinterpret_cast< dai::PropertySet * >(argp3);
  result = (dai::InfAlg *)((dai::InfAlg const *)arg1)->construct((dai::FactorGraph const &)*arg2,(dai::PropertySet const &)*arg3);
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dai__InfAlg, 0 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( InfAlg_name, _wrap_InfAlg_name, std::string() ) {
  dai::InfAlg *arg1 = (dai::InfAlg *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  std::string result;
  
  if (!SWIG_check_num_args("InfAlg_name",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__InfAlg, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InfAlg_name" "', argument " "1"" of type '" "dai::InfAlg const *""'"); 
  }
  arg1 = reinterpret_cast< dai::InfAlg * >(argp1);
  result = ((dai::InfAlg const *)arg1)->name();
  _outv = SWIG_From_std_string(static_cast< std::string >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( InfAlg_identify, _wrap_InfAlg_identify, std::string() ) {
  dai::InfAlg *arg1 = (dai::InfAlg *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  std::string result;
  
  if (!SWIG_check_num_args("InfAlg_identify",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__InfAlg, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InfAlg_identify" "', argument " "1"" of type '" "dai::InfAlg const *""'"); 
  }
  arg1 = reinterpret_cast< dai::InfAlg * >(argp1);
  result = ((dai::InfAlg const *)arg1)->identify();
  _outv = SWIG_From_std_string(static_cast< std::string >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static octave_value_list _wrap_InfAlg_fg__SWIG_0 (const octave_value_list& args, int nargout) {
  dai::InfAlg *arg1 = (dai::InfAlg *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::FactorGraph *result = 0 ;
  
  if (!SWIG_check_num_args("InfAlg_fg",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__InfAlg, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InfAlg_fg" "', argument " "1"" of type '" "dai::InfAlg *""'"); 
  }
  arg1 = reinterpret_cast< dai::InfAlg * >(argp1);
  result = (dai::FactorGraph *) &(arg1)->fg();
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dai__FactorGraph, 0 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static octave_value_list _wrap_InfAlg_fg__SWIG_1 (const octave_value_list& args, int nargout) {
  dai::InfAlg *arg1 = (dai::InfAlg *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::FactorGraph *result = 0 ;
  
  if (!SWIG_check_num_args("InfAlg_fg",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__InfAlg, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InfAlg_fg" "', argument " "1"" of type '" "dai::InfAlg const *""'"); 
  }
  arg1 = reinterpret_cast< dai::InfAlg * >(argp1);
  result = (dai::FactorGraph *) &((dai::InfAlg const *)arg1)->fg();
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dai__FactorGraph, 0 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( InfAlg_fg, _wrap_InfAlg_fg, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[1]={
    octave_value_ref(args,0)
  };
  
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dai__InfAlg, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_InfAlg_fg__SWIG_0(args, nargout);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dai__InfAlg, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_InfAlg_fg__SWIG_1(args, nargout);
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


static octave_value_list _wrap_InfAlg_init__SWIG_0 (const octave_value_list& args, int nargout) {
  dai::InfAlg *arg1 = (dai::InfAlg *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("InfAlg_init",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__InfAlg, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InfAlg_init" "', argument " "1"" of type '" "dai::InfAlg *""'"); 
  }
  arg1 = reinterpret_cast< dai::InfAlg * >(argp1);
  (arg1)->init();
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static octave_value_list _wrap_InfAlg_init__SWIG_1 (const octave_value_list& args, int nargout) {
  dai::InfAlg *arg1 = (dai::InfAlg *) 0 ;
  dai::VarSet *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("InfAlg_init",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__InfAlg, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InfAlg_init" "', argument " "1"" of type '" "dai::InfAlg *""'"); 
  }
  arg1 = reinterpret_cast< dai::InfAlg * >(argp1);
  res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_dai__VarSet,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "InfAlg_init" "', argument " "2"" of type '" "dai::VarSet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "InfAlg_init" "', argument " "2"" of type '" "dai::VarSet const &""'"); 
  }
  arg2 = reinterpret_cast< dai::VarSet * >(argp2);
  (arg1)->init((dai::VarSet const &)*arg2);
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( InfAlg_init, _wrap_InfAlg_init, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[2]={
    octave_value_ref(args,0),octave_value_ref(args,1)
  };
  
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dai__InfAlg, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_InfAlg_init__SWIG_0(args, nargout);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dai__InfAlg, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_dai__VarSet, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_InfAlg_init__SWIG_1(args, nargout);
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


SWIG_DEFUN( InfAlg_run, _wrap_InfAlg_run, std::string() ) {
  dai::InfAlg *arg1 = (dai::InfAlg *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::Real result;
  
  if (!SWIG_check_num_args("InfAlg_run",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__InfAlg, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InfAlg_run" "', argument " "1"" of type '" "dai::InfAlg *""'"); 
  }
  arg1 = reinterpret_cast< dai::InfAlg * >(argp1);
  result = (dai::Real)(arg1)->run();
  _outv = SWIG_From_double(static_cast< double >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static octave_value_list _wrap_InfAlg_belief__SWIG_0 (const octave_value_list& args, int nargout) {
  dai::InfAlg *arg1 = (dai::InfAlg *) 0 ;
  dai::Var *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::Factor result;
  
  if (!SWIG_check_num_args("InfAlg_belief",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__InfAlg, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InfAlg_belief" "', argument " "1"" of type '" "dai::InfAlg const *""'"); 
  }
  arg1 = reinterpret_cast< dai::InfAlg * >(argp1);
  res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_dai__Var,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "InfAlg_belief" "', argument " "2"" of type '" "dai::Var const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "InfAlg_belief" "', argument " "2"" of type '" "dai::Var const &""'"); 
  }
  arg2 = reinterpret_cast< dai::Var * >(argp2);
  result = ((dai::InfAlg const *)arg1)->belief((dai::Var const &)*arg2);
  _outv = SWIG_NewPointerObj((new dai::Factor(static_cast< const dai::Factor& >(result))), SWIGTYPE_p_dai__TFactorT_double_t, SWIG_POINTER_OWN |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static octave_value_list _wrap_InfAlg_belief__SWIG_1 (const octave_value_list& args, int nargout) {
  dai::InfAlg *arg1 = (dai::InfAlg *) 0 ;
  dai::VarSet *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::Factor result;
  
  if (!SWIG_check_num_args("InfAlg_belief",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__InfAlg, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InfAlg_belief" "', argument " "1"" of type '" "dai::InfAlg const *""'"); 
  }
  arg1 = reinterpret_cast< dai::InfAlg * >(argp1);
  res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_dai__VarSet,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "InfAlg_belief" "', argument " "2"" of type '" "dai::VarSet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "InfAlg_belief" "', argument " "2"" of type '" "dai::VarSet const &""'"); 
  }
  arg2 = reinterpret_cast< dai::VarSet * >(argp2);
  result = ((dai::InfAlg const *)arg1)->belief((dai::VarSet const &)*arg2);
  _outv = SWIG_NewPointerObj((new dai::Factor(static_cast< const dai::Factor& >(result))), SWIGTYPE_p_dai__TFactorT_double_t, SWIG_POINTER_OWN |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( InfAlg_belief, _wrap_InfAlg_belief, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[2]={
    octave_value_ref(args,0),octave_value_ref(args,1)
  };
  
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dai__InfAlg, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_dai__Var, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_InfAlg_belief__SWIG_0(args, nargout);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dai__InfAlg, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_dai__VarSet, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_InfAlg_belief__SWIG_1(args, nargout);
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


SWIG_DEFUN( InfAlg_beliefV, _wrap_InfAlg_beliefV, std::string() ) {
  dai::InfAlg *arg1 = (dai::InfAlg *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::Factor result;
  
  if (!SWIG_check_num_args("InfAlg_beliefV",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__InfAlg, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InfAlg_beliefV" "', argument " "1"" of type '" "dai::InfAlg const *""'"); 
  }
  arg1 = reinterpret_cast< dai::InfAlg * >(argp1);
  ecode2 = SWIG_AsVal_size_t(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "InfAlg_beliefV" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  result = ((dai::InfAlg const *)arg1)->beliefV(arg2);
  _outv = SWIG_NewPointerObj((new dai::Factor(static_cast< const dai::Factor& >(result))), SWIGTYPE_p_dai__TFactorT_double_t, SWIG_POINTER_OWN |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( InfAlg_beliefF, _wrap_InfAlg_beliefF, std::string() ) {
  dai::InfAlg *arg1 = (dai::InfAlg *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::Factor result;
  
  if (!SWIG_check_num_args("InfAlg_beliefF",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__InfAlg, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InfAlg_beliefF" "', argument " "1"" of type '" "dai::InfAlg const *""'"); 
  }
  arg1 = reinterpret_cast< dai::InfAlg * >(argp1);
  ecode2 = SWIG_AsVal_size_t(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "InfAlg_beliefF" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  result = ((dai::InfAlg const *)arg1)->beliefF(arg2);
  _outv = SWIG_NewPointerObj((new dai::Factor(static_cast< const dai::Factor& >(result))), SWIGTYPE_p_dai__TFactorT_double_t, SWIG_POINTER_OWN |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( InfAlg_beliefs, _wrap_InfAlg_beliefs, std::string() ) {
  dai::InfAlg *arg1 = (dai::InfAlg *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  std::vector< dai::Factor,std::allocator< dai::Factor > > result;
  
  if (!SWIG_check_num_args("InfAlg_beliefs",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__InfAlg, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InfAlg_beliefs" "', argument " "1"" of type '" "dai::InfAlg const *""'"); 
  }
  arg1 = reinterpret_cast< dai::InfAlg * >(argp1);
  result = ((dai::InfAlg const *)arg1)->beliefs();
  _outv = swig::from(static_cast< std::vector< dai::TFactor< double >,std::allocator< dai::TFactor< double > > > >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( InfAlg_logZ, _wrap_InfAlg_logZ, std::string() ) {
  dai::InfAlg *arg1 = (dai::InfAlg *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::Real result;
  
  if (!SWIG_check_num_args("InfAlg_logZ",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__InfAlg, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InfAlg_logZ" "', argument " "1"" of type '" "dai::InfAlg const *""'"); 
  }
  arg1 = reinterpret_cast< dai::InfAlg * >(argp1);
  result = (dai::Real)((dai::InfAlg const *)arg1)->logZ();
  _outv = SWIG_From_double(static_cast< double >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( InfAlg_findMaximum, _wrap_InfAlg_findMaximum, std::string() ) {
  dai::InfAlg *arg1 = (dai::InfAlg *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  std::vector< size_t,std::allocator< size_t > > result;
  
  if (!SWIG_check_num_args("InfAlg_findMaximum",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__InfAlg, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InfAlg_findMaximum" "', argument " "1"" of type '" "dai::InfAlg const *""'"); 
  }
  arg1 = reinterpret_cast< dai::InfAlg * >(argp1);
  result = ((dai::InfAlg const *)arg1)->findMaximum();
  _outv = swig::from(static_cast< std::vector< size_t,std::allocator< size_t > > >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( InfAlg_maxDiff, _wrap_InfAlg_maxDiff, std::string() ) {
  dai::InfAlg *arg1 = (dai::InfAlg *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::Real result;
  
  if (!SWIG_check_num_args("InfAlg_maxDiff",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__InfAlg, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InfAlg_maxDiff" "', argument " "1"" of type '" "dai::InfAlg const *""'"); 
  }
  arg1 = reinterpret_cast< dai::InfAlg * >(argp1);
  result = (dai::Real)((dai::InfAlg const *)arg1)->maxDiff();
  _outv = SWIG_From_double(static_cast< double >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( InfAlg_Iterations, _wrap_InfAlg_Iterations, std::string() ) {
  dai::InfAlg *arg1 = (dai::InfAlg *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  size_t result;
  
  if (!SWIG_check_num_args("InfAlg_Iterations",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__InfAlg, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InfAlg_Iterations" "', argument " "1"" of type '" "dai::InfAlg const *""'"); 
  }
  arg1 = reinterpret_cast< dai::InfAlg * >(argp1);
  result = ((dai::InfAlg const *)arg1)->Iterations();
  _outv = SWIG_From_size_t(static_cast< size_t >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( InfAlg_setMaxIter, _wrap_InfAlg_setMaxIter, std::string() ) {
  dai::InfAlg *arg1 = (dai::InfAlg *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("InfAlg_setMaxIter",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__InfAlg, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InfAlg_setMaxIter" "', argument " "1"" of type '" "dai::InfAlg *""'"); 
  }
  arg1 = reinterpret_cast< dai::InfAlg * >(argp1);
  ecode2 = SWIG_AsVal_size_t(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "InfAlg_setMaxIter" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  (arg1)->setMaxIter(arg2);
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static octave_value_list _wrap_InfAlg_clamp__SWIG_0 (const octave_value_list& args, int nargout) {
  dai::InfAlg *arg1 = (dai::InfAlg *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  bool arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("InfAlg_clamp",args.length(),4,4,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__InfAlg, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InfAlg_clamp" "', argument " "1"" of type '" "dai::InfAlg *""'"); 
  }
  arg1 = reinterpret_cast< dai::InfAlg * >(argp1);
  ecode2 = SWIG_AsVal_size_t(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "InfAlg_clamp" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  ecode3 = SWIG_AsVal_size_t(args(2), &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "InfAlg_clamp" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  ecode4 = SWIG_AsVal_bool(args(3), &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "InfAlg_clamp" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  (arg1)->clamp(arg2,arg3,arg4);
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static octave_value_list _wrap_InfAlg_clamp__SWIG_1 (const octave_value_list& args, int nargout) {
  dai::InfAlg *arg1 = (dai::InfAlg *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("InfAlg_clamp",args.length(),3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__InfAlg, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InfAlg_clamp" "', argument " "1"" of type '" "dai::InfAlg *""'"); 
  }
  arg1 = reinterpret_cast< dai::InfAlg * >(argp1);
  ecode2 = SWIG_AsVal_size_t(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "InfAlg_clamp" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  ecode3 = SWIG_AsVal_size_t(args(2), &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "InfAlg_clamp" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  (arg1)->clamp(arg2,arg3);
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( InfAlg_clamp, _wrap_InfAlg_clamp, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[4]={
    octave_value_ref(args,0),octave_value_ref(args,1),octave_value_ref(args,2),octave_value_ref(args,3)
  };
  
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dai__InfAlg, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_InfAlg_clamp__SWIG_1(args, nargout);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dai__InfAlg, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_InfAlg_clamp__SWIG_0(args, nargout);
          }
        }
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


static octave_value_list _wrap_InfAlg_makeCavity__SWIG_0 (const octave_value_list& args, int nargout) {
  dai::InfAlg *arg1 = (dai::InfAlg *) 0 ;
  size_t arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("InfAlg_makeCavity",args.length(),3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__InfAlg, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InfAlg_makeCavity" "', argument " "1"" of type '" "dai::InfAlg *""'"); 
  }
  arg1 = reinterpret_cast< dai::InfAlg * >(argp1);
  ecode2 = SWIG_AsVal_size_t(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "InfAlg_makeCavity" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  ecode3 = SWIG_AsVal_bool(args(2), &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "InfAlg_makeCavity" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  (arg1)->makeCavity(arg2,arg3);
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static octave_value_list _wrap_InfAlg_makeCavity__SWIG_1 (const octave_value_list& args, int nargout) {
  dai::InfAlg *arg1 = (dai::InfAlg *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("InfAlg_makeCavity",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__InfAlg, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InfAlg_makeCavity" "', argument " "1"" of type '" "dai::InfAlg *""'"); 
  }
  arg1 = reinterpret_cast< dai::InfAlg * >(argp1);
  ecode2 = SWIG_AsVal_size_t(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "InfAlg_makeCavity" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  (arg1)->makeCavity(arg2);
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( InfAlg_makeCavity, _wrap_InfAlg_makeCavity, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[3]={
    octave_value_ref(args,0),octave_value_ref(args,1),octave_value_ref(args,2)
  };
  
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dai__InfAlg, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_InfAlg_makeCavity__SWIG_1(args, nargout);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dai__InfAlg, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_InfAlg_makeCavity__SWIG_0(args, nargout);
        }
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


static octave_value_list _wrap_InfAlg_makeRegionCavity__SWIG_0 (const octave_value_list& args, int nargout) {
  dai::InfAlg *arg1 = (dai::InfAlg *) 0 ;
  std::vector< size_t,std::allocator< size_t > > arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("InfAlg_makeRegionCavity",args.length(),3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__InfAlg, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InfAlg_makeRegionCavity" "', argument " "1"" of type '" "dai::InfAlg *""'"); 
  }
  arg1 = reinterpret_cast< dai::InfAlg * >(argp1);
  {
    std::vector< size_t,std::allocator< size_t > > *ptr = (std::vector< size_t,std::allocator< size_t > > *)0;
    int res = swig::asptr(args(1), &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "InfAlg_makeRegionCavity" "', argument " "2"" of type '" "std::vector< size_t,std::allocator< size_t > >""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  ecode3 = SWIG_AsVal_bool(args(2), &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "InfAlg_makeRegionCavity" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  (arg1)->makeRegionCavity(arg2,arg3);
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static octave_value_list _wrap_InfAlg_makeRegionCavity__SWIG_1 (const octave_value_list& args, int nargout) {
  dai::InfAlg *arg1 = (dai::InfAlg *) 0 ;
  std::vector< size_t,std::allocator< size_t > > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("InfAlg_makeRegionCavity",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__InfAlg, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InfAlg_makeRegionCavity" "', argument " "1"" of type '" "dai::InfAlg *""'"); 
  }
  arg1 = reinterpret_cast< dai::InfAlg * >(argp1);
  {
    std::vector< size_t,std::allocator< size_t > > *ptr = (std::vector< size_t,std::allocator< size_t > > *)0;
    int res = swig::asptr(args(1), &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "InfAlg_makeRegionCavity" "', argument " "2"" of type '" "std::vector< size_t,std::allocator< size_t > >""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  (arg1)->makeRegionCavity(arg2);
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( InfAlg_makeRegionCavity, _wrap_InfAlg_makeRegionCavity, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[3]={
    octave_value_ref(args,0),octave_value_ref(args,1),octave_value_ref(args,2)
  };
  
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dai__InfAlg, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = swig::asptr(argv[1], (std::vector< size_t,std::allocator< size_t > >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_InfAlg_makeRegionCavity__SWIG_1(args, nargout);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dai__InfAlg, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = swig::asptr(argv[1], (std::vector< size_t,std::allocator< size_t > >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_InfAlg_makeRegionCavity__SWIG_0(args, nargout);
        }
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


SWIG_DEFUN( InfAlg_backupFactor, _wrap_InfAlg_backupFactor, std::string() ) {
  dai::InfAlg *arg1 = (dai::InfAlg *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("InfAlg_backupFactor",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__InfAlg, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InfAlg_backupFactor" "', argument " "1"" of type '" "dai::InfAlg *""'"); 
  }
  arg1 = reinterpret_cast< dai::InfAlg * >(argp1);
  ecode2 = SWIG_AsVal_size_t(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "InfAlg_backupFactor" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  (arg1)->backupFactor(arg2);
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( InfAlg_backupFactors, _wrap_InfAlg_backupFactors, std::string() ) {
  dai::InfAlg *arg1 = (dai::InfAlg *) 0 ;
  dai::VarSet *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("InfAlg_backupFactors",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__InfAlg, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InfAlg_backupFactors" "', argument " "1"" of type '" "dai::InfAlg *""'"); 
  }
  arg1 = reinterpret_cast< dai::InfAlg * >(argp1);
  res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_dai__VarSet,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "InfAlg_backupFactors" "', argument " "2"" of type '" "dai::VarSet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "InfAlg_backupFactors" "', argument " "2"" of type '" "dai::VarSet const &""'"); 
  }
  arg2 = reinterpret_cast< dai::VarSet * >(argp2);
  (arg1)->backupFactors((dai::VarSet const &)*arg2);
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( InfAlg_restoreFactor, _wrap_InfAlg_restoreFactor, std::string() ) {
  dai::InfAlg *arg1 = (dai::InfAlg *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("InfAlg_restoreFactor",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__InfAlg, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InfAlg_restoreFactor" "', argument " "1"" of type '" "dai::InfAlg *""'"); 
  }
  arg1 = reinterpret_cast< dai::InfAlg * >(argp1);
  ecode2 = SWIG_AsVal_size_t(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "InfAlg_restoreFactor" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  (arg1)->restoreFactor(arg2);
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( InfAlg_restoreFactors, _wrap_InfAlg_restoreFactors, std::string() ) {
  dai::InfAlg *arg1 = (dai::InfAlg *) 0 ;
  dai::VarSet *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("InfAlg_restoreFactors",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__InfAlg, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InfAlg_restoreFactors" "', argument " "1"" of type '" "dai::InfAlg *""'"); 
  }
  arg1 = reinterpret_cast< dai::InfAlg * >(argp1);
  res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_dai__VarSet,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "InfAlg_restoreFactors" "', argument " "2"" of type '" "dai::VarSet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "InfAlg_restoreFactors" "', argument " "2"" of type '" "dai::VarSet const &""'"); 
  }
  arg2 = reinterpret_cast< dai::VarSet * >(argp2);
  (arg1)->restoreFactors((dai::VarSet const &)*arg2);
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( InfAlg_setProperties, _wrap_InfAlg_setProperties, std::string() ) {
  dai::InfAlg *arg1 = (dai::InfAlg *) 0 ;
  dai::PropertySet *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("InfAlg_setProperties",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__InfAlg, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InfAlg_setProperties" "', argument " "1"" of type '" "dai::InfAlg *""'"); 
  }
  arg1 = reinterpret_cast< dai::InfAlg * >(argp1);
  res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_dai__PropertySet,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "InfAlg_setProperties" "', argument " "2"" of type '" "dai::PropertySet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "InfAlg_setProperties" "', argument " "2"" of type '" "dai::PropertySet const &""'"); 
  }
  arg2 = reinterpret_cast< dai::PropertySet * >(argp2);
  (arg1)->setProperties((dai::PropertySet const &)*arg2);
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( InfAlg_getProperties, _wrap_InfAlg_getProperties, std::string() ) {
  dai::InfAlg *arg1 = (dai::InfAlg *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::PropertySet result;
  
  if (!SWIG_check_num_args("InfAlg_getProperties",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__InfAlg, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InfAlg_getProperties" "', argument " "1"" of type '" "dai::InfAlg const *""'"); 
  }
  arg1 = reinterpret_cast< dai::InfAlg * >(argp1);
  result = ((dai::InfAlg const *)arg1)->getProperties();
  _outv = SWIG_NewPointerObj((new dai::PropertySet(static_cast< const dai::PropertySet& >(result))), SWIGTYPE_p_dai__PropertySet, SWIG_POINTER_OWN |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( InfAlg_printProperties, _wrap_InfAlg_printProperties, std::string() ) {
  dai::InfAlg *arg1 = (dai::InfAlg *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  std::string result;
  
  if (!SWIG_check_num_args("InfAlg_printProperties",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__InfAlg, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InfAlg_printProperties" "', argument " "1"" of type '" "dai::InfAlg const *""'"); 
  }
  arg1 = reinterpret_cast< dai::InfAlg * >(argp1);
  result = ((dai::InfAlg const *)arg1)->printProperties();
  _outv = SWIG_From_std_string(static_cast< std::string >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static swig_octave_member swig_InfAlg_members[] = {
{"clone",_wrap_InfAlg_clone,0,0,0,0},
{"construct",_wrap_InfAlg_construct,0,0,0,0},
{"name",_wrap_InfAlg_name,0,0,0,0},
{"identify",_wrap_InfAlg_identify,0,0,0,0},
{"fg",_wrap_InfAlg_fg,0,0,0,0},
{"init",_wrap_InfAlg_init,0,0,0,0},
{"run",_wrap_InfAlg_run,0,0,0,0},
{"belief",_wrap_InfAlg_belief,0,0,0,0},
{"beliefV",_wrap_InfAlg_beliefV,0,0,0,0},
{"beliefF",_wrap_InfAlg_beliefF,0,0,0,0},
{"beliefs",_wrap_InfAlg_beliefs,0,0,0,0},
{"logZ",_wrap_InfAlg_logZ,0,0,0,0},
{"findMaximum",_wrap_InfAlg_findMaximum,0,0,0,0},
{"maxDiff",_wrap_InfAlg_maxDiff,0,0,0,0},
{"Iterations",_wrap_InfAlg_Iterations,0,0,0,0},
{"setMaxIter",_wrap_InfAlg_setMaxIter,0,0,0,0},
{"clamp",_wrap_InfAlg_clamp,0,0,0,0},
{"makeCavity",_wrap_InfAlg_makeCavity,0,0,0,0},
{"makeRegionCavity",_wrap_InfAlg_makeRegionCavity,0,0,0,0},
{"backupFactor",_wrap_InfAlg_backupFactor,0,0,0,0},
{"backupFactors",_wrap_InfAlg_backupFactors,0,0,0,0},
{"restoreFactor",_wrap_InfAlg_restoreFactor,0,0,0,0},
{"restoreFactors",_wrap_InfAlg_restoreFactors,0,0,0,0},
{"setProperties",_wrap_InfAlg_setProperties,0,0,0,0},
{"getProperties",_wrap_InfAlg_getProperties,0,0,0,0},
{"printProperties",_wrap_InfAlg_printProperties,0,0,0,0},
{0,0,0,0,0,0}
};
static const char *swig_InfAlg_base_names[] = {0};
static const swig_type_info *swig_InfAlg_base[] = {0};
static swig_octave_class _wrap_class_InfAlg = {"InfAlg", &SWIGTYPE_p_dai__InfAlg,0,0,0,_wrap_delete_InfAlg,swig_InfAlg_members,swig_InfAlg_base_names,swig_InfAlg_base };

SWIG_DEFUN( calcMarginal, _wrap_calcMarginal, std::string() ) {
  dai::InfAlg *arg1 = 0 ;
  dai::VarSet *arg2 = 0 ;
  bool arg3 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::Factor result;
  
  if (!SWIG_check_num_args("calcMarginal",args.length(),3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1, SWIGTYPE_p_dai__InfAlg,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "calcMarginal" "', argument " "1"" of type '" "dai::InfAlg const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "calcMarginal" "', argument " "1"" of type '" "dai::InfAlg const &""'"); 
  }
  arg1 = reinterpret_cast< dai::InfAlg * >(argp1);
  res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_dai__VarSet,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "calcMarginal" "', argument " "2"" of type '" "dai::VarSet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "calcMarginal" "', argument " "2"" of type '" "dai::VarSet const &""'"); 
  }
  arg2 = reinterpret_cast< dai::VarSet * >(argp2);
  ecode3 = SWIG_AsVal_bool(args(2), &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "calcMarginal" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  result = dai::calcMarginal((dai::InfAlg const &)*arg1,(dai::VarSet const &)*arg2,arg3);
  _outv = SWIG_NewPointerObj((new dai::Factor(static_cast< const dai::Factor& >(result))), SWIGTYPE_p_dai__TFactorT_double_t, SWIG_POINTER_OWN |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static octave_value_list _wrap_calcPairBeliefs__SWIG_0 (const octave_value_list& args, int nargout) {
  dai::InfAlg *arg1 = 0 ;
  dai::VarSet *arg2 = 0 ;
  bool arg3 ;
  bool arg4 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  std::vector< dai::Factor,std::allocator< dai::Factor > > result;
  
  if (!SWIG_check_num_args("calcPairBeliefs",args.length(),4,4,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1, SWIGTYPE_p_dai__InfAlg,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "calcPairBeliefs" "', argument " "1"" of type '" "dai::InfAlg const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "calcPairBeliefs" "', argument " "1"" of type '" "dai::InfAlg const &""'"); 
  }
  arg1 = reinterpret_cast< dai::InfAlg * >(argp1);
  res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_dai__VarSet,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "calcPairBeliefs" "', argument " "2"" of type '" "dai::VarSet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "calcPairBeliefs" "', argument " "2"" of type '" "dai::VarSet const &""'"); 
  }
  arg2 = reinterpret_cast< dai::VarSet * >(argp2);
  ecode3 = SWIG_AsVal_bool(args(2), &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "calcPairBeliefs" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  ecode4 = SWIG_AsVal_bool(args(3), &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "calcPairBeliefs" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  result = dai::calcPairBeliefs((dai::InfAlg const &)*arg1,(dai::VarSet const &)*arg2,arg3,arg4);
  _outv = swig::from(static_cast< std::vector< dai::TFactor< double >,std::allocator< dai::TFactor< double > > > >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static octave_value_list _wrap_calcPairBeliefs__SWIG_1 (const octave_value_list& args, int nargout) {
  dai::InfAlg *arg1 = 0 ;
  dai::VarSet *arg2 = 0 ;
  bool arg3 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  std::vector< dai::Factor,std::allocator< dai::Factor > > result;
  
  if (!SWIG_check_num_args("calcPairBeliefs",args.length(),3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1, SWIGTYPE_p_dai__InfAlg,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "calcPairBeliefs" "', argument " "1"" of type '" "dai::InfAlg const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "calcPairBeliefs" "', argument " "1"" of type '" "dai::InfAlg const &""'"); 
  }
  arg1 = reinterpret_cast< dai::InfAlg * >(argp1);
  res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_dai__VarSet,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "calcPairBeliefs" "', argument " "2"" of type '" "dai::VarSet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "calcPairBeliefs" "', argument " "2"" of type '" "dai::VarSet const &""'"); 
  }
  arg2 = reinterpret_cast< dai::VarSet * >(argp2);
  ecode3 = SWIG_AsVal_bool(args(2), &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "calcPairBeliefs" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  result = dai::calcPairBeliefs((dai::InfAlg const &)*arg1,(dai::VarSet const &)*arg2,arg3);
  _outv = swig::from(static_cast< std::vector< dai::TFactor< double >,std::allocator< dai::TFactor< double > > > >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( calcPairBeliefs, _wrap_calcPairBeliefs, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[4]={
    octave_value_ref(args,0),octave_value_ref(args,1),octave_value_ref(args,2),octave_value_ref(args,3)
  };
  
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dai__InfAlg, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_dai__VarSet, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_calcPairBeliefs__SWIG_1(args, nargout);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dai__InfAlg, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_dai__VarSet, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_calcPairBeliefs__SWIG_0(args, nargout);
          }
        }
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


SWIG_DEFUN( findMaximum, _wrap_findMaximum, std::string() ) {
  dai::InfAlg *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  std::vector< size_t,std::allocator< size_t > > result;
  
  if (!SWIG_check_num_args("findMaximum",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1, SWIGTYPE_p_dai__InfAlg,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "findMaximum" "', argument " "1"" of type '" "dai::InfAlg const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "findMaximum" "', argument " "1"" of type '" "dai::InfAlg const &""'"); 
  }
  arg1 = reinterpret_cast< dai::InfAlg * >(argp1);
  result = dai::findMaximum((dai::InfAlg const &)*arg1);
  _outv = swig::from(static_cast< std::vector< size_t,std::allocator< size_t > > >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( builtinInfAlgs, _wrap_builtinInfAlgs, std::string() ) {
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  std::map< std::string,dai::InfAlg * > *result = 0 ;
  
  if (!SWIG_check_num_args("builtinInfAlgs",args.length(),0,0,0)) {
    SWIG_fail;
  }
  result = (std::map< std::string,dai::InfAlg * > *) &dai::builtinInfAlgs();
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__mapT_std__string_dai__InfAlg_p_t, 0 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( builtinInfAlgNames, _wrap_builtinInfAlgNames, std::string() ) {
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  SwigValueWrapper< std::set< std::string > > result;
  
  if (!SWIG_check_num_args("builtinInfAlgNames",args.length(),0,0,0)) {
    SWIG_fail;
  }
  result = dai::builtinInfAlgNames();
  _outv = SWIG_NewPointerObj((new std::set< std::string >(static_cast< const std::set< std::string >& >(result))), SWIGTYPE_p_std__setT_std__string_t, SWIG_POINTER_OWN |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( newInfAlg, _wrap_newInfAlg, std::string() ) {
  std::string *arg1 = 0 ;
  dai::FactorGraph *arg2 = 0 ;
  dai::PropertySet *arg3 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::InfAlg *result = 0 ;
  
  if (!SWIG_check_num_args("newInfAlg",args.length(),3,3,0)) {
    SWIG_fail;
  }
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(args(0), &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "newInfAlg" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "newInfAlg" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_dai__FactorGraph,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "newInfAlg" "', argument " "2"" of type '" "dai::FactorGraph const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "newInfAlg" "', argument " "2"" of type '" "dai::FactorGraph const &""'"); 
  }
  arg2 = reinterpret_cast< dai::FactorGraph * >(argp2);
  res3 = SWIG_ConvertPtr(args(2), &argp3, SWIGTYPE_p_dai__PropertySet,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "newInfAlg" "', argument " "3"" of type '" "dai::PropertySet const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "newInfAlg" "', argument " "3"" of type '" "dai::PropertySet const &""'"); 
  }
  arg3 = reinterpret_cast< dai::PropertySet * >(argp3);
  result = (dai::InfAlg *)dai::newInfAlg((std::string const &)*arg1,(dai::FactorGraph const &)*arg2,(dai::PropertySet const &)*arg3);
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dai__InfAlg, 0 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  if (SWIG_IsNewObj(res1)) delete arg1;
  return _out;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return octave_value_list();
}


static octave_value_list _wrap_newInfAlgFromString__SWIG_0 (const octave_value_list& args, int nargout) {
  std::string *arg1 = 0 ;
  dai::FactorGraph *arg2 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::InfAlg *result = 0 ;
  
  if (!SWIG_check_num_args("newInfAlgFromString",args.length(),2,2,0)) {
    SWIG_fail;
  }
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(args(0), &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "newInfAlgFromString" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "newInfAlgFromString" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_dai__FactorGraph,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "newInfAlgFromString" "', argument " "2"" of type '" "dai::FactorGraph const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "newInfAlgFromString" "', argument " "2"" of type '" "dai::FactorGraph const &""'"); 
  }
  arg2 = reinterpret_cast< dai::FactorGraph * >(argp2);
  result = (dai::InfAlg *)dai::newInfAlgFromString((std::string const &)*arg1,(dai::FactorGraph const &)*arg2);
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dai__InfAlg, 0 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  if (SWIG_IsNewObj(res1)) delete arg1;
  return _out;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return octave_value_list();
}


static octave_value_list _wrap_newInfAlgFromString__SWIG_1 (const octave_value_list& args, int nargout) {
  std::string *arg1 = 0 ;
  dai::FactorGraph *arg2 = 0 ;
  std::map< std::string,std::string > *arg3 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::InfAlg *result = 0 ;
  
  if (!SWIG_check_num_args("newInfAlgFromString",args.length(),3,3,0)) {
    SWIG_fail;
  }
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(args(0), &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "newInfAlgFromString" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "newInfAlgFromString" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_dai__FactorGraph,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "newInfAlgFromString" "', argument " "2"" of type '" "dai::FactorGraph const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "newInfAlgFromString" "', argument " "2"" of type '" "dai::FactorGraph const &""'"); 
  }
  arg2 = reinterpret_cast< dai::FactorGraph * >(argp2);
  res3 = SWIG_ConvertPtr(args(2), &argp3, SWIGTYPE_p_std__mapT_std__string_std__string_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "newInfAlgFromString" "', argument " "3"" of type '" "std::map< std::string,std::string > const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "newInfAlgFromString" "', argument " "3"" of type '" "std::map< std::string,std::string > const &""'"); 
  }
  arg3 = reinterpret_cast< std::map< std::string,std::string > * >(argp3);
  result = (dai::InfAlg *)dai::newInfAlgFromString((std::string const &)*arg1,(dai::FactorGraph const &)*arg2,(std::map< std::string,std::string > const &)*arg3);
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dai__InfAlg, 0 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  if (SWIG_IsNewObj(res1)) delete arg1;
  return _out;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return octave_value_list();
}


SWIG_DEFUN( newInfAlgFromString, _wrap_newInfAlgFromString, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[3]={
    octave_value_ref(args,0),octave_value_ref(args,1),octave_value_ref(args,2)
  };
  
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_dai__FactorGraph, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_newInfAlgFromString__SWIG_0(args, nargout);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_dai__FactorGraph, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_std__mapT_std__string_std__string_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_newInfAlgFromString__SWIG_1(args, nargout);
        }
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


static octave_value_list _wrap_parseNameProperties__SWIG_0 (const octave_value_list& args, int nargout) {
  std::string *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  SwigValueWrapper< std::pair< std::string,dai::PropertySet > > result;
  
  if (!SWIG_check_num_args("parseNameProperties",args.length(),1,1,0)) {
    SWIG_fail;
  }
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(args(0), &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "parseNameProperties" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "parseNameProperties" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  result = dai::parseNameProperties((std::string const &)*arg1);
  _outv = SWIG_NewPointerObj((new std::pair< std::string,dai::PropertySet >(static_cast< const std::pair< std::string,dai::PropertySet >& >(result))), SWIGTYPE_p_std__pairT_std__string_dai__PropertySet_t, SWIG_POINTER_OWN |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  if (SWIG_IsNewObj(res1)) delete arg1;
  return _out;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return octave_value_list();
}


static octave_value_list _wrap_parseNameProperties__SWIG_1 (const octave_value_list& args, int nargout) {
  std::string *arg1 = 0 ;
  std::map< std::string,std::string > *arg2 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  SwigValueWrapper< std::pair< std::string,dai::PropertySet > > result;
  
  if (!SWIG_check_num_args("parseNameProperties",args.length(),2,2,0)) {
    SWIG_fail;
  }
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(args(0), &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "parseNameProperties" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "parseNameProperties" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_std__mapT_std__string_std__string_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "parseNameProperties" "', argument " "2"" of type '" "std::map< std::string,std::string > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "parseNameProperties" "', argument " "2"" of type '" "std::map< std::string,std::string > const &""'"); 
  }
  arg2 = reinterpret_cast< std::map< std::string,std::string > * >(argp2);
  result = dai::parseNameProperties((std::string const &)*arg1,(std::map< std::string,std::string > const &)*arg2);
  _outv = SWIG_NewPointerObj((new std::pair< std::string,dai::PropertySet >(static_cast< const std::pair< std::string,dai::PropertySet >& >(result))), SWIGTYPE_p_std__pairT_std__string_dai__PropertySet_t, SWIG_POINTER_OWN |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  if (SWIG_IsNewObj(res1)) delete arg1;
  return _out;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return octave_value_list();
}


SWIG_DEFUN( parseNameProperties, _wrap_parseNameProperties, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[2]={
    octave_value_ref(args,0),octave_value_ref(args,1)
  };
  
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_parseNameProperties__SWIG_0(args, nargout);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__mapT_std__string_std__string_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_parseNameProperties__SWIG_1(args, nargout);
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


SWIG_DEFUN( readAliasesFile, _wrap_readAliasesFile, std::string() ) {
  std::string *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  SwigValueWrapper< std::map< std::string,std::string > > result;
  
  if (!SWIG_check_num_args("readAliasesFile",args.length(),1,1,0)) {
    SWIG_fail;
  }
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(args(0), &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "readAliasesFile" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "readAliasesFile" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  result = dai::readAliasesFile((std::string const &)*arg1);
  _outv = SWIG_NewPointerObj((new std::map< std::string,std::string >(static_cast< const std::map< std::string,std::string >& >(result))), SWIGTYPE_p_std__mapT_std__string_std__string_t, SWIG_POINTER_OWN |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  if (SWIG_IsNewObj(res1)) delete arg1;
  return _out;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return octave_value_list();
}


SWIG_DEFUN( BP_props_set, _wrap_BP_props_set, std::string() ) {
  dai::BP *arg1 = (dai::BP *) 0 ;
  dai::BP::Properties *arg2 = (dai::BP::Properties *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("BP_props_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__BP, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BP_props_set" "', argument " "1"" of type '" "dai::BP *""'"); 
  }
  arg1 = reinterpret_cast< dai::BP * >(argp1);
  res2 = SWIG_ConvertPtr(args(1), &argp2,SWIGTYPE_p_dai__BP__Properties, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BP_props_set" "', argument " "2"" of type '" "dai::BP::Properties *""'"); 
  }
  arg2 = reinterpret_cast< dai::BP::Properties * >(argp2);
  if (arg1) (arg1)->props = *arg2;
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( BP_props_get, _wrap_BP_props_get, std::string() ) {
  dai::BP *arg1 = (dai::BP *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::BP::Properties *result = 0 ;
  
  if (!SWIG_check_num_args("BP_props_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__BP, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BP_props_get" "', argument " "1"" of type '" "dai::BP *""'"); 
  }
  arg1 = reinterpret_cast< dai::BP * >(argp1);
  result = (dai::BP::Properties *)& ((arg1)->props);
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dai__BP__Properties, 0 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( BP_recordSentMessages_set, _wrap_BP_recordSentMessages_set, std::string() ) {
  dai::BP *arg1 = (dai::BP *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("BP_recordSentMessages_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__BP, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BP_recordSentMessages_set" "', argument " "1"" of type '" "dai::BP *""'"); 
  }
  arg1 = reinterpret_cast< dai::BP * >(argp1);
  ecode2 = SWIG_AsVal_bool(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BP_recordSentMessages_set" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  if (arg1) (arg1)->recordSentMessages = arg2;
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( BP_recordSentMessages_get, _wrap_BP_recordSentMessages_get, std::string() ) {
  dai::BP *arg1 = (dai::BP *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  bool result;
  
  if (!SWIG_check_num_args("BP_recordSentMessages_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__BP, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BP_recordSentMessages_get" "', argument " "1"" of type '" "dai::BP *""'"); 
  }
  arg1 = reinterpret_cast< dai::BP * >(argp1);
  result = (bool) ((arg1)->recordSentMessages);
  _outv = SWIG_From_bool(static_cast< bool >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static octave_value_list _wrap_new_BP__SWIG_0 (const octave_value_list& args, int nargout) {
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::BP *result = 0 ;
  
  if (!SWIG_check_num_args("new_BP",args.length(),0,0,0)) {
    SWIG_fail;
  }
  result = (dai::BP *)new dai::BP();
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dai__BP, 1 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static octave_value_list _wrap_new_BP__SWIG_1 (const octave_value_list& args, int nargout) {
  dai::FactorGraph *arg1 = 0 ;
  dai::PropertySet *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::BP *result = 0 ;
  
  if (!SWIG_check_num_args("new_BP",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1, SWIGTYPE_p_dai__FactorGraph,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_BP" "', argument " "1"" of type '" "dai::FactorGraph const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_BP" "', argument " "1"" of type '" "dai::FactorGraph const &""'"); 
  }
  arg1 = reinterpret_cast< dai::FactorGraph * >(argp1);
  res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_dai__PropertySet,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_BP" "', argument " "2"" of type '" "dai::PropertySet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_BP" "', argument " "2"" of type '" "dai::PropertySet const &""'"); 
  }
  arg2 = reinterpret_cast< dai::PropertySet * >(argp2);
  result = (dai::BP *)new dai::BP((dai::FactorGraph const &)*arg1,(dai::PropertySet const &)*arg2);
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dai__BP, 1 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static octave_value_list _wrap_new_BP__SWIG_2 (const octave_value_list& args, int nargout) {
  dai::BP *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::BP *result = 0 ;
  
  if (!SWIG_check_num_args("new_BP",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1, SWIGTYPE_p_dai__BP,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_BP" "', argument " "1"" of type '" "dai::BP const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_BP" "', argument " "1"" of type '" "dai::BP const &""'"); 
  }
  arg1 = reinterpret_cast< dai::BP * >(argp1);
  result = (dai::BP *)new dai::BP((dai::BP const &)*arg1);
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dai__BP, 1 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( new_BP, _wrap_new_BP, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[2]={
    octave_value_ref(args,0),octave_value_ref(args,1)
  };
  
  if (argc == 0) {
    return _wrap_new_BP__SWIG_0(args, nargout);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dai__BP, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_BP__SWIG_2(args, nargout);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dai__FactorGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_dai__PropertySet, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_BP__SWIG_1(args, nargout);
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


SWIG_DEFUN( BP_clone, _wrap_BP_clone, std::string() ) {
  dai::BP *arg1 = (dai::BP *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::BP *result = 0 ;
  
  if (!SWIG_check_num_args("BP_clone",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__BP, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BP_clone" "', argument " "1"" of type '" "dai::BP const *""'"); 
  }
  arg1 = reinterpret_cast< dai::BP * >(argp1);
  result = (dai::BP *)((dai::BP const *)arg1)->clone();
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dai__BP, 0 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( BP_construct, _wrap_BP_construct, std::string() ) {
  dai::BP *arg1 = (dai::BP *) 0 ;
  dai::FactorGraph *arg2 = 0 ;
  dai::PropertySet *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::BP *result = 0 ;
  
  if (!SWIG_check_num_args("BP_construct",args.length(),3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__BP, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BP_construct" "', argument " "1"" of type '" "dai::BP const *""'"); 
  }
  arg1 = reinterpret_cast< dai::BP * >(argp1);
  res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_dai__FactorGraph,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BP_construct" "', argument " "2"" of type '" "dai::FactorGraph const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BP_construct" "', argument " "2"" of type '" "dai::FactorGraph const &""'"); 
  }
  arg2 = reinterpret_cast< dai::FactorGraph * >(argp2);
  res3 = SWIG_ConvertPtr(args(2), &argp3, SWIGTYPE_p_dai__PropertySet,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "BP_construct" "', argument " "3"" of type '" "dai::PropertySet const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BP_construct" "', argument " "3"" of type '" "dai::PropertySet const &""'"); 
  }
  arg3 = reinterpret_cast< dai::PropertySet * >(argp3);
  result = (dai::BP *)((dai::BP const *)arg1)->construct((dai::FactorGraph const &)*arg2,(dai::PropertySet const &)*arg3);
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dai__BP, 0 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( BP_name, _wrap_BP_name, std::string() ) {
  dai::BP *arg1 = (dai::BP *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  std::string result;
  
  if (!SWIG_check_num_args("BP_name",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__BP, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BP_name" "', argument " "1"" of type '" "dai::BP const *""'"); 
  }
  arg1 = reinterpret_cast< dai::BP * >(argp1);
  result = ((dai::BP const *)arg1)->name();
  _outv = SWIG_From_std_string(static_cast< std::string >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static octave_value_list _wrap_BP_belief__SWIG_0 (const octave_value_list& args, int nargout) {
  dai::BP *arg1 = (dai::BP *) 0 ;
  dai::Var *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::Factor result;
  
  if (!SWIG_check_num_args("BP_belief",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__BP, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BP_belief" "', argument " "1"" of type '" "dai::BP const *""'"); 
  }
  arg1 = reinterpret_cast< dai::BP * >(argp1);
  res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_dai__Var,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BP_belief" "', argument " "2"" of type '" "dai::Var const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BP_belief" "', argument " "2"" of type '" "dai::Var const &""'"); 
  }
  arg2 = reinterpret_cast< dai::Var * >(argp2);
  result = ((dai::BP const *)arg1)->belief((dai::Var const &)*arg2);
  _outv = SWIG_NewPointerObj((new dai::Factor(static_cast< const dai::Factor& >(result))), SWIGTYPE_p_dai__TFactorT_double_t, SWIG_POINTER_OWN |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static octave_value_list _wrap_BP_belief__SWIG_1 (const octave_value_list& args, int nargout) {
  dai::BP *arg1 = (dai::BP *) 0 ;
  dai::VarSet *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::Factor result;
  
  if (!SWIG_check_num_args("BP_belief",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__BP, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BP_belief" "', argument " "1"" of type '" "dai::BP const *""'"); 
  }
  arg1 = reinterpret_cast< dai::BP * >(argp1);
  res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_dai__VarSet,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BP_belief" "', argument " "2"" of type '" "dai::VarSet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BP_belief" "', argument " "2"" of type '" "dai::VarSet const &""'"); 
  }
  arg2 = reinterpret_cast< dai::VarSet * >(argp2);
  result = ((dai::BP const *)arg1)->belief((dai::VarSet const &)*arg2);
  _outv = SWIG_NewPointerObj((new dai::Factor(static_cast< const dai::Factor& >(result))), SWIGTYPE_p_dai__TFactorT_double_t, SWIG_POINTER_OWN |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( BP_belief, _wrap_BP_belief, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[2]={
    octave_value_ref(args,0),octave_value_ref(args,1)
  };
  
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dai__BP, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_dai__Var, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_BP_belief__SWIG_0(args, nargout);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dai__BP, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_dai__VarSet, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_BP_belief__SWIG_1(args, nargout);
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


SWIG_DEFUN( BP_beliefV, _wrap_BP_beliefV, std::string() ) {
  dai::BP *arg1 = (dai::BP *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::Factor result;
  
  if (!SWIG_check_num_args("BP_beliefV",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__BP, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BP_beliefV" "', argument " "1"" of type '" "dai::BP const *""'"); 
  }
  arg1 = reinterpret_cast< dai::BP * >(argp1);
  ecode2 = SWIG_AsVal_size_t(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BP_beliefV" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  result = ((dai::BP const *)arg1)->beliefV(arg2);
  _outv = SWIG_NewPointerObj((new dai::Factor(static_cast< const dai::Factor& >(result))), SWIGTYPE_p_dai__TFactorT_double_t, SWIG_POINTER_OWN |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( BP_beliefF, _wrap_BP_beliefF, std::string() ) {
  dai::BP *arg1 = (dai::BP *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::Factor result;
  
  if (!SWIG_check_num_args("BP_beliefF",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__BP, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BP_beliefF" "', argument " "1"" of type '" "dai::BP const *""'"); 
  }
  arg1 = reinterpret_cast< dai::BP * >(argp1);
  ecode2 = SWIG_AsVal_size_t(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BP_beliefF" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  result = ((dai::BP const *)arg1)->beliefF(arg2);
  _outv = SWIG_NewPointerObj((new dai::Factor(static_cast< const dai::Factor& >(result))), SWIGTYPE_p_dai__TFactorT_double_t, SWIG_POINTER_OWN |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( BP_beliefs, _wrap_BP_beliefs, std::string() ) {
  dai::BP *arg1 = (dai::BP *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  std::vector< dai::Factor,std::allocator< dai::Factor > > result;
  
  if (!SWIG_check_num_args("BP_beliefs",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__BP, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BP_beliefs" "', argument " "1"" of type '" "dai::BP const *""'"); 
  }
  arg1 = reinterpret_cast< dai::BP * >(argp1);
  result = ((dai::BP const *)arg1)->beliefs();
  _outv = swig::from(static_cast< std::vector< dai::TFactor< double >,std::allocator< dai::TFactor< double > > > >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( BP_logZ, _wrap_BP_logZ, std::string() ) {
  dai::BP *arg1 = (dai::BP *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::Real result;
  
  if (!SWIG_check_num_args("BP_logZ",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__BP, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BP_logZ" "', argument " "1"" of type '" "dai::BP const *""'"); 
  }
  arg1 = reinterpret_cast< dai::BP * >(argp1);
  result = (dai::Real)((dai::BP const *)arg1)->logZ();
  _outv = SWIG_From_double(static_cast< double >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( BP_findMaximum, _wrap_BP_findMaximum, std::string() ) {
  dai::BP *arg1 = (dai::BP *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  std::vector< size_t,std::allocator< size_t > > result;
  
  if (!SWIG_check_num_args("BP_findMaximum",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__BP, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BP_findMaximum" "', argument " "1"" of type '" "dai::BP const *""'"); 
  }
  arg1 = reinterpret_cast< dai::BP * >(argp1);
  result = ((dai::BP const *)arg1)->findMaximum();
  _outv = swig::from(static_cast< std::vector< size_t,std::allocator< size_t > > >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static octave_value_list _wrap_BP_init__SWIG_0 (const octave_value_list& args, int nargout) {
  dai::BP *arg1 = (dai::BP *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("BP_init",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__BP, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BP_init" "', argument " "1"" of type '" "dai::BP *""'"); 
  }
  arg1 = reinterpret_cast< dai::BP * >(argp1);
  (arg1)->init();
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static octave_value_list _wrap_BP_init__SWIG_1 (const octave_value_list& args, int nargout) {
  dai::BP *arg1 = (dai::BP *) 0 ;
  dai::VarSet *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("BP_init",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__BP, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BP_init" "', argument " "1"" of type '" "dai::BP *""'"); 
  }
  arg1 = reinterpret_cast< dai::BP * >(argp1);
  res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_dai__VarSet,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BP_init" "', argument " "2"" of type '" "dai::VarSet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BP_init" "', argument " "2"" of type '" "dai::VarSet const &""'"); 
  }
  arg2 = reinterpret_cast< dai::VarSet * >(argp2);
  (arg1)->init((dai::VarSet const &)*arg2);
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( BP_init, _wrap_BP_init, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[2]={
    octave_value_ref(args,0),octave_value_ref(args,1)
  };
  
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dai__BP, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_BP_init__SWIG_0(args, nargout);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dai__BP, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_dai__VarSet, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_BP_init__SWIG_1(args, nargout);
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


SWIG_DEFUN( BP_run, _wrap_BP_run, std::string() ) {
  dai::BP *arg1 = (dai::BP *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::Real result;
  
  if (!SWIG_check_num_args("BP_run",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__BP, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BP_run" "', argument " "1"" of type '" "dai::BP *""'"); 
  }
  arg1 = reinterpret_cast< dai::BP * >(argp1);
  result = (dai::Real)(arg1)->run();
  _outv = SWIG_From_double(static_cast< double >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( BP_maxDiff, _wrap_BP_maxDiff, std::string() ) {
  dai::BP *arg1 = (dai::BP *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::Real result;
  
  if (!SWIG_check_num_args("BP_maxDiff",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__BP, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BP_maxDiff" "', argument " "1"" of type '" "dai::BP const *""'"); 
  }
  arg1 = reinterpret_cast< dai::BP * >(argp1);
  result = (dai::Real)((dai::BP const *)arg1)->maxDiff();
  _outv = SWIG_From_double(static_cast< double >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( BP_Iterations, _wrap_BP_Iterations, std::string() ) {
  dai::BP *arg1 = (dai::BP *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  size_t result;
  
  if (!SWIG_check_num_args("BP_Iterations",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__BP, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BP_Iterations" "', argument " "1"" of type '" "dai::BP const *""'"); 
  }
  arg1 = reinterpret_cast< dai::BP * >(argp1);
  result = ((dai::BP const *)arg1)->Iterations();
  _outv = SWIG_From_size_t(static_cast< size_t >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( BP_setMaxIter, _wrap_BP_setMaxIter, std::string() ) {
  dai::BP *arg1 = (dai::BP *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("BP_setMaxIter",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__BP, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BP_setMaxIter" "', argument " "1"" of type '" "dai::BP *""'"); 
  }
  arg1 = reinterpret_cast< dai::BP * >(argp1);
  ecode2 = SWIG_AsVal_size_t(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BP_setMaxIter" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  (arg1)->setMaxIter(arg2);
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( BP_setProperties, _wrap_BP_setProperties, std::string() ) {
  dai::BP *arg1 = (dai::BP *) 0 ;
  dai::PropertySet *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("BP_setProperties",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__BP, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BP_setProperties" "', argument " "1"" of type '" "dai::BP *""'"); 
  }
  arg1 = reinterpret_cast< dai::BP * >(argp1);
  res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_dai__PropertySet,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BP_setProperties" "', argument " "2"" of type '" "dai::PropertySet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BP_setProperties" "', argument " "2"" of type '" "dai::PropertySet const &""'"); 
  }
  arg2 = reinterpret_cast< dai::PropertySet * >(argp2);
  (arg1)->setProperties((dai::PropertySet const &)*arg2);
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( BP_getProperties, _wrap_BP_getProperties, std::string() ) {
  dai::BP *arg1 = (dai::BP *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::PropertySet result;
  
  if (!SWIG_check_num_args("BP_getProperties",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__BP, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BP_getProperties" "', argument " "1"" of type '" "dai::BP const *""'"); 
  }
  arg1 = reinterpret_cast< dai::BP * >(argp1);
  result = ((dai::BP const *)arg1)->getProperties();
  _outv = SWIG_NewPointerObj((new dai::PropertySet(static_cast< const dai::PropertySet& >(result))), SWIGTYPE_p_dai__PropertySet, SWIG_POINTER_OWN |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( BP_printProperties, _wrap_BP_printProperties, std::string() ) {
  dai::BP *arg1 = (dai::BP *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  std::string result;
  
  if (!SWIG_check_num_args("BP_printProperties",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__BP, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BP_printProperties" "', argument " "1"" of type '" "dai::BP const *""'"); 
  }
  arg1 = reinterpret_cast< dai::BP * >(argp1);
  result = ((dai::BP const *)arg1)->printProperties();
  _outv = SWIG_From_std_string(static_cast< std::string >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( BP_getSentMessages, _wrap_BP_getSentMessages, std::string() ) {
  dai::BP *arg1 = (dai::BP *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  std::vector< std::pair< size_t,size_t >,std::allocator< std::pair< size_t,size_t > > > *result = 0 ;
  
  if (!SWIG_check_num_args("BP_getSentMessages",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__BP, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BP_getSentMessages" "', argument " "1"" of type '" "dai::BP const *""'"); 
  }
  arg1 = reinterpret_cast< dai::BP * >(argp1);
  result = (std::vector< std::pair< size_t,size_t >,std::allocator< std::pair< size_t,size_t > > > *) &((dai::BP const *)arg1)->getSentMessages();
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__pairT_size_t_size_t_t_std__allocatorT_std__pairT_size_t_size_t_t_t_t, 0 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( BP_clearSentMessages, _wrap_BP_clearSentMessages, std::string() ) {
  dai::BP *arg1 = (dai::BP *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("BP_clearSentMessages",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__BP, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BP_clearSentMessages" "', argument " "1"" of type '" "dai::BP *""'"); 
  }
  arg1 = reinterpret_cast< dai::BP * >(argp1);
  (arg1)->clearSentMessages();
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( delete_BP, _wrap_delete_BP, std::string() ) {
  dai::BP *arg1 = (dai::BP *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("delete_BP",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__BP, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_BP" "', argument " "1"" of type '" "dai::BP *""'"); 
  }
  arg1 = reinterpret_cast< dai::BP * >(argp1);
  delete arg1;
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static swig_octave_member swig_BP_members[] = {
{"props",0,_wrap_BP_props_get,_wrap_BP_props_set,0,0},
{"recordSentMessages",0,_wrap_BP_recordSentMessages_get,_wrap_BP_recordSentMessages_set,0,0},
{"clone",_wrap_BP_clone,0,0,0,0},
{"construct",_wrap_BP_construct,0,0,0,0},
{"name",_wrap_BP_name,0,0,0,0},
{"belief",_wrap_BP_belief,0,0,0,0},
{"beliefV",_wrap_BP_beliefV,0,0,0,0},
{"beliefF",_wrap_BP_beliefF,0,0,0,0},
{"beliefs",_wrap_BP_beliefs,0,0,0,0},
{"logZ",_wrap_BP_logZ,0,0,0,0},
{"findMaximum",_wrap_BP_findMaximum,0,0,0,0},
{"init",_wrap_BP_init,0,0,0,0},
{"run",_wrap_BP_run,0,0,0,0},
{"maxDiff",_wrap_BP_maxDiff,0,0,0,0},
{"Iterations",_wrap_BP_Iterations,0,0,0,0},
{"setMaxIter",_wrap_BP_setMaxIter,0,0,0,0},
{"setProperties",_wrap_BP_setProperties,0,0,0,0},
{"getProperties",_wrap_BP_getProperties,0,0,0,0},
{"printProperties",_wrap_BP_printProperties,0,0,0,0},
{"getSentMessages",_wrap_BP_getSentMessages,0,0,0,0},
{"clearSentMessages",_wrap_BP_clearSentMessages,0,0,0,0},
{0,0,0,0,0,0}
};
static const char *swig_BP_base_names[] = {0};
static const swig_type_info *swig_BP_base[] = {0};
static swig_octave_class _wrap_class_BP = {"BP", &SWIGTYPE_p_dai__BP,0,_wrap_new_BP,0,_wrap_delete_BP,swig_BP_members,swig_BP_base_names,swig_BP_base };

static octave_value_list _wrap_new_FBP__SWIG_0 (const octave_value_list& args, int nargout) {
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::FBP *result = 0 ;
  
  if (!SWIG_check_num_args("new_FBP",args.length(),0,0,0)) {
    SWIG_fail;
  }
  result = (dai::FBP *)new dai::FBP();
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dai__FBP, 1 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static octave_value_list _wrap_new_FBP__SWIG_1 (const octave_value_list& args, int nargout) {
  dai::FactorGraph *arg1 = 0 ;
  dai::PropertySet *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::FBP *result = 0 ;
  
  if (!SWIG_check_num_args("new_FBP",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1, SWIGTYPE_p_dai__FactorGraph,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_FBP" "', argument " "1"" of type '" "dai::FactorGraph const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_FBP" "', argument " "1"" of type '" "dai::FactorGraph const &""'"); 
  }
  arg1 = reinterpret_cast< dai::FactorGraph * >(argp1);
  res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_dai__PropertySet,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_FBP" "', argument " "2"" of type '" "dai::PropertySet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_FBP" "', argument " "2"" of type '" "dai::PropertySet const &""'"); 
  }
  arg2 = reinterpret_cast< dai::PropertySet * >(argp2);
  result = (dai::FBP *)new dai::FBP((dai::FactorGraph const &)*arg1,(dai::PropertySet const &)*arg2);
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dai__FBP, 1 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( new_FBP, _wrap_new_FBP, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[2]={
    octave_value_ref(args,0),octave_value_ref(args,1)
  };
  
  if (argc == 0) {
    return _wrap_new_FBP__SWIG_0(args, nargout);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dai__FactorGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_dai__PropertySet, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_FBP__SWIG_1(args, nargout);
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


SWIG_DEFUN( FBP_clone, _wrap_FBP_clone, std::string() ) {
  dai::FBP *arg1 = (dai::FBP *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::FBP *result = 0 ;
  
  if (!SWIG_check_num_args("FBP_clone",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__FBP, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FBP_clone" "', argument " "1"" of type '" "dai::FBP const *""'"); 
  }
  arg1 = reinterpret_cast< dai::FBP * >(argp1);
  result = (dai::FBP *)((dai::FBP const *)arg1)->clone();
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dai__FBP, 0 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( FBP_construct, _wrap_FBP_construct, std::string() ) {
  dai::FBP *arg1 = (dai::FBP *) 0 ;
  dai::FactorGraph *arg2 = 0 ;
  dai::PropertySet *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::FBP *result = 0 ;
  
  if (!SWIG_check_num_args("FBP_construct",args.length(),3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__FBP, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FBP_construct" "', argument " "1"" of type '" "dai::FBP const *""'"); 
  }
  arg1 = reinterpret_cast< dai::FBP * >(argp1);
  res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_dai__FactorGraph,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FBP_construct" "', argument " "2"" of type '" "dai::FactorGraph const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FBP_construct" "', argument " "2"" of type '" "dai::FactorGraph const &""'"); 
  }
  arg2 = reinterpret_cast< dai::FactorGraph * >(argp2);
  res3 = SWIG_ConvertPtr(args(2), &argp3, SWIGTYPE_p_dai__PropertySet,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "FBP_construct" "', argument " "3"" of type '" "dai::PropertySet const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FBP_construct" "', argument " "3"" of type '" "dai::PropertySet const &""'"); 
  }
  arg3 = reinterpret_cast< dai::PropertySet * >(argp3);
  result = (dai::FBP *)((dai::FBP const *)arg1)->construct((dai::FactorGraph const &)*arg2,(dai::PropertySet const &)*arg3);
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dai__FBP, 0 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( FBP_name, _wrap_FBP_name, std::string() ) {
  dai::FBP *arg1 = (dai::FBP *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  std::string result;
  
  if (!SWIG_check_num_args("FBP_name",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__FBP, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FBP_name" "', argument " "1"" of type '" "dai::FBP const *""'"); 
  }
  arg1 = reinterpret_cast< dai::FBP * >(argp1);
  result = ((dai::FBP const *)arg1)->name();
  _outv = SWIG_From_std_string(static_cast< std::string >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( FBP_logZ, _wrap_FBP_logZ, std::string() ) {
  dai::FBP *arg1 = (dai::FBP *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::Real result;
  
  if (!SWIG_check_num_args("FBP_logZ",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__FBP, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FBP_logZ" "', argument " "1"" of type '" "dai::FBP const *""'"); 
  }
  arg1 = reinterpret_cast< dai::FBP * >(argp1);
  result = (dai::Real)((dai::FBP const *)arg1)->logZ();
  _outv = SWIG_From_double(static_cast< double >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( FBP_Weight, _wrap_FBP_Weight, std::string() ) {
  dai::FBP *arg1 = (dai::FBP *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::Real result;
  
  if (!SWIG_check_num_args("FBP_Weight",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__FBP, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FBP_Weight" "', argument " "1"" of type '" "dai::FBP const *""'"); 
  }
  arg1 = reinterpret_cast< dai::FBP * >(argp1);
  ecode2 = SWIG_AsVal_size_t(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FBP_Weight" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  result = (dai::Real)((dai::FBP const *)arg1)->Weight(arg2);
  _outv = SWIG_From_double(static_cast< double >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( FBP_Weights, _wrap_FBP_Weights, std::string() ) {
  dai::FBP *arg1 = (dai::FBP *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  std::vector< dai::Real,std::allocator< dai::Real > > *result = 0 ;
  
  if (!SWIG_check_num_args("FBP_Weights",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__FBP, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FBP_Weights" "', argument " "1"" of type '" "dai::FBP const *""'"); 
  }
  arg1 = reinterpret_cast< dai::FBP * >(argp1);
  result = (std::vector< dai::Real,std::allocator< dai::Real > > *) &((dai::FBP const *)arg1)->Weights();
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( FBP_setWeight, _wrap_FBP_setWeight, std::string() ) {
  dai::FBP *arg1 = (dai::FBP *) 0 ;
  size_t arg2 ;
  dai::Real arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("FBP_setWeight",args.length(),3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__FBP, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FBP_setWeight" "', argument " "1"" of type '" "dai::FBP *""'"); 
  }
  arg1 = reinterpret_cast< dai::FBP * >(argp1);
  ecode2 = SWIG_AsVal_size_t(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FBP_setWeight" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  ecode3 = SWIG_AsVal_double(args(2), &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "FBP_setWeight" "', argument " "3"" of type '" "dai::Real""'");
  } 
  arg3 = static_cast< dai::Real >(val3);
  (arg1)->setWeight(arg2,arg3);
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( FBP_setWeights, _wrap_FBP_setWeights, std::string() ) {
  dai::FBP *arg1 = (dai::FBP *) 0 ;
  std::vector< dai::Real,std::allocator< dai::Real > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("FBP_setWeights",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__FBP, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FBP_setWeights" "', argument " "1"" of type '" "dai::FBP *""'"); 
  }
  arg1 = reinterpret_cast< dai::FBP * >(argp1);
  res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FBP_setWeights" "', argument " "2"" of type '" "std::vector< dai::Real,std::allocator< dai::Real > > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FBP_setWeights" "', argument " "2"" of type '" "std::vector< dai::Real,std::allocator< dai::Real > > const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< dai::Real,std::allocator< dai::Real > > * >(argp2);
  (arg1)->setWeights((std::vector< dai::Real,std::allocator< dai::Real > > const &)*arg2);
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( delete_FBP, _wrap_delete_FBP, std::string() ) {
  dai::FBP *arg1 = (dai::FBP *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("delete_FBP",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__FBP, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_FBP" "', argument " "1"" of type '" "dai::FBP *""'"); 
  }
  arg1 = reinterpret_cast< dai::FBP * >(argp1);
  delete arg1;
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static swig_octave_member swig_FBP_members[] = {
{"clone",_wrap_FBP_clone,0,0,0,0},
{"construct",_wrap_FBP_construct,0,0,0,0},
{"name",_wrap_FBP_name,0,0,0,0},
{"logZ",_wrap_FBP_logZ,0,0,0,0},
{"Weight",_wrap_FBP_Weight,0,0,0,0},
{"Weights",_wrap_FBP_Weights,0,0,0,0},
{"setWeight",_wrap_FBP_setWeight,0,0,0,0},
{"setWeights",_wrap_FBP_setWeights,0,0,0,0},
{0,0,0,0,0,0}
};
static const char *swig_FBP_base_names[] = {"_p_dai__BP",0};
static const swig_type_info *swig_FBP_base[] = {0,0};
static swig_octave_class _wrap_class_FBP = {"FBP", &SWIGTYPE_p_dai__FBP,0,_wrap_new_FBP,0,_wrap_delete_FBP,swig_FBP_members,swig_FBP_base_names,swig_FBP_base };

SWIG_DEFUN( TRWBP_nrtrees_set, _wrap_TRWBP_nrtrees_set, std::string() ) {
  dai::TRWBP *arg1 = (dai::TRWBP *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("TRWBP_nrtrees_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__TRWBP, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TRWBP_nrtrees_set" "', argument " "1"" of type '" "dai::TRWBP *""'"); 
  }
  arg1 = reinterpret_cast< dai::TRWBP * >(argp1);
  ecode2 = SWIG_AsVal_size_t(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TRWBP_nrtrees_set" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  if (arg1) (arg1)->nrtrees = arg2;
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( TRWBP_nrtrees_get, _wrap_TRWBP_nrtrees_get, std::string() ) {
  dai::TRWBP *arg1 = (dai::TRWBP *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  size_t result;
  
  if (!SWIG_check_num_args("TRWBP_nrtrees_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__TRWBP, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TRWBP_nrtrees_get" "', argument " "1"" of type '" "dai::TRWBP *""'"); 
  }
  arg1 = reinterpret_cast< dai::TRWBP * >(argp1);
  result =  ((arg1)->nrtrees);
  _outv = SWIG_From_size_t(static_cast< size_t >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static octave_value_list _wrap_new_TRWBP__SWIG_0 (const octave_value_list& args, int nargout) {
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::TRWBP *result = 0 ;
  
  if (!SWIG_check_num_args("new_TRWBP",args.length(),0,0,0)) {
    SWIG_fail;
  }
  result = (dai::TRWBP *)new dai::TRWBP();
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dai__TRWBP, 1 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static octave_value_list _wrap_new_TRWBP__SWIG_1 (const octave_value_list& args, int nargout) {
  dai::FactorGraph *arg1 = 0 ;
  dai::PropertySet *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::TRWBP *result = 0 ;
  
  if (!SWIG_check_num_args("new_TRWBP",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1, SWIGTYPE_p_dai__FactorGraph,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_TRWBP" "', argument " "1"" of type '" "dai::FactorGraph const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_TRWBP" "', argument " "1"" of type '" "dai::FactorGraph const &""'"); 
  }
  arg1 = reinterpret_cast< dai::FactorGraph * >(argp1);
  res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_dai__PropertySet,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_TRWBP" "', argument " "2"" of type '" "dai::PropertySet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_TRWBP" "', argument " "2"" of type '" "dai::PropertySet const &""'"); 
  }
  arg2 = reinterpret_cast< dai::PropertySet * >(argp2);
  result = (dai::TRWBP *)new dai::TRWBP((dai::FactorGraph const &)*arg1,(dai::PropertySet const &)*arg2);
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dai__TRWBP, 1 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( new_TRWBP, _wrap_new_TRWBP, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[2]={
    octave_value_ref(args,0),octave_value_ref(args,1)
  };
  
  if (argc == 0) {
    return _wrap_new_TRWBP__SWIG_0(args, nargout);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dai__FactorGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_dai__PropertySet, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_TRWBP__SWIG_1(args, nargout);
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


SWIG_DEFUN( TRWBP_clone, _wrap_TRWBP_clone, std::string() ) {
  dai::TRWBP *arg1 = (dai::TRWBP *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::TRWBP *result = 0 ;
  
  if (!SWIG_check_num_args("TRWBP_clone",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__TRWBP, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TRWBP_clone" "', argument " "1"" of type '" "dai::TRWBP const *""'"); 
  }
  arg1 = reinterpret_cast< dai::TRWBP * >(argp1);
  result = (dai::TRWBP *)((dai::TRWBP const *)arg1)->clone();
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dai__TRWBP, 0 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( TRWBP_construct, _wrap_TRWBP_construct, std::string() ) {
  dai::TRWBP *arg1 = (dai::TRWBP *) 0 ;
  dai::FactorGraph *arg2 = 0 ;
  dai::PropertySet *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::TRWBP *result = 0 ;
  
  if (!SWIG_check_num_args("TRWBP_construct",args.length(),3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__TRWBP, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TRWBP_construct" "', argument " "1"" of type '" "dai::TRWBP const *""'"); 
  }
  arg1 = reinterpret_cast< dai::TRWBP * >(argp1);
  res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_dai__FactorGraph,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TRWBP_construct" "', argument " "2"" of type '" "dai::FactorGraph const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TRWBP_construct" "', argument " "2"" of type '" "dai::FactorGraph const &""'"); 
  }
  arg2 = reinterpret_cast< dai::FactorGraph * >(argp2);
  res3 = SWIG_ConvertPtr(args(2), &argp3, SWIGTYPE_p_dai__PropertySet,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TRWBP_construct" "', argument " "3"" of type '" "dai::PropertySet const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TRWBP_construct" "', argument " "3"" of type '" "dai::PropertySet const &""'"); 
  }
  arg3 = reinterpret_cast< dai::PropertySet * >(argp3);
  result = (dai::TRWBP *)((dai::TRWBP const *)arg1)->construct((dai::FactorGraph const &)*arg2,(dai::PropertySet const &)*arg3);
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dai__TRWBP, 0 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( TRWBP_name, _wrap_TRWBP_name, std::string() ) {
  dai::TRWBP *arg1 = (dai::TRWBP *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  std::string result;
  
  if (!SWIG_check_num_args("TRWBP_name",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__TRWBP, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TRWBP_name" "', argument " "1"" of type '" "dai::TRWBP const *""'"); 
  }
  arg1 = reinterpret_cast< dai::TRWBP * >(argp1);
  result = ((dai::TRWBP const *)arg1)->name();
  _outv = SWIG_From_std_string(static_cast< std::string >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( TRWBP_logZ, _wrap_TRWBP_logZ, std::string() ) {
  dai::TRWBP *arg1 = (dai::TRWBP *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::Real result;
  
  if (!SWIG_check_num_args("TRWBP_logZ",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__TRWBP, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TRWBP_logZ" "', argument " "1"" of type '" "dai::TRWBP const *""'"); 
  }
  arg1 = reinterpret_cast< dai::TRWBP * >(argp1);
  result = (dai::Real)((dai::TRWBP const *)arg1)->logZ();
  _outv = SWIG_From_double(static_cast< double >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( TRWBP_setProperties, _wrap_TRWBP_setProperties, std::string() ) {
  dai::TRWBP *arg1 = (dai::TRWBP *) 0 ;
  dai::PropertySet *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("TRWBP_setProperties",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__TRWBP, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TRWBP_setProperties" "', argument " "1"" of type '" "dai::TRWBP *""'"); 
  }
  arg1 = reinterpret_cast< dai::TRWBP * >(argp1);
  res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_dai__PropertySet,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TRWBP_setProperties" "', argument " "2"" of type '" "dai::PropertySet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TRWBP_setProperties" "', argument " "2"" of type '" "dai::PropertySet const &""'"); 
  }
  arg2 = reinterpret_cast< dai::PropertySet * >(argp2);
  (arg1)->setProperties((dai::PropertySet const &)*arg2);
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( TRWBP_getProperties, _wrap_TRWBP_getProperties, std::string() ) {
  dai::TRWBP *arg1 = (dai::TRWBP *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::PropertySet result;
  
  if (!SWIG_check_num_args("TRWBP_getProperties",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__TRWBP, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TRWBP_getProperties" "', argument " "1"" of type '" "dai::TRWBP const *""'"); 
  }
  arg1 = reinterpret_cast< dai::TRWBP * >(argp1);
  result = ((dai::TRWBP const *)arg1)->getProperties();
  _outv = SWIG_NewPointerObj((new dai::PropertySet(static_cast< const dai::PropertySet& >(result))), SWIGTYPE_p_dai__PropertySet, SWIG_POINTER_OWN |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( TRWBP_printProperties, _wrap_TRWBP_printProperties, std::string() ) {
  dai::TRWBP *arg1 = (dai::TRWBP *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  std::string result;
  
  if (!SWIG_check_num_args("TRWBP_printProperties",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__TRWBP, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TRWBP_printProperties" "', argument " "1"" of type '" "dai::TRWBP const *""'"); 
  }
  arg1 = reinterpret_cast< dai::TRWBP * >(argp1);
  result = ((dai::TRWBP const *)arg1)->printProperties();
  _outv = SWIG_From_std_string(static_cast< std::string >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( TRWBP_Weight, _wrap_TRWBP_Weight, std::string() ) {
  dai::TRWBP *arg1 = (dai::TRWBP *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::Real result;
  
  if (!SWIG_check_num_args("TRWBP_Weight",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__TRWBP, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TRWBP_Weight" "', argument " "1"" of type '" "dai::TRWBP const *""'"); 
  }
  arg1 = reinterpret_cast< dai::TRWBP * >(argp1);
  ecode2 = SWIG_AsVal_size_t(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TRWBP_Weight" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  result = (dai::Real)((dai::TRWBP const *)arg1)->Weight(arg2);
  _outv = SWIG_From_double(static_cast< double >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( TRWBP_Weights, _wrap_TRWBP_Weights, std::string() ) {
  dai::TRWBP *arg1 = (dai::TRWBP *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  std::vector< dai::Real,std::allocator< dai::Real > > *result = 0 ;
  
  if (!SWIG_check_num_args("TRWBP_Weights",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__TRWBP, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TRWBP_Weights" "', argument " "1"" of type '" "dai::TRWBP const *""'"); 
  }
  arg1 = reinterpret_cast< dai::TRWBP * >(argp1);
  result = (std::vector< dai::Real,std::allocator< dai::Real > > *) &((dai::TRWBP const *)arg1)->Weights();
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( TRWBP_setWeight, _wrap_TRWBP_setWeight, std::string() ) {
  dai::TRWBP *arg1 = (dai::TRWBP *) 0 ;
  size_t arg2 ;
  dai::Real arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("TRWBP_setWeight",args.length(),3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__TRWBP, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TRWBP_setWeight" "', argument " "1"" of type '" "dai::TRWBP *""'"); 
  }
  arg1 = reinterpret_cast< dai::TRWBP * >(argp1);
  ecode2 = SWIG_AsVal_size_t(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TRWBP_setWeight" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  ecode3 = SWIG_AsVal_double(args(2), &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "TRWBP_setWeight" "', argument " "3"" of type '" "dai::Real""'");
  } 
  arg3 = static_cast< dai::Real >(val3);
  (arg1)->setWeight(arg2,arg3);
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( TRWBP_setWeights, _wrap_TRWBP_setWeights, std::string() ) {
  dai::TRWBP *arg1 = (dai::TRWBP *) 0 ;
  std::vector< dai::Real,std::allocator< dai::Real > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("TRWBP_setWeights",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__TRWBP, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TRWBP_setWeights" "', argument " "1"" of type '" "dai::TRWBP *""'"); 
  }
  arg1 = reinterpret_cast< dai::TRWBP * >(argp1);
  res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TRWBP_setWeights" "', argument " "2"" of type '" "std::vector< dai::Real,std::allocator< dai::Real > > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TRWBP_setWeights" "', argument " "2"" of type '" "std::vector< dai::Real,std::allocator< dai::Real > > const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< dai::Real,std::allocator< dai::Real > > * >(argp2);
  (arg1)->setWeights((std::vector< dai::Real,std::allocator< dai::Real > > const &)*arg2);
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( TRWBP_addTreeToWeights, _wrap_TRWBP_addTreeToWeights, std::string() ) {
  dai::TRWBP *arg1 = (dai::TRWBP *) 0 ;
  RootedTree *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("TRWBP_addTreeToWeights",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__TRWBP, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TRWBP_addTreeToWeights" "', argument " "1"" of type '" "dai::TRWBP *""'"); 
  }
  arg1 = reinterpret_cast< dai::TRWBP * >(argp1);
  res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_RootedTree,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TRWBP_addTreeToWeights" "', argument " "2"" of type '" "RootedTree const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TRWBP_addTreeToWeights" "', argument " "2"" of type '" "RootedTree const &""'"); 
  }
  arg2 = reinterpret_cast< RootedTree * >(argp2);
  (arg1)->addTreeToWeights((RootedTree const &)*arg2);
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( TRWBP_sampleWeights, _wrap_TRWBP_sampleWeights, std::string() ) {
  dai::TRWBP *arg1 = (dai::TRWBP *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("TRWBP_sampleWeights",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__TRWBP, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TRWBP_sampleWeights" "', argument " "1"" of type '" "dai::TRWBP *""'"); 
  }
  arg1 = reinterpret_cast< dai::TRWBP * >(argp1);
  ecode2 = SWIG_AsVal_size_t(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TRWBP_sampleWeights" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  (arg1)->sampleWeights(arg2);
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( delete_TRWBP, _wrap_delete_TRWBP, std::string() ) {
  dai::TRWBP *arg1 = (dai::TRWBP *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("delete_TRWBP",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__TRWBP, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_TRWBP" "', argument " "1"" of type '" "dai::TRWBP *""'"); 
  }
  arg1 = reinterpret_cast< dai::TRWBP * >(argp1);
  delete arg1;
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static swig_octave_member swig_TRWBP_members[] = {
{"nrtrees",0,_wrap_TRWBP_nrtrees_get,_wrap_TRWBP_nrtrees_set,0,0},
{"clone",_wrap_TRWBP_clone,0,0,0,0},
{"construct",_wrap_TRWBP_construct,0,0,0,0},
{"name",_wrap_TRWBP_name,0,0,0,0},
{"logZ",_wrap_TRWBP_logZ,0,0,0,0},
{"setProperties",_wrap_TRWBP_setProperties,0,0,0,0},
{"getProperties",_wrap_TRWBP_getProperties,0,0,0,0},
{"printProperties",_wrap_TRWBP_printProperties,0,0,0,0},
{"Weight",_wrap_TRWBP_Weight,0,0,0,0},
{"Weights",_wrap_TRWBP_Weights,0,0,0,0},
{"setWeight",_wrap_TRWBP_setWeight,0,0,0,0},
{"setWeights",_wrap_TRWBP_setWeights,0,0,0,0},
{"addTreeToWeights",_wrap_TRWBP_addTreeToWeights,0,0,0,0},
{"sampleWeights",_wrap_TRWBP_sampleWeights,0,0,0,0},
{0,0,0,0,0,0}
};
static const char *swig_TRWBP_base_names[] = {"_p_dai__BP",0};
static const swig_type_info *swig_TRWBP_base[] = {0,0};
static swig_octave_class _wrap_class_TRWBP = {"TRWBP", &SWIGTYPE_p_dai__TRWBP,0,_wrap_new_TRWBP,0,_wrap_delete_TRWBP,swig_TRWBP_members,swig_TRWBP_base_names,swig_TRWBP_base };

SWIG_DEFUN( MF_props_set, _wrap_MF_props_set, std::string() ) {
  dai::MF *arg1 = (dai::MF *) 0 ;
  dai::MF::Properties *arg2 = (dai::MF::Properties *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MF_props_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__MF, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MF_props_set" "', argument " "1"" of type '" "dai::MF *""'"); 
  }
  arg1 = reinterpret_cast< dai::MF * >(argp1);
  res2 = SWIG_ConvertPtr(args(1), &argp2,SWIGTYPE_p_dai__MF__Properties, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MF_props_set" "', argument " "2"" of type '" "dai::MF::Properties *""'"); 
  }
  arg2 = reinterpret_cast< dai::MF::Properties * >(argp2);
  if (arg1) (arg1)->props = *arg2;
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( MF_props_get, _wrap_MF_props_get, std::string() ) {
  dai::MF *arg1 = (dai::MF *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::MF::Properties *result = 0 ;
  
  if (!SWIG_check_num_args("MF_props_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__MF, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MF_props_get" "', argument " "1"" of type '" "dai::MF *""'"); 
  }
  arg1 = reinterpret_cast< dai::MF * >(argp1);
  result = (dai::MF::Properties *)& ((arg1)->props);
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dai__MF__Properties, 0 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static octave_value_list _wrap_new_MF__SWIG_0 (const octave_value_list& args, int nargout) {
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::MF *result = 0 ;
  
  if (!SWIG_check_num_args("new_MF",args.length(),0,0,0)) {
    SWIG_fail;
  }
  result = (dai::MF *)new dai::MF();
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dai__MF, 1 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static octave_value_list _wrap_new_MF__SWIG_1 (const octave_value_list& args, int nargout) {
  dai::FactorGraph *arg1 = 0 ;
  dai::PropertySet *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::MF *result = 0 ;
  
  if (!SWIG_check_num_args("new_MF",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1, SWIGTYPE_p_dai__FactorGraph,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_MF" "', argument " "1"" of type '" "dai::FactorGraph const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_MF" "', argument " "1"" of type '" "dai::FactorGraph const &""'"); 
  }
  arg1 = reinterpret_cast< dai::FactorGraph * >(argp1);
  res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_dai__PropertySet,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_MF" "', argument " "2"" of type '" "dai::PropertySet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_MF" "', argument " "2"" of type '" "dai::PropertySet const &""'"); 
  }
  arg2 = reinterpret_cast< dai::PropertySet * >(argp2);
  result = (dai::MF *)new dai::MF((dai::FactorGraph const &)*arg1,(dai::PropertySet const &)*arg2);
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dai__MF, 1 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( new_MF, _wrap_new_MF, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[2]={
    octave_value_ref(args,0),octave_value_ref(args,1)
  };
  
  if (argc == 0) {
    return _wrap_new_MF__SWIG_0(args, nargout);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dai__FactorGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_dai__PropertySet, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_MF__SWIG_1(args, nargout);
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


SWIG_DEFUN( MF_clone, _wrap_MF_clone, std::string() ) {
  dai::MF *arg1 = (dai::MF *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::MF *result = 0 ;
  
  if (!SWIG_check_num_args("MF_clone",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__MF, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MF_clone" "', argument " "1"" of type '" "dai::MF const *""'"); 
  }
  arg1 = reinterpret_cast< dai::MF * >(argp1);
  result = (dai::MF *)((dai::MF const *)arg1)->clone();
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dai__MF, 0 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( MF_construct, _wrap_MF_construct, std::string() ) {
  dai::MF *arg1 = (dai::MF *) 0 ;
  dai::FactorGraph *arg2 = 0 ;
  dai::PropertySet *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::MF *result = 0 ;
  
  if (!SWIG_check_num_args("MF_construct",args.length(),3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__MF, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MF_construct" "', argument " "1"" of type '" "dai::MF const *""'"); 
  }
  arg1 = reinterpret_cast< dai::MF * >(argp1);
  res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_dai__FactorGraph,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MF_construct" "', argument " "2"" of type '" "dai::FactorGraph const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MF_construct" "', argument " "2"" of type '" "dai::FactorGraph const &""'"); 
  }
  arg2 = reinterpret_cast< dai::FactorGraph * >(argp2);
  res3 = SWIG_ConvertPtr(args(2), &argp3, SWIGTYPE_p_dai__PropertySet,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "MF_construct" "', argument " "3"" of type '" "dai::PropertySet const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MF_construct" "', argument " "3"" of type '" "dai::PropertySet const &""'"); 
  }
  arg3 = reinterpret_cast< dai::PropertySet * >(argp3);
  result = (dai::MF *)((dai::MF const *)arg1)->construct((dai::FactorGraph const &)*arg2,(dai::PropertySet const &)*arg3);
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dai__MF, 0 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( MF_name, _wrap_MF_name, std::string() ) {
  dai::MF *arg1 = (dai::MF *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  std::string result;
  
  if (!SWIG_check_num_args("MF_name",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__MF, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MF_name" "', argument " "1"" of type '" "dai::MF const *""'"); 
  }
  arg1 = reinterpret_cast< dai::MF * >(argp1);
  result = ((dai::MF const *)arg1)->name();
  _outv = SWIG_From_std_string(static_cast< std::string >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static octave_value_list _wrap_MF_belief__SWIG_0 (const octave_value_list& args, int nargout) {
  dai::MF *arg1 = (dai::MF *) 0 ;
  dai::Var *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::Factor result;
  
  if (!SWIG_check_num_args("MF_belief",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__MF, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MF_belief" "', argument " "1"" of type '" "dai::MF const *""'"); 
  }
  arg1 = reinterpret_cast< dai::MF * >(argp1);
  res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_dai__Var,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MF_belief" "', argument " "2"" of type '" "dai::Var const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MF_belief" "', argument " "2"" of type '" "dai::Var const &""'"); 
  }
  arg2 = reinterpret_cast< dai::Var * >(argp2);
  result = ((dai::MF const *)arg1)->belief((dai::Var const &)*arg2);
  _outv = SWIG_NewPointerObj((new dai::Factor(static_cast< const dai::Factor& >(result))), SWIGTYPE_p_dai__TFactorT_double_t, SWIG_POINTER_OWN |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static octave_value_list _wrap_MF_belief__SWIG_1 (const octave_value_list& args, int nargout) {
  dai::MF *arg1 = (dai::MF *) 0 ;
  dai::VarSet *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::Factor result;
  
  if (!SWIG_check_num_args("MF_belief",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__MF, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MF_belief" "', argument " "1"" of type '" "dai::MF const *""'"); 
  }
  arg1 = reinterpret_cast< dai::MF * >(argp1);
  res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_dai__VarSet,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MF_belief" "', argument " "2"" of type '" "dai::VarSet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MF_belief" "', argument " "2"" of type '" "dai::VarSet const &""'"); 
  }
  arg2 = reinterpret_cast< dai::VarSet * >(argp2);
  result = ((dai::MF const *)arg1)->belief((dai::VarSet const &)*arg2);
  _outv = SWIG_NewPointerObj((new dai::Factor(static_cast< const dai::Factor& >(result))), SWIGTYPE_p_dai__TFactorT_double_t, SWIG_POINTER_OWN |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( MF_belief, _wrap_MF_belief, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[2]={
    octave_value_ref(args,0),octave_value_ref(args,1)
  };
  
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dai__MF, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_dai__Var, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_MF_belief__SWIG_0(args, nargout);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dai__MF, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_dai__VarSet, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_MF_belief__SWIG_1(args, nargout);
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


SWIG_DEFUN( MF_beliefV, _wrap_MF_beliefV, std::string() ) {
  dai::MF *arg1 = (dai::MF *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::Factor result;
  
  if (!SWIG_check_num_args("MF_beliefV",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__MF, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MF_beliefV" "', argument " "1"" of type '" "dai::MF const *""'"); 
  }
  arg1 = reinterpret_cast< dai::MF * >(argp1);
  ecode2 = SWIG_AsVal_size_t(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MF_beliefV" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  result = ((dai::MF const *)arg1)->beliefV(arg2);
  _outv = SWIG_NewPointerObj((new dai::Factor(static_cast< const dai::Factor& >(result))), SWIGTYPE_p_dai__TFactorT_double_t, SWIG_POINTER_OWN |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( MF_beliefs, _wrap_MF_beliefs, std::string() ) {
  dai::MF *arg1 = (dai::MF *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  std::vector< dai::Factor,std::allocator< dai::Factor > > result;
  
  if (!SWIG_check_num_args("MF_beliefs",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__MF, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MF_beliefs" "', argument " "1"" of type '" "dai::MF const *""'"); 
  }
  arg1 = reinterpret_cast< dai::MF * >(argp1);
  result = ((dai::MF const *)arg1)->beliefs();
  _outv = swig::from(static_cast< std::vector< dai::TFactor< double >,std::allocator< dai::TFactor< double > > > >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( MF_logZ, _wrap_MF_logZ, std::string() ) {
  dai::MF *arg1 = (dai::MF *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::Real result;
  
  if (!SWIG_check_num_args("MF_logZ",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__MF, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MF_logZ" "', argument " "1"" of type '" "dai::MF const *""'"); 
  }
  arg1 = reinterpret_cast< dai::MF * >(argp1);
  result = (dai::Real)((dai::MF const *)arg1)->logZ();
  _outv = SWIG_From_double(static_cast< double >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static octave_value_list _wrap_MF_init__SWIG_0 (const octave_value_list& args, int nargout) {
  dai::MF *arg1 = (dai::MF *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MF_init",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__MF, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MF_init" "', argument " "1"" of type '" "dai::MF *""'"); 
  }
  arg1 = reinterpret_cast< dai::MF * >(argp1);
  (arg1)->init();
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static octave_value_list _wrap_MF_init__SWIG_1 (const octave_value_list& args, int nargout) {
  dai::MF *arg1 = (dai::MF *) 0 ;
  dai::VarSet *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MF_init",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__MF, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MF_init" "', argument " "1"" of type '" "dai::MF *""'"); 
  }
  arg1 = reinterpret_cast< dai::MF * >(argp1);
  res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_dai__VarSet,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MF_init" "', argument " "2"" of type '" "dai::VarSet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MF_init" "', argument " "2"" of type '" "dai::VarSet const &""'"); 
  }
  arg2 = reinterpret_cast< dai::VarSet * >(argp2);
  (arg1)->init((dai::VarSet const &)*arg2);
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( MF_init, _wrap_MF_init, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[2]={
    octave_value_ref(args,0),octave_value_ref(args,1)
  };
  
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dai__MF, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_MF_init__SWIG_0(args, nargout);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dai__MF, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_dai__VarSet, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_MF_init__SWIG_1(args, nargout);
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


SWIG_DEFUN( MF_run, _wrap_MF_run, std::string() ) {
  dai::MF *arg1 = (dai::MF *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::Real result;
  
  if (!SWIG_check_num_args("MF_run",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__MF, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MF_run" "', argument " "1"" of type '" "dai::MF *""'"); 
  }
  arg1 = reinterpret_cast< dai::MF * >(argp1);
  result = (dai::Real)(arg1)->run();
  _outv = SWIG_From_double(static_cast< double >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( MF_maxDiff, _wrap_MF_maxDiff, std::string() ) {
  dai::MF *arg1 = (dai::MF *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::Real result;
  
  if (!SWIG_check_num_args("MF_maxDiff",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__MF, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MF_maxDiff" "', argument " "1"" of type '" "dai::MF const *""'"); 
  }
  arg1 = reinterpret_cast< dai::MF * >(argp1);
  result = (dai::Real)((dai::MF const *)arg1)->maxDiff();
  _outv = SWIG_From_double(static_cast< double >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( MF_Iterations, _wrap_MF_Iterations, std::string() ) {
  dai::MF *arg1 = (dai::MF *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  size_t result;
  
  if (!SWIG_check_num_args("MF_Iterations",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__MF, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MF_Iterations" "', argument " "1"" of type '" "dai::MF const *""'"); 
  }
  arg1 = reinterpret_cast< dai::MF * >(argp1);
  result = ((dai::MF const *)arg1)->Iterations();
  _outv = SWIG_From_size_t(static_cast< size_t >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( MF_setMaxIter, _wrap_MF_setMaxIter, std::string() ) {
  dai::MF *arg1 = (dai::MF *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MF_setMaxIter",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__MF, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MF_setMaxIter" "', argument " "1"" of type '" "dai::MF *""'"); 
  }
  arg1 = reinterpret_cast< dai::MF * >(argp1);
  ecode2 = SWIG_AsVal_size_t(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MF_setMaxIter" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  (arg1)->setMaxIter(arg2);
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( MF_setProperties, _wrap_MF_setProperties, std::string() ) {
  dai::MF *arg1 = (dai::MF *) 0 ;
  dai::PropertySet *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MF_setProperties",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__MF, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MF_setProperties" "', argument " "1"" of type '" "dai::MF *""'"); 
  }
  arg1 = reinterpret_cast< dai::MF * >(argp1);
  res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_dai__PropertySet,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MF_setProperties" "', argument " "2"" of type '" "dai::PropertySet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MF_setProperties" "', argument " "2"" of type '" "dai::PropertySet const &""'"); 
  }
  arg2 = reinterpret_cast< dai::PropertySet * >(argp2);
  (arg1)->setProperties((dai::PropertySet const &)*arg2);
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( MF_getProperties, _wrap_MF_getProperties, std::string() ) {
  dai::MF *arg1 = (dai::MF *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::PropertySet result;
  
  if (!SWIG_check_num_args("MF_getProperties",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__MF, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MF_getProperties" "', argument " "1"" of type '" "dai::MF const *""'"); 
  }
  arg1 = reinterpret_cast< dai::MF * >(argp1);
  result = ((dai::MF const *)arg1)->getProperties();
  _outv = SWIG_NewPointerObj((new dai::PropertySet(static_cast< const dai::PropertySet& >(result))), SWIGTYPE_p_dai__PropertySet, SWIG_POINTER_OWN |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( MF_printProperties, _wrap_MF_printProperties, std::string() ) {
  dai::MF *arg1 = (dai::MF *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  std::string result;
  
  if (!SWIG_check_num_args("MF_printProperties",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__MF, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MF_printProperties" "', argument " "1"" of type '" "dai::MF const *""'"); 
  }
  arg1 = reinterpret_cast< dai::MF * >(argp1);
  result = ((dai::MF const *)arg1)->printProperties();
  _outv = SWIG_From_std_string(static_cast< std::string >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( delete_MF, _wrap_delete_MF, std::string() ) {
  dai::MF *arg1 = (dai::MF *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("delete_MF",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__MF, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_MF" "', argument " "1"" of type '" "dai::MF *""'"); 
  }
  arg1 = reinterpret_cast< dai::MF * >(argp1);
  delete arg1;
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static swig_octave_member swig_MF_members[] = {
{"props",0,_wrap_MF_props_get,_wrap_MF_props_set,0,0},
{"clone",_wrap_MF_clone,0,0,0,0},
{"construct",_wrap_MF_construct,0,0,0,0},
{"name",_wrap_MF_name,0,0,0,0},
{"belief",_wrap_MF_belief,0,0,0,0},
{"beliefV",_wrap_MF_beliefV,0,0,0,0},
{"beliefs",_wrap_MF_beliefs,0,0,0,0},
{"logZ",_wrap_MF_logZ,0,0,0,0},
{"init",_wrap_MF_init,0,0,0,0},
{"run",_wrap_MF_run,0,0,0,0},
{"maxDiff",_wrap_MF_maxDiff,0,0,0,0},
{"Iterations",_wrap_MF_Iterations,0,0,0,0},
{"setMaxIter",_wrap_MF_setMaxIter,0,0,0,0},
{"setProperties",_wrap_MF_setProperties,0,0,0,0},
{"getProperties",_wrap_MF_getProperties,0,0,0,0},
{"printProperties",_wrap_MF_printProperties,0,0,0,0},
{0,0,0,0,0,0}
};
static const char *swig_MF_base_names[] = {0};
static const swig_type_info *swig_MF_base[] = {0};
static swig_octave_class _wrap_class_MF = {"MF", &SWIGTYPE_p_dai__MF,0,_wrap_new_MF,0,_wrap_delete_MF,swig_MF_members,swig_MF_base_names,swig_MF_base };

SWIG_DEFUN( HAK_props_set, _wrap_HAK_props_set, std::string() ) {
  dai::HAK *arg1 = (dai::HAK *) 0 ;
  dai::HAK::Properties *arg2 = (dai::HAK::Properties *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("HAK_props_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__HAK, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HAK_props_set" "', argument " "1"" of type '" "dai::HAK *""'"); 
  }
  arg1 = reinterpret_cast< dai::HAK * >(argp1);
  res2 = SWIG_ConvertPtr(args(1), &argp2,SWIGTYPE_p_dai__HAK__Properties, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HAK_props_set" "', argument " "2"" of type '" "dai::HAK::Properties *""'"); 
  }
  arg2 = reinterpret_cast< dai::HAK::Properties * >(argp2);
  if (arg1) (arg1)->props = *arg2;
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( HAK_props_get, _wrap_HAK_props_get, std::string() ) {
  dai::HAK *arg1 = (dai::HAK *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::HAK::Properties *result = 0 ;
  
  if (!SWIG_check_num_args("HAK_props_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__HAK, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HAK_props_get" "', argument " "1"" of type '" "dai::HAK *""'"); 
  }
  arg1 = reinterpret_cast< dai::HAK * >(argp1);
  result = (dai::HAK::Properties *)& ((arg1)->props);
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dai__HAK__Properties, 0 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static octave_value_list _wrap_new_HAK__SWIG_0 (const octave_value_list& args, int nargout) {
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::HAK *result = 0 ;
  
  if (!SWIG_check_num_args("new_HAK",args.length(),0,0,0)) {
    SWIG_fail;
  }
  result = (dai::HAK *)new dai::HAK();
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dai__HAK, 1 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static octave_value_list _wrap_new_HAK__SWIG_1 (const octave_value_list& args, int nargout) {
  dai::FactorGraph *arg1 = 0 ;
  dai::PropertySet *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::HAK *result = 0 ;
  
  if (!SWIG_check_num_args("new_HAK",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1, SWIGTYPE_p_dai__FactorGraph,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_HAK" "', argument " "1"" of type '" "dai::FactorGraph const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_HAK" "', argument " "1"" of type '" "dai::FactorGraph const &""'"); 
  }
  arg1 = reinterpret_cast< dai::FactorGraph * >(argp1);
  res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_dai__PropertySet,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_HAK" "', argument " "2"" of type '" "dai::PropertySet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_HAK" "', argument " "2"" of type '" "dai::PropertySet const &""'"); 
  }
  arg2 = reinterpret_cast< dai::PropertySet * >(argp2);
  result = (dai::HAK *)new dai::HAK((dai::FactorGraph const &)*arg1,(dai::PropertySet const &)*arg2);
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dai__HAK, 1 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static octave_value_list _wrap_new_HAK__SWIG_2 (const octave_value_list& args, int nargout) {
  dai::RegionGraph *arg1 = 0 ;
  dai::PropertySet *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::HAK *result = 0 ;
  
  if (!SWIG_check_num_args("new_HAK",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1, SWIGTYPE_p_dai__RegionGraph,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_HAK" "', argument " "1"" of type '" "dai::RegionGraph const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_HAK" "', argument " "1"" of type '" "dai::RegionGraph const &""'"); 
  }
  arg1 = reinterpret_cast< dai::RegionGraph * >(argp1);
  res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_dai__PropertySet,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_HAK" "', argument " "2"" of type '" "dai::PropertySet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_HAK" "', argument " "2"" of type '" "dai::PropertySet const &""'"); 
  }
  arg2 = reinterpret_cast< dai::PropertySet * >(argp2);
  result = (dai::HAK *)new dai::HAK((dai::RegionGraph const &)*arg1,(dai::PropertySet const &)*arg2);
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dai__HAK, 1 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( new_HAK, _wrap_new_HAK, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[2]={
    octave_value_ref(args,0),octave_value_ref(args,1)
  };
  
  if (argc == 0) {
    return _wrap_new_HAK__SWIG_0(args, nargout);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dai__RegionGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_dai__PropertySet, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_HAK__SWIG_2(args, nargout);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dai__FactorGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_dai__PropertySet, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_HAK__SWIG_1(args, nargout);
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


SWIG_DEFUN( HAK_clone, _wrap_HAK_clone, std::string() ) {
  dai::HAK *arg1 = (dai::HAK *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::HAK *result = 0 ;
  
  if (!SWIG_check_num_args("HAK_clone",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__HAK, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HAK_clone" "', argument " "1"" of type '" "dai::HAK const *""'"); 
  }
  arg1 = reinterpret_cast< dai::HAK * >(argp1);
  result = (dai::HAK *)((dai::HAK const *)arg1)->clone();
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dai__HAK, 0 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( HAK_construct, _wrap_HAK_construct, std::string() ) {
  dai::HAK *arg1 = (dai::HAK *) 0 ;
  dai::FactorGraph *arg2 = 0 ;
  dai::PropertySet *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::HAK *result = 0 ;
  
  if (!SWIG_check_num_args("HAK_construct",args.length(),3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__HAK, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HAK_construct" "', argument " "1"" of type '" "dai::HAK const *""'"); 
  }
  arg1 = reinterpret_cast< dai::HAK * >(argp1);
  res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_dai__FactorGraph,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HAK_construct" "', argument " "2"" of type '" "dai::FactorGraph const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HAK_construct" "', argument " "2"" of type '" "dai::FactorGraph const &""'"); 
  }
  arg2 = reinterpret_cast< dai::FactorGraph * >(argp2);
  res3 = SWIG_ConvertPtr(args(2), &argp3, SWIGTYPE_p_dai__PropertySet,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "HAK_construct" "', argument " "3"" of type '" "dai::PropertySet const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HAK_construct" "', argument " "3"" of type '" "dai::PropertySet const &""'"); 
  }
  arg3 = reinterpret_cast< dai::PropertySet * >(argp3);
  result = (dai::HAK *)((dai::HAK const *)arg1)->construct((dai::FactorGraph const &)*arg2,(dai::PropertySet const &)*arg3);
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dai__HAK, 0 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( HAK_name, _wrap_HAK_name, std::string() ) {
  dai::HAK *arg1 = (dai::HAK *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  std::string result;
  
  if (!SWIG_check_num_args("HAK_name",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__HAK, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HAK_name" "', argument " "1"" of type '" "dai::HAK const *""'"); 
  }
  arg1 = reinterpret_cast< dai::HAK * >(argp1);
  result = ((dai::HAK const *)arg1)->name();
  _outv = SWIG_From_std_string(static_cast< std::string >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( HAK_belief, _wrap_HAK_belief, std::string() ) {
  dai::HAK *arg1 = (dai::HAK *) 0 ;
  dai::VarSet *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::Factor result;
  
  if (!SWIG_check_num_args("HAK_belief",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__HAK, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HAK_belief" "', argument " "1"" of type '" "dai::HAK const *""'"); 
  }
  arg1 = reinterpret_cast< dai::HAK * >(argp1);
  res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_dai__VarSet,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HAK_belief" "', argument " "2"" of type '" "dai::VarSet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HAK_belief" "', argument " "2"" of type '" "dai::VarSet const &""'"); 
  }
  arg2 = reinterpret_cast< dai::VarSet * >(argp2);
  result = ((dai::HAK const *)arg1)->belief((dai::VarSet const &)*arg2);
  _outv = SWIG_NewPointerObj((new dai::Factor(static_cast< const dai::Factor& >(result))), SWIGTYPE_p_dai__TFactorT_double_t, SWIG_POINTER_OWN |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( HAK_beliefs, _wrap_HAK_beliefs, std::string() ) {
  dai::HAK *arg1 = (dai::HAK *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  std::vector< dai::Factor,std::allocator< dai::Factor > > result;
  
  if (!SWIG_check_num_args("HAK_beliefs",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__HAK, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HAK_beliefs" "', argument " "1"" of type '" "dai::HAK const *""'"); 
  }
  arg1 = reinterpret_cast< dai::HAK * >(argp1);
  result = ((dai::HAK const *)arg1)->beliefs();
  _outv = swig::from(static_cast< std::vector< dai::TFactor< double >,std::allocator< dai::TFactor< double > > > >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( HAK_logZ, _wrap_HAK_logZ, std::string() ) {
  dai::HAK *arg1 = (dai::HAK *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::Real result;
  
  if (!SWIG_check_num_args("HAK_logZ",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__HAK, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HAK_logZ" "', argument " "1"" of type '" "dai::HAK const *""'"); 
  }
  arg1 = reinterpret_cast< dai::HAK * >(argp1);
  result = (dai::Real)((dai::HAK const *)arg1)->logZ();
  _outv = SWIG_From_double(static_cast< double >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static octave_value_list _wrap_HAK_init__SWIG_0 (const octave_value_list& args, int nargout) {
  dai::HAK *arg1 = (dai::HAK *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("HAK_init",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__HAK, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HAK_init" "', argument " "1"" of type '" "dai::HAK *""'"); 
  }
  arg1 = reinterpret_cast< dai::HAK * >(argp1);
  (arg1)->init();
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static octave_value_list _wrap_HAK_init__SWIG_1 (const octave_value_list& args, int nargout) {
  dai::HAK *arg1 = (dai::HAK *) 0 ;
  dai::VarSet *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("HAK_init",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__HAK, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HAK_init" "', argument " "1"" of type '" "dai::HAK *""'"); 
  }
  arg1 = reinterpret_cast< dai::HAK * >(argp1);
  res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_dai__VarSet,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HAK_init" "', argument " "2"" of type '" "dai::VarSet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HAK_init" "', argument " "2"" of type '" "dai::VarSet const &""'"); 
  }
  arg2 = reinterpret_cast< dai::VarSet * >(argp2);
  (arg1)->init((dai::VarSet const &)*arg2);
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( HAK_init, _wrap_HAK_init, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[2]={
    octave_value_ref(args,0),octave_value_ref(args,1)
  };
  
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dai__HAK, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_HAK_init__SWIG_0(args, nargout);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dai__HAK, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_dai__VarSet, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_HAK_init__SWIG_1(args, nargout);
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


SWIG_DEFUN( HAK_run, _wrap_HAK_run, std::string() ) {
  dai::HAK *arg1 = (dai::HAK *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::Real result;
  
  if (!SWIG_check_num_args("HAK_run",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__HAK, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HAK_run" "', argument " "1"" of type '" "dai::HAK *""'"); 
  }
  arg1 = reinterpret_cast< dai::HAK * >(argp1);
  result = (dai::Real)(arg1)->run();
  _outv = SWIG_From_double(static_cast< double >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( HAK_maxDiff, _wrap_HAK_maxDiff, std::string() ) {
  dai::HAK *arg1 = (dai::HAK *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::Real result;
  
  if (!SWIG_check_num_args("HAK_maxDiff",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__HAK, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HAK_maxDiff" "', argument " "1"" of type '" "dai::HAK const *""'"); 
  }
  arg1 = reinterpret_cast< dai::HAK * >(argp1);
  result = (dai::Real)((dai::HAK const *)arg1)->maxDiff();
  _outv = SWIG_From_double(static_cast< double >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( HAK_Iterations, _wrap_HAK_Iterations, std::string() ) {
  dai::HAK *arg1 = (dai::HAK *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  size_t result;
  
  if (!SWIG_check_num_args("HAK_Iterations",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__HAK, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HAK_Iterations" "', argument " "1"" of type '" "dai::HAK const *""'"); 
  }
  arg1 = reinterpret_cast< dai::HAK * >(argp1);
  result = ((dai::HAK const *)arg1)->Iterations();
  _outv = SWIG_From_size_t(static_cast< size_t >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( HAK_setMaxIter, _wrap_HAK_setMaxIter, std::string() ) {
  dai::HAK *arg1 = (dai::HAK *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("HAK_setMaxIter",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__HAK, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HAK_setMaxIter" "', argument " "1"" of type '" "dai::HAK *""'"); 
  }
  arg1 = reinterpret_cast< dai::HAK * >(argp1);
  ecode2 = SWIG_AsVal_size_t(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HAK_setMaxIter" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  (arg1)->setMaxIter(arg2);
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( HAK_setProperties, _wrap_HAK_setProperties, std::string() ) {
  dai::HAK *arg1 = (dai::HAK *) 0 ;
  dai::PropertySet *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("HAK_setProperties",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__HAK, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HAK_setProperties" "', argument " "1"" of type '" "dai::HAK *""'"); 
  }
  arg1 = reinterpret_cast< dai::HAK * >(argp1);
  res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_dai__PropertySet,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HAK_setProperties" "', argument " "2"" of type '" "dai::PropertySet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HAK_setProperties" "', argument " "2"" of type '" "dai::PropertySet const &""'"); 
  }
  arg2 = reinterpret_cast< dai::PropertySet * >(argp2);
  (arg1)->setProperties((dai::PropertySet const &)*arg2);
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( HAK_getProperties, _wrap_HAK_getProperties, std::string() ) {
  dai::HAK *arg1 = (dai::HAK *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::PropertySet result;
  
  if (!SWIG_check_num_args("HAK_getProperties",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__HAK, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HAK_getProperties" "', argument " "1"" of type '" "dai::HAK const *""'"); 
  }
  arg1 = reinterpret_cast< dai::HAK * >(argp1);
  result = ((dai::HAK const *)arg1)->getProperties();
  _outv = SWIG_NewPointerObj((new dai::PropertySet(static_cast< const dai::PropertySet& >(result))), SWIGTYPE_p_dai__PropertySet, SWIG_POINTER_OWN |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( HAK_printProperties, _wrap_HAK_printProperties, std::string() ) {
  dai::HAK *arg1 = (dai::HAK *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  std::string result;
  
  if (!SWIG_check_num_args("HAK_printProperties",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__HAK, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HAK_printProperties" "', argument " "1"" of type '" "dai::HAK const *""'"); 
  }
  arg1 = reinterpret_cast< dai::HAK * >(argp1);
  result = ((dai::HAK const *)arg1)->printProperties();
  _outv = SWIG_From_std_string(static_cast< std::string >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( HAK_muab, _wrap_HAK_muab, std::string() ) {
  dai::HAK *arg1 = (dai::HAK *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::Factor *result = 0 ;
  
  if (!SWIG_check_num_args("HAK_muab",args.length(),3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__HAK, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HAK_muab" "', argument " "1"" of type '" "dai::HAK *""'"); 
  }
  arg1 = reinterpret_cast< dai::HAK * >(argp1);
  ecode2 = SWIG_AsVal_size_t(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HAK_muab" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  ecode3 = SWIG_AsVal_size_t(args(2), &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "HAK_muab" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  result = (dai::Factor *) &(arg1)->muab(arg2,arg3);
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dai__TFactorT_double_t, 0 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( HAK_muba, _wrap_HAK_muba, std::string() ) {
  dai::HAK *arg1 = (dai::HAK *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::Factor *result = 0 ;
  
  if (!SWIG_check_num_args("HAK_muba",args.length(),3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__HAK, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HAK_muba" "', argument " "1"" of type '" "dai::HAK *""'"); 
  }
  arg1 = reinterpret_cast< dai::HAK * >(argp1);
  ecode2 = SWIG_AsVal_size_t(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HAK_muba" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  ecode3 = SWIG_AsVal_size_t(args(2), &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "HAK_muba" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  result = (dai::Factor *) &(arg1)->muba(arg2,arg3);
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dai__TFactorT_double_t, 0 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( HAK_Qa, _wrap_HAK_Qa, std::string() ) {
  dai::HAK *arg1 = (dai::HAK *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::Factor *result = 0 ;
  
  if (!SWIG_check_num_args("HAK_Qa",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__HAK, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HAK_Qa" "', argument " "1"" of type '" "dai::HAK const *""'"); 
  }
  arg1 = reinterpret_cast< dai::HAK * >(argp1);
  ecode2 = SWIG_AsVal_size_t(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HAK_Qa" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  result = (dai::Factor *) &((dai::HAK const *)arg1)->Qa(arg2);
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dai__TFactorT_double_t, 0 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( HAK_Qb, _wrap_HAK_Qb, std::string() ) {
  dai::HAK *arg1 = (dai::HAK *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::Factor *result = 0 ;
  
  if (!SWIG_check_num_args("HAK_Qb",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__HAK, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HAK_Qb" "', argument " "1"" of type '" "dai::HAK const *""'"); 
  }
  arg1 = reinterpret_cast< dai::HAK * >(argp1);
  ecode2 = SWIG_AsVal_size_t(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HAK_Qb" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  result = (dai::Factor *) &((dai::HAK const *)arg1)->Qb(arg2);
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dai__TFactorT_double_t, 0 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( HAK_doGBP, _wrap_HAK_doGBP, std::string() ) {
  dai::HAK *arg1 = (dai::HAK *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::Real result;
  
  if (!SWIG_check_num_args("HAK_doGBP",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__HAK, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HAK_doGBP" "', argument " "1"" of type '" "dai::HAK *""'"); 
  }
  arg1 = reinterpret_cast< dai::HAK * >(argp1);
  result = (dai::Real)(arg1)->doGBP();
  _outv = SWIG_From_double(static_cast< double >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( HAK_doDoubleLoop, _wrap_HAK_doDoubleLoop, std::string() ) {
  dai::HAK *arg1 = (dai::HAK *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::Real result;
  
  if (!SWIG_check_num_args("HAK_doDoubleLoop",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__HAK, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HAK_doDoubleLoop" "', argument " "1"" of type '" "dai::HAK *""'"); 
  }
  arg1 = reinterpret_cast< dai::HAK * >(argp1);
  result = (dai::Real)(arg1)->doDoubleLoop();
  _outv = SWIG_From_double(static_cast< double >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( delete_HAK, _wrap_delete_HAK, std::string() ) {
  dai::HAK *arg1 = (dai::HAK *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("delete_HAK",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__HAK, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_HAK" "', argument " "1"" of type '" "dai::HAK *""'"); 
  }
  arg1 = reinterpret_cast< dai::HAK * >(argp1);
  delete arg1;
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static swig_octave_member swig_HAK_members[] = {
{"props",0,_wrap_HAK_props_get,_wrap_HAK_props_set,0,0},
{"clone",_wrap_HAK_clone,0,0,0,0},
{"construct",_wrap_HAK_construct,0,0,0,0},
{"name",_wrap_HAK_name,0,0,0,0},
{"belief",_wrap_HAK_belief,0,0,0,0},
{"beliefs",_wrap_HAK_beliefs,0,0,0,0},
{"logZ",_wrap_HAK_logZ,0,0,0,0},
{"init",_wrap_HAK_init,0,0,0,0},
{"run",_wrap_HAK_run,0,0,0,0},
{"maxDiff",_wrap_HAK_maxDiff,0,0,0,0},
{"Iterations",_wrap_HAK_Iterations,0,0,0,0},
{"setMaxIter",_wrap_HAK_setMaxIter,0,0,0,0},
{"setProperties",_wrap_HAK_setProperties,0,0,0,0},
{"getProperties",_wrap_HAK_getProperties,0,0,0,0},
{"printProperties",_wrap_HAK_printProperties,0,0,0,0},
{"muab",_wrap_HAK_muab,0,0,0,0},
{"muba",_wrap_HAK_muba,0,0,0,0},
{"Qa",_wrap_HAK_Qa,0,0,0,0},
{"Qb",_wrap_HAK_Qb,0,0,0,0},
{"doGBP",_wrap_HAK_doGBP,0,0,0,0},
{"doDoubleLoop",_wrap_HAK_doDoubleLoop,0,0,0,0},
{0,0,0,0,0,0}
};
static const char *swig_HAK_base_names[] = {0};
static const swig_type_info *swig_HAK_base[] = {0};
static swig_octave_class _wrap_class_HAK = {"HAK", &SWIGTYPE_p_dai__HAK,0,_wrap_new_HAK,0,_wrap_delete_HAK,swig_HAK_members,swig_HAK_base_names,swig_HAK_base };

SWIG_DEFUN( LC_props_set, _wrap_LC_props_set, std::string() ) {
  dai::LC *arg1 = (dai::LC *) 0 ;
  dai::LC::Properties *arg2 = (dai::LC::Properties *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("LC_props_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__LC, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LC_props_set" "', argument " "1"" of type '" "dai::LC *""'"); 
  }
  arg1 = reinterpret_cast< dai::LC * >(argp1);
  res2 = SWIG_ConvertPtr(args(1), &argp2,SWIGTYPE_p_dai__LC__Properties, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LC_props_set" "', argument " "2"" of type '" "dai::LC::Properties *""'"); 
  }
  arg2 = reinterpret_cast< dai::LC::Properties * >(argp2);
  if (arg1) (arg1)->props = *arg2;
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( LC_props_get, _wrap_LC_props_get, std::string() ) {
  dai::LC *arg1 = (dai::LC *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::LC::Properties *result = 0 ;
  
  if (!SWIG_check_num_args("LC_props_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__LC, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LC_props_get" "', argument " "1"" of type '" "dai::LC *""'"); 
  }
  arg1 = reinterpret_cast< dai::LC * >(argp1);
  result = (dai::LC::Properties *)& ((arg1)->props);
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dai__LC__Properties, 0 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static octave_value_list _wrap_new_LC__SWIG_0 (const octave_value_list& args, int nargout) {
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::LC *result = 0 ;
  
  if (!SWIG_check_num_args("new_LC",args.length(),0,0,0)) {
    SWIG_fail;
  }
  result = (dai::LC *)new dai::LC();
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dai__LC, 1 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static octave_value_list _wrap_new_LC__SWIG_1 (const octave_value_list& args, int nargout) {
  dai::FactorGraph *arg1 = 0 ;
  dai::PropertySet *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::LC *result = 0 ;
  
  if (!SWIG_check_num_args("new_LC",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1, SWIGTYPE_p_dai__FactorGraph,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_LC" "', argument " "1"" of type '" "dai::FactorGraph const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_LC" "', argument " "1"" of type '" "dai::FactorGraph const &""'"); 
  }
  arg1 = reinterpret_cast< dai::FactorGraph * >(argp1);
  res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_dai__PropertySet,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_LC" "', argument " "2"" of type '" "dai::PropertySet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_LC" "', argument " "2"" of type '" "dai::PropertySet const &""'"); 
  }
  arg2 = reinterpret_cast< dai::PropertySet * >(argp2);
  result = (dai::LC *)new dai::LC((dai::FactorGraph const &)*arg1,(dai::PropertySet const &)*arg2);
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dai__LC, 1 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( new_LC, _wrap_new_LC, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[2]={
    octave_value_ref(args,0),octave_value_ref(args,1)
  };
  
  if (argc == 0) {
    return _wrap_new_LC__SWIG_0(args, nargout);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dai__FactorGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_dai__PropertySet, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_LC__SWIG_1(args, nargout);
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


SWIG_DEFUN( LC_clone, _wrap_LC_clone, std::string() ) {
  dai::LC *arg1 = (dai::LC *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::LC *result = 0 ;
  
  if (!SWIG_check_num_args("LC_clone",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__LC, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LC_clone" "', argument " "1"" of type '" "dai::LC const *""'"); 
  }
  arg1 = reinterpret_cast< dai::LC * >(argp1);
  result = (dai::LC *)((dai::LC const *)arg1)->clone();
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dai__LC, 0 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( LC_construct, _wrap_LC_construct, std::string() ) {
  dai::LC *arg1 = (dai::LC *) 0 ;
  dai::FactorGraph *arg2 = 0 ;
  dai::PropertySet *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::LC *result = 0 ;
  
  if (!SWIG_check_num_args("LC_construct",args.length(),3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__LC, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LC_construct" "', argument " "1"" of type '" "dai::LC const *""'"); 
  }
  arg1 = reinterpret_cast< dai::LC * >(argp1);
  res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_dai__FactorGraph,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LC_construct" "', argument " "2"" of type '" "dai::FactorGraph const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LC_construct" "', argument " "2"" of type '" "dai::FactorGraph const &""'"); 
  }
  arg2 = reinterpret_cast< dai::FactorGraph * >(argp2);
  res3 = SWIG_ConvertPtr(args(2), &argp3, SWIGTYPE_p_dai__PropertySet,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "LC_construct" "', argument " "3"" of type '" "dai::PropertySet const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LC_construct" "', argument " "3"" of type '" "dai::PropertySet const &""'"); 
  }
  arg3 = reinterpret_cast< dai::PropertySet * >(argp3);
  result = (dai::LC *)((dai::LC const *)arg1)->construct((dai::FactorGraph const &)*arg2,(dai::PropertySet const &)*arg3);
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dai__LC, 0 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( LC_name, _wrap_LC_name, std::string() ) {
  dai::LC *arg1 = (dai::LC *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  std::string result;
  
  if (!SWIG_check_num_args("LC_name",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__LC, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LC_name" "', argument " "1"" of type '" "dai::LC const *""'"); 
  }
  arg1 = reinterpret_cast< dai::LC * >(argp1);
  result = ((dai::LC const *)arg1)->name();
  _outv = SWIG_From_std_string(static_cast< std::string >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static octave_value_list _wrap_LC_belief__SWIG_0 (const octave_value_list& args, int nargout) {
  dai::LC *arg1 = (dai::LC *) 0 ;
  dai::Var *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::Factor result;
  
  if (!SWIG_check_num_args("LC_belief",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__LC, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LC_belief" "', argument " "1"" of type '" "dai::LC const *""'"); 
  }
  arg1 = reinterpret_cast< dai::LC * >(argp1);
  res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_dai__Var,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LC_belief" "', argument " "2"" of type '" "dai::Var const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LC_belief" "', argument " "2"" of type '" "dai::Var const &""'"); 
  }
  arg2 = reinterpret_cast< dai::Var * >(argp2);
  result = ((dai::LC const *)arg1)->belief((dai::Var const &)*arg2);
  _outv = SWIG_NewPointerObj((new dai::Factor(static_cast< const dai::Factor& >(result))), SWIGTYPE_p_dai__TFactorT_double_t, SWIG_POINTER_OWN |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static octave_value_list _wrap_LC_belief__SWIG_1 (const octave_value_list& args, int nargout) {
  dai::LC *arg1 = (dai::LC *) 0 ;
  dai::VarSet *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::Factor result;
  
  if (!SWIG_check_num_args("LC_belief",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__LC, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LC_belief" "', argument " "1"" of type '" "dai::LC const *""'"); 
  }
  arg1 = reinterpret_cast< dai::LC * >(argp1);
  res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_dai__VarSet,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LC_belief" "', argument " "2"" of type '" "dai::VarSet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LC_belief" "', argument " "2"" of type '" "dai::VarSet const &""'"); 
  }
  arg2 = reinterpret_cast< dai::VarSet * >(argp2);
  result = ((dai::LC const *)arg1)->belief((dai::VarSet const &)*arg2);
  _outv = SWIG_NewPointerObj((new dai::Factor(static_cast< const dai::Factor& >(result))), SWIGTYPE_p_dai__TFactorT_double_t, SWIG_POINTER_OWN |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( LC_belief, _wrap_LC_belief, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[2]={
    octave_value_ref(args,0),octave_value_ref(args,1)
  };
  
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dai__LC, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_dai__Var, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_LC_belief__SWIG_0(args, nargout);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dai__LC, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_dai__VarSet, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_LC_belief__SWIG_1(args, nargout);
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


SWIG_DEFUN( LC_beliefV, _wrap_LC_beliefV, std::string() ) {
  dai::LC *arg1 = (dai::LC *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::Factor result;
  
  if (!SWIG_check_num_args("LC_beliefV",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__LC, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LC_beliefV" "', argument " "1"" of type '" "dai::LC const *""'"); 
  }
  arg1 = reinterpret_cast< dai::LC * >(argp1);
  ecode2 = SWIG_AsVal_size_t(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LC_beliefV" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  result = ((dai::LC const *)arg1)->beliefV(arg2);
  _outv = SWIG_NewPointerObj((new dai::Factor(static_cast< const dai::Factor& >(result))), SWIGTYPE_p_dai__TFactorT_double_t, SWIG_POINTER_OWN |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( LC_beliefs, _wrap_LC_beliefs, std::string() ) {
  dai::LC *arg1 = (dai::LC *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  std::vector< dai::Factor,std::allocator< dai::Factor > > result;
  
  if (!SWIG_check_num_args("LC_beliefs",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__LC, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LC_beliefs" "', argument " "1"" of type '" "dai::LC const *""'"); 
  }
  arg1 = reinterpret_cast< dai::LC * >(argp1);
  result = ((dai::LC const *)arg1)->beliefs();
  _outv = swig::from(static_cast< std::vector< dai::TFactor< double >,std::allocator< dai::TFactor< double > > > >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( LC_logZ, _wrap_LC_logZ, std::string() ) {
  dai::LC *arg1 = (dai::LC *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::Real result;
  
  if (!SWIG_check_num_args("LC_logZ",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__LC, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LC_logZ" "', argument " "1"" of type '" "dai::LC const *""'"); 
  }
  arg1 = reinterpret_cast< dai::LC * >(argp1);
  result = (dai::Real)((dai::LC const *)arg1)->logZ();
  _outv = SWIG_From_double(static_cast< double >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static octave_value_list _wrap_LC_init__SWIG_0 (const octave_value_list& args, int nargout) {
  dai::LC *arg1 = (dai::LC *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("LC_init",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__LC, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LC_init" "', argument " "1"" of type '" "dai::LC *""'"); 
  }
  arg1 = reinterpret_cast< dai::LC * >(argp1);
  (arg1)->init();
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static octave_value_list _wrap_LC_init__SWIG_1 (const octave_value_list& args, int nargout) {
  dai::LC *arg1 = (dai::LC *) 0 ;
  dai::VarSet *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("LC_init",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__LC, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LC_init" "', argument " "1"" of type '" "dai::LC *""'"); 
  }
  arg1 = reinterpret_cast< dai::LC * >(argp1);
  res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_dai__VarSet,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LC_init" "', argument " "2"" of type '" "dai::VarSet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LC_init" "', argument " "2"" of type '" "dai::VarSet const &""'"); 
  }
  arg2 = reinterpret_cast< dai::VarSet * >(argp2);
  (arg1)->init((dai::VarSet const &)*arg2);
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( LC_init, _wrap_LC_init, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[2]={
    octave_value_ref(args,0),octave_value_ref(args,1)
  };
  
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dai__LC, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_LC_init__SWIG_0(args, nargout);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dai__LC, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_dai__VarSet, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_LC_init__SWIG_1(args, nargout);
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


SWIG_DEFUN( LC_run, _wrap_LC_run, std::string() ) {
  dai::LC *arg1 = (dai::LC *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::Real result;
  
  if (!SWIG_check_num_args("LC_run",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__LC, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LC_run" "', argument " "1"" of type '" "dai::LC *""'"); 
  }
  arg1 = reinterpret_cast< dai::LC * >(argp1);
  result = (dai::Real)(arg1)->run();
  _outv = SWIG_From_double(static_cast< double >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( LC_maxDiff, _wrap_LC_maxDiff, std::string() ) {
  dai::LC *arg1 = (dai::LC *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::Real result;
  
  if (!SWIG_check_num_args("LC_maxDiff",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__LC, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LC_maxDiff" "', argument " "1"" of type '" "dai::LC const *""'"); 
  }
  arg1 = reinterpret_cast< dai::LC * >(argp1);
  result = (dai::Real)((dai::LC const *)arg1)->maxDiff();
  _outv = SWIG_From_double(static_cast< double >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( LC_Iterations, _wrap_LC_Iterations, std::string() ) {
  dai::LC *arg1 = (dai::LC *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  size_t result;
  
  if (!SWIG_check_num_args("LC_Iterations",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__LC, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LC_Iterations" "', argument " "1"" of type '" "dai::LC const *""'"); 
  }
  arg1 = reinterpret_cast< dai::LC * >(argp1);
  result = ((dai::LC const *)arg1)->Iterations();
  _outv = SWIG_From_size_t(static_cast< size_t >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( LC_setMaxIter, _wrap_LC_setMaxIter, std::string() ) {
  dai::LC *arg1 = (dai::LC *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("LC_setMaxIter",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__LC, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LC_setMaxIter" "', argument " "1"" of type '" "dai::LC *""'"); 
  }
  arg1 = reinterpret_cast< dai::LC * >(argp1);
  ecode2 = SWIG_AsVal_size_t(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LC_setMaxIter" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  (arg1)->setMaxIter(arg2);
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( LC_setProperties, _wrap_LC_setProperties, std::string() ) {
  dai::LC *arg1 = (dai::LC *) 0 ;
  dai::PropertySet *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("LC_setProperties",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__LC, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LC_setProperties" "', argument " "1"" of type '" "dai::LC *""'"); 
  }
  arg1 = reinterpret_cast< dai::LC * >(argp1);
  res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_dai__PropertySet,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LC_setProperties" "', argument " "2"" of type '" "dai::PropertySet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LC_setProperties" "', argument " "2"" of type '" "dai::PropertySet const &""'"); 
  }
  arg2 = reinterpret_cast< dai::PropertySet * >(argp2);
  (arg1)->setProperties((dai::PropertySet const &)*arg2);
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( LC_getProperties, _wrap_LC_getProperties, std::string() ) {
  dai::LC *arg1 = (dai::LC *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::PropertySet result;
  
  if (!SWIG_check_num_args("LC_getProperties",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__LC, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LC_getProperties" "', argument " "1"" of type '" "dai::LC const *""'"); 
  }
  arg1 = reinterpret_cast< dai::LC * >(argp1);
  result = ((dai::LC const *)arg1)->getProperties();
  _outv = SWIG_NewPointerObj((new dai::PropertySet(static_cast< const dai::PropertySet& >(result))), SWIGTYPE_p_dai__PropertySet, SWIG_POINTER_OWN |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( LC_printProperties, _wrap_LC_printProperties, std::string() ) {
  dai::LC *arg1 = (dai::LC *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  std::string result;
  
  if (!SWIG_check_num_args("LC_printProperties",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__LC, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LC_printProperties" "', argument " "1"" of type '" "dai::LC const *""'"); 
  }
  arg1 = reinterpret_cast< dai::LC * >(argp1);
  result = ((dai::LC const *)arg1)->printProperties();
  _outv = SWIG_From_std_string(static_cast< std::string >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( LC_CalcCavityDist, _wrap_LC_CalcCavityDist, std::string() ) {
  dai::LC *arg1 = (dai::LC *) 0 ;
  size_t arg2 ;
  std::string *arg3 = 0 ;
  dai::PropertySet *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  void *argp4 ;
  int res4 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::Real result;
  
  if (!SWIG_check_num_args("LC_CalcCavityDist",args.length(),4,4,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__LC, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LC_CalcCavityDist" "', argument " "1"" of type '" "dai::LC *""'"); 
  }
  arg1 = reinterpret_cast< dai::LC * >(argp1);
  ecode2 = SWIG_AsVal_size_t(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LC_CalcCavityDist" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(args(2), &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "LC_CalcCavityDist" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LC_CalcCavityDist" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  res4 = SWIG_ConvertPtr(args(3), &argp4, SWIGTYPE_p_dai__PropertySet,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "LC_CalcCavityDist" "', argument " "4"" of type '" "dai::PropertySet const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LC_CalcCavityDist" "', argument " "4"" of type '" "dai::PropertySet const &""'"); 
  }
  arg4 = reinterpret_cast< dai::PropertySet * >(argp4);
  result = (dai::Real)(arg1)->CalcCavityDist(arg2,(std::string const &)*arg3,(dai::PropertySet const &)*arg4);
  _outv = SWIG_From_double(static_cast< double >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  if (SWIG_IsNewObj(res3)) delete arg3;
  return _out;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return octave_value_list();
}


SWIG_DEFUN( LC_InitCavityDists, _wrap_LC_InitCavityDists, std::string() ) {
  dai::LC *arg1 = (dai::LC *) 0 ;
  std::string *arg2 = 0 ;
  dai::PropertySet *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  void *argp3 ;
  int res3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::Real result;
  
  if (!SWIG_check_num_args("LC_InitCavityDists",args.length(),3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__LC, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LC_InitCavityDists" "', argument " "1"" of type '" "dai::LC *""'"); 
  }
  arg1 = reinterpret_cast< dai::LC * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(args(1), &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LC_InitCavityDists" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LC_InitCavityDists" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  res3 = SWIG_ConvertPtr(args(2), &argp3, SWIGTYPE_p_dai__PropertySet,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "LC_InitCavityDists" "', argument " "3"" of type '" "dai::PropertySet const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LC_InitCavityDists" "', argument " "3"" of type '" "dai::PropertySet const &""'"); 
  }
  arg3 = reinterpret_cast< dai::PropertySet * >(argp3);
  result = (dai::Real)(arg1)->InitCavityDists((std::string const &)*arg2,(dai::PropertySet const &)*arg3);
  _outv = SWIG_From_double(static_cast< double >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  if (SWIG_IsNewObj(res2)) delete arg2;
  return _out;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return octave_value_list();
}


SWIG_DEFUN( LC_SetCavityDists, _wrap_LC_SetCavityDists, std::string() ) {
  dai::LC *arg1 = (dai::LC *) 0 ;
  std::vector< dai::Factor,std::allocator< dai::Factor > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  long result;
  
  if (!SWIG_check_num_args("LC_SetCavityDists",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__LC, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LC_SetCavityDists" "', argument " "1"" of type '" "dai::LC *""'"); 
  }
  arg1 = reinterpret_cast< dai::LC * >(argp1);
  res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_std__vectorT_dai__TFactorT_dai__Real_t_std__allocatorT_dai__TFactorT_dai__Real_t_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LC_SetCavityDists" "', argument " "2"" of type '" "std::vector< dai::Factor,std::allocator< dai::Factor > > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LC_SetCavityDists" "', argument " "2"" of type '" "std::vector< dai::Factor,std::allocator< dai::Factor > > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< dai::Factor,std::allocator< dai::Factor > > * >(argp2);
  result = (long)(arg1)->SetCavityDists(*arg2);
  _outv = SWIG_From_long(static_cast< long >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( LC_NewPancake, _wrap_LC_NewPancake, std::string() ) {
  dai::LC *arg1 = (dai::LC *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  bool *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::Factor result;
  
  if (!SWIG_check_num_args("LC_NewPancake",args.length(),4,4,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__LC, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LC_NewPancake" "', argument " "1"" of type '" "dai::LC *""'"); 
  }
  arg1 = reinterpret_cast< dai::LC * >(argp1);
  ecode2 = SWIG_AsVal_size_t(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LC_NewPancake" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  ecode3 = SWIG_AsVal_size_t(args(2), &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "LC_NewPancake" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  res4 = SWIG_ConvertPtr(args(3), &argp4, SWIGTYPE_p_bool,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "LC_NewPancake" "', argument " "4"" of type '" "bool &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LC_NewPancake" "', argument " "4"" of type '" "bool &""'"); 
  }
  arg4 = reinterpret_cast< bool * >(argp4);
  result = (arg1)->NewPancake(arg2,arg3,*arg4);
  _outv = SWIG_NewPointerObj((new dai::Factor(static_cast< const dai::Factor& >(result))), SWIGTYPE_p_dai__TFactorT_double_t, SWIG_POINTER_OWN |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( LC_CalcBelief, _wrap_LC_CalcBelief, std::string() ) {
  dai::LC *arg1 = (dai::LC *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("LC_CalcBelief",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__LC, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LC_CalcBelief" "', argument " "1"" of type '" "dai::LC *""'"); 
  }
  arg1 = reinterpret_cast< dai::LC * >(argp1);
  ecode2 = SWIG_AsVal_size_t(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LC_CalcBelief" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  (arg1)->CalcBelief(arg2);
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( LC_pancake, _wrap_LC_pancake, std::string() ) {
  dai::LC *arg1 = (dai::LC *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::Factor *result = 0 ;
  
  if (!SWIG_check_num_args("LC_pancake",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__LC, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LC_pancake" "', argument " "1"" of type '" "dai::LC const *""'"); 
  }
  arg1 = reinterpret_cast< dai::LC * >(argp1);
  ecode2 = SWIG_AsVal_size_t(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LC_pancake" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  result = (dai::Factor *) &((dai::LC const *)arg1)->pancake(arg2);
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dai__TFactorT_double_t, 0 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( LC_cavitydist, _wrap_LC_cavitydist, std::string() ) {
  dai::LC *arg1 = (dai::LC *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::Factor *result = 0 ;
  
  if (!SWIG_check_num_args("LC_cavitydist",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__LC, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LC_cavitydist" "', argument " "1"" of type '" "dai::LC const *""'"); 
  }
  arg1 = reinterpret_cast< dai::LC * >(argp1);
  ecode2 = SWIG_AsVal_size_t(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LC_cavitydist" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  result = (dai::Factor *) &((dai::LC const *)arg1)->cavitydist(arg2);
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dai__TFactorT_double_t, 0 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( delete_LC, _wrap_delete_LC, std::string() ) {
  dai::LC *arg1 = (dai::LC *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("delete_LC",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__LC, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_LC" "', argument " "1"" of type '" "dai::LC *""'"); 
  }
  arg1 = reinterpret_cast< dai::LC * >(argp1);
  delete arg1;
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static swig_octave_member swig_LC_members[] = {
{"props",0,_wrap_LC_props_get,_wrap_LC_props_set,0,0},
{"clone",_wrap_LC_clone,0,0,0,0},
{"construct",_wrap_LC_construct,0,0,0,0},
{"name",_wrap_LC_name,0,0,0,0},
{"belief",_wrap_LC_belief,0,0,0,0},
{"beliefV",_wrap_LC_beliefV,0,0,0,0},
{"beliefs",_wrap_LC_beliefs,0,0,0,0},
{"logZ",_wrap_LC_logZ,0,0,0,0},
{"init",_wrap_LC_init,0,0,0,0},
{"run",_wrap_LC_run,0,0,0,0},
{"maxDiff",_wrap_LC_maxDiff,0,0,0,0},
{"Iterations",_wrap_LC_Iterations,0,0,0,0},
{"setMaxIter",_wrap_LC_setMaxIter,0,0,0,0},
{"setProperties",_wrap_LC_setProperties,0,0,0,0},
{"getProperties",_wrap_LC_getProperties,0,0,0,0},
{"printProperties",_wrap_LC_printProperties,0,0,0,0},
{"CalcCavityDist",_wrap_LC_CalcCavityDist,0,0,0,0},
{"InitCavityDists",_wrap_LC_InitCavityDists,0,0,0,0},
{"SetCavityDists",_wrap_LC_SetCavityDists,0,0,0,0},
{"NewPancake",_wrap_LC_NewPancake,0,0,0,0},
{"CalcBelief",_wrap_LC_CalcBelief,0,0,0,0},
{"pancake",_wrap_LC_pancake,0,0,0,0},
{"cavitydist",_wrap_LC_cavitydist,0,0,0,0},
{0,0,0,0,0,0}
};
static const char *swig_LC_base_names[] = {0};
static const swig_type_info *swig_LC_base[] = {0};
static swig_octave_class _wrap_class_LC = {"LC", &SWIGTYPE_p_dai__LC,0,_wrap_new_LC,0,_wrap_delete_LC,swig_LC_members,swig_LC_base_names,swig_LC_base };

SWIG_DEFUN( JTree_RTree_set, _wrap_JTree_RTree_set, std::string() ) {
  dai::JTree *arg1 = (dai::JTree *) 0 ;
  RootedTree arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("JTree_RTree_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__JTree, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JTree_RTree_set" "', argument " "1"" of type '" "dai::JTree *""'"); 
  }
  arg1 = reinterpret_cast< dai::JTree * >(argp1);
  {
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_RootedTree,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "JTree_RTree_set" "', argument " "2"" of type '" "RootedTree""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "JTree_RTree_set" "', argument " "2"" of type '" "RootedTree""'");
    } else {
      arg2 = *(reinterpret_cast< RootedTree * >(argp2));
    }
  }
  if (arg1) (arg1)->RTree = arg2;
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( JTree_RTree_get, _wrap_JTree_RTree_get, std::string() ) {
  dai::JTree *arg1 = (dai::JTree *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  RootedTree result;
  
  if (!SWIG_check_num_args("JTree_RTree_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__JTree, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JTree_RTree_get" "', argument " "1"" of type '" "dai::JTree *""'"); 
  }
  arg1 = reinterpret_cast< dai::JTree * >(argp1);
  result =  ((arg1)->RTree);
  _outv = SWIG_NewPointerObj((new RootedTree(static_cast< const RootedTree& >(result))), SWIGTYPE_p_RootedTree, SWIG_POINTER_OWN |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( JTree_Qa_set, _wrap_JTree_Qa_set, std::string() ) {
  dai::JTree *arg1 = (dai::JTree *) 0 ;
  std::vector< dai::Factor,std::allocator< dai::Factor > > *arg2 = (std::vector< dai::Factor,std::allocator< dai::Factor > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("JTree_Qa_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__JTree, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JTree_Qa_set" "', argument " "1"" of type '" "dai::JTree *""'"); 
  }
  arg1 = reinterpret_cast< dai::JTree * >(argp1);
  res2 = SWIG_ConvertPtr(args(1), &argp2,SWIGTYPE_p_std__vectorT_dai__TFactorT_dai__Real_t_std__allocatorT_dai__TFactorT_dai__Real_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "JTree_Qa_set" "', argument " "2"" of type '" "std::vector< dai::Factor,std::allocator< dai::Factor > > *""'"); 
  }
  arg2 = reinterpret_cast< std::vector< dai::Factor,std::allocator< dai::Factor > > * >(argp2);
  if (arg1) (arg1)->Qa = *arg2;
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( JTree_Qa_get, _wrap_JTree_Qa_get, std::string() ) {
  dai::JTree *arg1 = (dai::JTree *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  std::vector< dai::Factor,std::allocator< dai::Factor > > *result = 0 ;
  
  if (!SWIG_check_num_args("JTree_Qa_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__JTree, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JTree_Qa_get" "', argument " "1"" of type '" "dai::JTree *""'"); 
  }
  arg1 = reinterpret_cast< dai::JTree * >(argp1);
  result = (std::vector< dai::Factor,std::allocator< dai::Factor > > *)& ((arg1)->Qa);
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_dai__TFactorT_dai__Real_t_std__allocatorT_dai__TFactorT_dai__Real_t_t_t, 0 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( JTree_Qb_set, _wrap_JTree_Qb_set, std::string() ) {
  dai::JTree *arg1 = (dai::JTree *) 0 ;
  std::vector< dai::Factor,std::allocator< dai::Factor > > *arg2 = (std::vector< dai::Factor,std::allocator< dai::Factor > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("JTree_Qb_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__JTree, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JTree_Qb_set" "', argument " "1"" of type '" "dai::JTree *""'"); 
  }
  arg1 = reinterpret_cast< dai::JTree * >(argp1);
  res2 = SWIG_ConvertPtr(args(1), &argp2,SWIGTYPE_p_std__vectorT_dai__TFactorT_dai__Real_t_std__allocatorT_dai__TFactorT_dai__Real_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "JTree_Qb_set" "', argument " "2"" of type '" "std::vector< dai::Factor,std::allocator< dai::Factor > > *""'"); 
  }
  arg2 = reinterpret_cast< std::vector< dai::Factor,std::allocator< dai::Factor > > * >(argp2);
  if (arg1) (arg1)->Qb = *arg2;
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( JTree_Qb_get, _wrap_JTree_Qb_get, std::string() ) {
  dai::JTree *arg1 = (dai::JTree *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  std::vector< dai::Factor,std::allocator< dai::Factor > > *result = 0 ;
  
  if (!SWIG_check_num_args("JTree_Qb_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__JTree, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JTree_Qb_get" "', argument " "1"" of type '" "dai::JTree *""'"); 
  }
  arg1 = reinterpret_cast< dai::JTree * >(argp1);
  result = (std::vector< dai::Factor,std::allocator< dai::Factor > > *)& ((arg1)->Qb);
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_dai__TFactorT_dai__Real_t_std__allocatorT_dai__TFactorT_dai__Real_t_t_t, 0 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( JTree_props_set, _wrap_JTree_props_set, std::string() ) {
  dai::JTree *arg1 = (dai::JTree *) 0 ;
  dai::JTree::Properties *arg2 = (dai::JTree::Properties *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("JTree_props_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__JTree, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JTree_props_set" "', argument " "1"" of type '" "dai::JTree *""'"); 
  }
  arg1 = reinterpret_cast< dai::JTree * >(argp1);
  res2 = SWIG_ConvertPtr(args(1), &argp2,SWIGTYPE_p_dai__JTree__Properties, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "JTree_props_set" "', argument " "2"" of type '" "dai::JTree::Properties *""'"); 
  }
  arg2 = reinterpret_cast< dai::JTree::Properties * >(argp2);
  if (arg1) (arg1)->props = *arg2;
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( JTree_props_get, _wrap_JTree_props_get, std::string() ) {
  dai::JTree *arg1 = (dai::JTree *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::JTree::Properties *result = 0 ;
  
  if (!SWIG_check_num_args("JTree_props_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__JTree, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JTree_props_get" "', argument " "1"" of type '" "dai::JTree *""'"); 
  }
  arg1 = reinterpret_cast< dai::JTree * >(argp1);
  result = (dai::JTree::Properties *)& ((arg1)->props);
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dai__JTree__Properties, 0 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static octave_value_list _wrap_new_JTree__SWIG_0 (const octave_value_list& args, int nargout) {
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::JTree *result = 0 ;
  
  if (!SWIG_check_num_args("new_JTree",args.length(),0,0,0)) {
    SWIG_fail;
  }
  result = (dai::JTree *)new dai::JTree();
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dai__JTree, 1 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static octave_value_list _wrap_new_JTree__SWIG_1 (const octave_value_list& args, int nargout) {
  dai::FactorGraph *arg1 = 0 ;
  dai::PropertySet *arg2 = 0 ;
  bool arg3 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::JTree *result = 0 ;
  
  if (!SWIG_check_num_args("new_JTree",args.length(),3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1, SWIGTYPE_p_dai__FactorGraph,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_JTree" "', argument " "1"" of type '" "dai::FactorGraph const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_JTree" "', argument " "1"" of type '" "dai::FactorGraph const &""'"); 
  }
  arg1 = reinterpret_cast< dai::FactorGraph * >(argp1);
  res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_dai__PropertySet,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_JTree" "', argument " "2"" of type '" "dai::PropertySet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_JTree" "', argument " "2"" of type '" "dai::PropertySet const &""'"); 
  }
  arg2 = reinterpret_cast< dai::PropertySet * >(argp2);
  ecode3 = SWIG_AsVal_bool(args(2), &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_JTree" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  result = (dai::JTree *)new dai::JTree((dai::FactorGraph const &)*arg1,(dai::PropertySet const &)*arg2,arg3);
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dai__JTree, 1 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static octave_value_list _wrap_new_JTree__SWIG_2 (const octave_value_list& args, int nargout) {
  dai::FactorGraph *arg1 = 0 ;
  dai::PropertySet *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::JTree *result = 0 ;
  
  if (!SWIG_check_num_args("new_JTree",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1, SWIGTYPE_p_dai__FactorGraph,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_JTree" "', argument " "1"" of type '" "dai::FactorGraph const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_JTree" "', argument " "1"" of type '" "dai::FactorGraph const &""'"); 
  }
  arg1 = reinterpret_cast< dai::FactorGraph * >(argp1);
  res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_dai__PropertySet,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_JTree" "', argument " "2"" of type '" "dai::PropertySet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_JTree" "', argument " "2"" of type '" "dai::PropertySet const &""'"); 
  }
  arg2 = reinterpret_cast< dai::PropertySet * >(argp2);
  result = (dai::JTree *)new dai::JTree((dai::FactorGraph const &)*arg1,(dai::PropertySet const &)*arg2);
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dai__JTree, 1 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( new_JTree, _wrap_new_JTree, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[3]={
    octave_value_ref(args,0),octave_value_ref(args,1),octave_value_ref(args,2)
  };
  
  if (argc == 0) {
    return _wrap_new_JTree__SWIG_0(args, nargout);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dai__FactorGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_dai__PropertySet, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_JTree__SWIG_2(args, nargout);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dai__FactorGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_dai__PropertySet, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_JTree__SWIG_1(args, nargout);
        }
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


SWIG_DEFUN( JTree_clone, _wrap_JTree_clone, std::string() ) {
  dai::JTree *arg1 = (dai::JTree *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::JTree *result = 0 ;
  
  if (!SWIG_check_num_args("JTree_clone",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__JTree, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JTree_clone" "', argument " "1"" of type '" "dai::JTree const *""'"); 
  }
  arg1 = reinterpret_cast< dai::JTree * >(argp1);
  result = (dai::JTree *)((dai::JTree const *)arg1)->clone();
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dai__JTree, 0 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static octave_value_list _wrap_JTree_construct__SWIG_0 (const octave_value_list& args, int nargout) {
  dai::JTree *arg1 = (dai::JTree *) 0 ;
  dai::FactorGraph *arg2 = 0 ;
  dai::PropertySet *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::JTree *result = 0 ;
  
  if (!SWIG_check_num_args("JTree_construct",args.length(),3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__JTree, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JTree_construct" "', argument " "1"" of type '" "dai::JTree const *""'"); 
  }
  arg1 = reinterpret_cast< dai::JTree * >(argp1);
  res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_dai__FactorGraph,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "JTree_construct" "', argument " "2"" of type '" "dai::FactorGraph const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "JTree_construct" "', argument " "2"" of type '" "dai::FactorGraph const &""'"); 
  }
  arg2 = reinterpret_cast< dai::FactorGraph * >(argp2);
  res3 = SWIG_ConvertPtr(args(2), &argp3, SWIGTYPE_p_dai__PropertySet,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "JTree_construct" "', argument " "3"" of type '" "dai::PropertySet const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "JTree_construct" "', argument " "3"" of type '" "dai::PropertySet const &""'"); 
  }
  arg3 = reinterpret_cast< dai::PropertySet * >(argp3);
  result = (dai::JTree *)((dai::JTree const *)arg1)->construct((dai::FactorGraph const &)*arg2,(dai::PropertySet const &)*arg3);
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dai__JTree, 0 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( JTree_name, _wrap_JTree_name, std::string() ) {
  dai::JTree *arg1 = (dai::JTree *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  std::string result;
  
  if (!SWIG_check_num_args("JTree_name",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__JTree, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JTree_name" "', argument " "1"" of type '" "dai::JTree const *""'"); 
  }
  arg1 = reinterpret_cast< dai::JTree * >(argp1);
  result = ((dai::JTree const *)arg1)->name();
  _outv = SWIG_From_std_string(static_cast< std::string >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( JTree_belief, _wrap_JTree_belief, std::string() ) {
  dai::JTree *arg1 = (dai::JTree *) 0 ;
  dai::VarSet *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::Factor result;
  
  if (!SWIG_check_num_args("JTree_belief",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__JTree, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JTree_belief" "', argument " "1"" of type '" "dai::JTree const *""'"); 
  }
  arg1 = reinterpret_cast< dai::JTree * >(argp1);
  res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_dai__VarSet,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "JTree_belief" "', argument " "2"" of type '" "dai::VarSet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "JTree_belief" "', argument " "2"" of type '" "dai::VarSet const &""'"); 
  }
  arg2 = reinterpret_cast< dai::VarSet * >(argp2);
  result = ((dai::JTree const *)arg1)->belief((dai::VarSet const &)*arg2);
  _outv = SWIG_NewPointerObj((new dai::Factor(static_cast< const dai::Factor& >(result))), SWIGTYPE_p_dai__TFactorT_double_t, SWIG_POINTER_OWN |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( JTree_beliefs, _wrap_JTree_beliefs, std::string() ) {
  dai::JTree *arg1 = (dai::JTree *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  std::vector< dai::Factor,std::allocator< dai::Factor > > result;
  
  if (!SWIG_check_num_args("JTree_beliefs",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__JTree, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JTree_beliefs" "', argument " "1"" of type '" "dai::JTree const *""'"); 
  }
  arg1 = reinterpret_cast< dai::JTree * >(argp1);
  result = ((dai::JTree const *)arg1)->beliefs();
  _outv = swig::from(static_cast< std::vector< dai::TFactor< double >,std::allocator< dai::TFactor< double > > > >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( JTree_logZ, _wrap_JTree_logZ, std::string() ) {
  dai::JTree *arg1 = (dai::JTree *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::Real result;
  
  if (!SWIG_check_num_args("JTree_logZ",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__JTree, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JTree_logZ" "', argument " "1"" of type '" "dai::JTree const *""'"); 
  }
  arg1 = reinterpret_cast< dai::JTree * >(argp1);
  result = (dai::Real)((dai::JTree const *)arg1)->logZ();
  _outv = SWIG_From_double(static_cast< double >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( JTree_findMaximum, _wrap_JTree_findMaximum, std::string() ) {
  dai::JTree *arg1 = (dai::JTree *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  std::vector< size_t,std::allocator< size_t > > result;
  
  if (!SWIG_check_num_args("JTree_findMaximum",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__JTree, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JTree_findMaximum" "', argument " "1"" of type '" "dai::JTree const *""'"); 
  }
  arg1 = reinterpret_cast< dai::JTree * >(argp1);
  result = ((dai::JTree const *)arg1)->findMaximum();
  _outv = swig::from(static_cast< std::vector< size_t,std::allocator< size_t > > >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static octave_value_list _wrap_JTree_init__SWIG_0 (const octave_value_list& args, int nargout) {
  dai::JTree *arg1 = (dai::JTree *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("JTree_init",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__JTree, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JTree_init" "', argument " "1"" of type '" "dai::JTree *""'"); 
  }
  arg1 = reinterpret_cast< dai::JTree * >(argp1);
  (arg1)->init();
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static octave_value_list _wrap_JTree_init__SWIG_1 (const octave_value_list& args, int nargout) {
  dai::JTree *arg1 = (dai::JTree *) 0 ;
  dai::VarSet *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("JTree_init",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__JTree, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JTree_init" "', argument " "1"" of type '" "dai::JTree *""'"); 
  }
  arg1 = reinterpret_cast< dai::JTree * >(argp1);
  res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_dai__VarSet,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "JTree_init" "', argument " "2"" of type '" "dai::VarSet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "JTree_init" "', argument " "2"" of type '" "dai::VarSet const &""'"); 
  }
  arg2 = reinterpret_cast< dai::VarSet * >(argp2);
  (arg1)->init((dai::VarSet const &)*arg2);
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( JTree_init, _wrap_JTree_init, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[2]={
    octave_value_ref(args,0),octave_value_ref(args,1)
  };
  
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dai__JTree, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_JTree_init__SWIG_0(args, nargout);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dai__JTree, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_dai__VarSet, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_JTree_init__SWIG_1(args, nargout);
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


SWIG_DEFUN( JTree_run, _wrap_JTree_run, std::string() ) {
  dai::JTree *arg1 = (dai::JTree *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::Real result;
  
  if (!SWIG_check_num_args("JTree_run",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__JTree, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JTree_run" "', argument " "1"" of type '" "dai::JTree *""'"); 
  }
  arg1 = reinterpret_cast< dai::JTree * >(argp1);
  result = (dai::Real)(arg1)->run();
  _outv = SWIG_From_double(static_cast< double >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( JTree_maxDiff, _wrap_JTree_maxDiff, std::string() ) {
  dai::JTree *arg1 = (dai::JTree *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::Real result;
  
  if (!SWIG_check_num_args("JTree_maxDiff",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__JTree, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JTree_maxDiff" "', argument " "1"" of type '" "dai::JTree const *""'"); 
  }
  arg1 = reinterpret_cast< dai::JTree * >(argp1);
  result = (dai::Real)((dai::JTree const *)arg1)->maxDiff();
  _outv = SWIG_From_double(static_cast< double >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( JTree_Iterations, _wrap_JTree_Iterations, std::string() ) {
  dai::JTree *arg1 = (dai::JTree *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  size_t result;
  
  if (!SWIG_check_num_args("JTree_Iterations",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__JTree, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JTree_Iterations" "', argument " "1"" of type '" "dai::JTree const *""'"); 
  }
  arg1 = reinterpret_cast< dai::JTree * >(argp1);
  result = ((dai::JTree const *)arg1)->Iterations();
  _outv = SWIG_From_size_t(static_cast< size_t >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( JTree_setProperties, _wrap_JTree_setProperties, std::string() ) {
  dai::JTree *arg1 = (dai::JTree *) 0 ;
  dai::PropertySet *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("JTree_setProperties",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__JTree, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JTree_setProperties" "', argument " "1"" of type '" "dai::JTree *""'"); 
  }
  arg1 = reinterpret_cast< dai::JTree * >(argp1);
  res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_dai__PropertySet,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "JTree_setProperties" "', argument " "2"" of type '" "dai::PropertySet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "JTree_setProperties" "', argument " "2"" of type '" "dai::PropertySet const &""'"); 
  }
  arg2 = reinterpret_cast< dai::PropertySet * >(argp2);
  (arg1)->setProperties((dai::PropertySet const &)*arg2);
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( JTree_getProperties, _wrap_JTree_getProperties, std::string() ) {
  dai::JTree *arg1 = (dai::JTree *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::PropertySet result;
  
  if (!SWIG_check_num_args("JTree_getProperties",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__JTree, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JTree_getProperties" "', argument " "1"" of type '" "dai::JTree const *""'"); 
  }
  arg1 = reinterpret_cast< dai::JTree * >(argp1);
  result = ((dai::JTree const *)arg1)->getProperties();
  _outv = SWIG_NewPointerObj((new dai::PropertySet(static_cast< const dai::PropertySet& >(result))), SWIGTYPE_p_dai__PropertySet, SWIG_POINTER_OWN |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( JTree_printProperties, _wrap_JTree_printProperties, std::string() ) {
  dai::JTree *arg1 = (dai::JTree *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  std::string result;
  
  if (!SWIG_check_num_args("JTree_printProperties",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__JTree, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JTree_printProperties" "', argument " "1"" of type '" "dai::JTree const *""'"); 
  }
  arg1 = reinterpret_cast< dai::JTree * >(argp1);
  result = ((dai::JTree const *)arg1)->printProperties();
  _outv = SWIG_From_std_string(static_cast< std::string >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static octave_value_list _wrap_JTree_construct__SWIG_1 (const octave_value_list& args, int nargout) {
  dai::JTree *arg1 = (dai::JTree *) 0 ;
  dai::FactorGraph *arg2 = 0 ;
  std::vector< dai::VarSet,std::allocator< dai::VarSet > > *arg3 = 0 ;
  bool arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("JTree_construct",args.length(),4,4,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__JTree, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JTree_construct" "', argument " "1"" of type '" "dai::JTree *""'"); 
  }
  arg1 = reinterpret_cast< dai::JTree * >(argp1);
  res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_dai__FactorGraph,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "JTree_construct" "', argument " "2"" of type '" "dai::FactorGraph const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "JTree_construct" "', argument " "2"" of type '" "dai::FactorGraph const &""'"); 
  }
  arg2 = reinterpret_cast< dai::FactorGraph * >(argp2);
  res3 = SWIG_ConvertPtr(args(2), &argp3, SWIGTYPE_p_std__vectorT_dai__VarSet_std__allocatorT_dai__VarSet_t_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "JTree_construct" "', argument " "3"" of type '" "std::vector< dai::VarSet,std::allocator< dai::VarSet > > const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "JTree_construct" "', argument " "3"" of type '" "std::vector< dai::VarSet,std::allocator< dai::VarSet > > const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< dai::VarSet,std::allocator< dai::VarSet > > * >(argp3);
  ecode4 = SWIG_AsVal_bool(args(3), &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "JTree_construct" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  (arg1)->construct((dai::FactorGraph const &)*arg2,(std::vector< dai::VarSet,std::allocator< dai::VarSet > > const &)*arg3,arg4);
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static octave_value_list _wrap_JTree_construct__SWIG_2 (const octave_value_list& args, int nargout) {
  dai::JTree *arg1 = (dai::JTree *) 0 ;
  dai::FactorGraph *arg2 = 0 ;
  std::vector< dai::VarSet,std::allocator< dai::VarSet > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("JTree_construct",args.length(),3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__JTree, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JTree_construct" "', argument " "1"" of type '" "dai::JTree *""'"); 
  }
  arg1 = reinterpret_cast< dai::JTree * >(argp1);
  res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_dai__FactorGraph,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "JTree_construct" "', argument " "2"" of type '" "dai::FactorGraph const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "JTree_construct" "', argument " "2"" of type '" "dai::FactorGraph const &""'"); 
  }
  arg2 = reinterpret_cast< dai::FactorGraph * >(argp2);
  res3 = SWIG_ConvertPtr(args(2), &argp3, SWIGTYPE_p_std__vectorT_dai__VarSet_std__allocatorT_dai__VarSet_t_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "JTree_construct" "', argument " "3"" of type '" "std::vector< dai::VarSet,std::allocator< dai::VarSet > > const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "JTree_construct" "', argument " "3"" of type '" "std::vector< dai::VarSet,std::allocator< dai::VarSet > > const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< dai::VarSet,std::allocator< dai::VarSet > > * >(argp3);
  (arg1)->construct((dai::FactorGraph const &)*arg2,(std::vector< dai::VarSet,std::allocator< dai::VarSet > > const &)*arg3);
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( JTree_construct, _wrap_JTree_construct, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[4]={
    octave_value_ref(args,0),octave_value_ref(args,1),octave_value_ref(args,2),octave_value_ref(args,3)
  };
  
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dai__JTree, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_dai__FactorGraph, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_dai__PropertySet, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_JTree_construct__SWIG_0(args, nargout);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dai__JTree, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_dai__FactorGraph, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_std__vectorT_dai__VarSet_std__allocatorT_dai__VarSet_t_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_JTree_construct__SWIG_2(args, nargout);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dai__JTree, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_dai__FactorGraph, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_std__vectorT_dai__VarSet_std__allocatorT_dai__VarSet_t_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_JTree_construct__SWIG_1(args, nargout);
          }
        }
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


SWIG_DEFUN( JTree_GenerateJT, _wrap_JTree_GenerateJT, std::string() ) {
  dai::JTree *arg1 = (dai::JTree *) 0 ;
  dai::FactorGraph *arg2 = 0 ;
  std::vector< dai::VarSet,std::allocator< dai::VarSet > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("JTree_GenerateJT",args.length(),3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__JTree, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JTree_GenerateJT" "', argument " "1"" of type '" "dai::JTree *""'"); 
  }
  arg1 = reinterpret_cast< dai::JTree * >(argp1);
  res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_dai__FactorGraph,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "JTree_GenerateJT" "', argument " "2"" of type '" "dai::FactorGraph const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "JTree_GenerateJT" "', argument " "2"" of type '" "dai::FactorGraph const &""'"); 
  }
  arg2 = reinterpret_cast< dai::FactorGraph * >(argp2);
  res3 = SWIG_ConvertPtr(args(2), &argp3, SWIGTYPE_p_std__vectorT_dai__VarSet_std__allocatorT_dai__VarSet_t_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "JTree_GenerateJT" "', argument " "3"" of type '" "std::vector< dai::VarSet,std::allocator< dai::VarSet > > const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "JTree_GenerateJT" "', argument " "3"" of type '" "std::vector< dai::VarSet,std::allocator< dai::VarSet > > const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< dai::VarSet,std::allocator< dai::VarSet > > * >(argp3);
  (arg1)->GenerateJT((dai::FactorGraph const &)*arg2,(std::vector< dai::VarSet,std::allocator< dai::VarSet > > const &)*arg3);
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static octave_value_list _wrap_JTree_message__SWIG_0 (const octave_value_list& args, int nargout) {
  dai::JTree *arg1 = (dai::JTree *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::Factor *result = 0 ;
  
  if (!SWIG_check_num_args("JTree_message",args.length(),3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__JTree, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JTree_message" "', argument " "1"" of type '" "dai::JTree const *""'"); 
  }
  arg1 = reinterpret_cast< dai::JTree * >(argp1);
  ecode2 = SWIG_AsVal_size_t(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "JTree_message" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  ecode3 = SWIG_AsVal_size_t(args(2), &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "JTree_message" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  result = (dai::Factor *) &((dai::JTree const *)arg1)->message(arg2,arg3);
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dai__TFactorT_double_t, 0 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static octave_value_list _wrap_JTree_message__SWIG_1 (const octave_value_list& args, int nargout) {
  dai::JTree *arg1 = (dai::JTree *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::Factor *result = 0 ;
  
  if (!SWIG_check_num_args("JTree_message",args.length(),3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__JTree, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JTree_message" "', argument " "1"" of type '" "dai::JTree *""'"); 
  }
  arg1 = reinterpret_cast< dai::JTree * >(argp1);
  ecode2 = SWIG_AsVal_size_t(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "JTree_message" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  ecode3 = SWIG_AsVal_size_t(args(2), &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "JTree_message" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  result = (dai::Factor *) &(arg1)->message(arg2,arg3);
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dai__TFactorT_double_t, 0 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( JTree_message, _wrap_JTree_message, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[3]={
    octave_value_ref(args,0),octave_value_ref(args,1),octave_value_ref(args,2)
  };
  
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dai__JTree, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_JTree_message__SWIG_1(args, nargout);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dai__JTree, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_JTree_message__SWIG_0(args, nargout);
        }
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


SWIG_DEFUN( JTree_runHUGIN, _wrap_JTree_runHUGIN, std::string() ) {
  dai::JTree *arg1 = (dai::JTree *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("JTree_runHUGIN",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__JTree, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JTree_runHUGIN" "', argument " "1"" of type '" "dai::JTree *""'"); 
  }
  arg1 = reinterpret_cast< dai::JTree * >(argp1);
  (arg1)->runHUGIN();
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( JTree_runShaferShenoy, _wrap_JTree_runShaferShenoy, std::string() ) {
  dai::JTree *arg1 = (dai::JTree *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("JTree_runShaferShenoy",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__JTree, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JTree_runShaferShenoy" "', argument " "1"" of type '" "dai::JTree *""'"); 
  }
  arg1 = reinterpret_cast< dai::JTree * >(argp1);
  (arg1)->runShaferShenoy();
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static octave_value_list _wrap_JTree_findEfficientTree__SWIG_0 (const octave_value_list& args, int nargout) {
  dai::JTree *arg1 = (dai::JTree *) 0 ;
  dai::VarSet *arg2 = 0 ;
  RootedTree *arg3 = 0 ;
  size_t arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  size_t val4 ;
  int ecode4 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  size_t result;
  
  if (!SWIG_check_num_args("JTree_findEfficientTree",args.length(),4,4,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__JTree, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JTree_findEfficientTree" "', argument " "1"" of type '" "dai::JTree const *""'"); 
  }
  arg1 = reinterpret_cast< dai::JTree * >(argp1);
  res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_dai__VarSet,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "JTree_findEfficientTree" "', argument " "2"" of type '" "dai::VarSet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "JTree_findEfficientTree" "', argument " "2"" of type '" "dai::VarSet const &""'"); 
  }
  arg2 = reinterpret_cast< dai::VarSet * >(argp2);
  res3 = SWIG_ConvertPtr(args(2), &argp3, SWIGTYPE_p_RootedTree,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "JTree_findEfficientTree" "', argument " "3"" of type '" "RootedTree &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "JTree_findEfficientTree" "', argument " "3"" of type '" "RootedTree &""'"); 
  }
  arg3 = reinterpret_cast< RootedTree * >(argp3);
  ecode4 = SWIG_AsVal_size_t(args(3), &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "JTree_findEfficientTree" "', argument " "4"" of type '" "size_t""'");
  } 
  arg4 = static_cast< size_t >(val4);
  result = ((dai::JTree const *)arg1)->findEfficientTree((dai::VarSet const &)*arg2,*arg3,arg4);
  _outv = SWIG_From_size_t(static_cast< size_t >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static octave_value_list _wrap_JTree_findEfficientTree__SWIG_1 (const octave_value_list& args, int nargout) {
  dai::JTree *arg1 = (dai::JTree *) 0 ;
  dai::VarSet *arg2 = 0 ;
  RootedTree *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  size_t result;
  
  if (!SWIG_check_num_args("JTree_findEfficientTree",args.length(),3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__JTree, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JTree_findEfficientTree" "', argument " "1"" of type '" "dai::JTree const *""'"); 
  }
  arg1 = reinterpret_cast< dai::JTree * >(argp1);
  res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_dai__VarSet,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "JTree_findEfficientTree" "', argument " "2"" of type '" "dai::VarSet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "JTree_findEfficientTree" "', argument " "2"" of type '" "dai::VarSet const &""'"); 
  }
  arg2 = reinterpret_cast< dai::VarSet * >(argp2);
  res3 = SWIG_ConvertPtr(args(2), &argp3, SWIGTYPE_p_RootedTree,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "JTree_findEfficientTree" "', argument " "3"" of type '" "RootedTree &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "JTree_findEfficientTree" "', argument " "3"" of type '" "RootedTree &""'"); 
  }
  arg3 = reinterpret_cast< RootedTree * >(argp3);
  result = ((dai::JTree const *)arg1)->findEfficientTree((dai::VarSet const &)*arg2,*arg3);
  _outv = SWIG_From_size_t(static_cast< size_t >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( JTree_findEfficientTree, _wrap_JTree_findEfficientTree, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[4]={
    octave_value_ref(args,0),octave_value_ref(args,1),octave_value_ref(args,2),octave_value_ref(args,3)
  };
  
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dai__JTree, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_dai__VarSet, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_RootedTree, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_JTree_findEfficientTree__SWIG_1(args, nargout);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dai__JTree, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_dai__VarSet, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_RootedTree, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_size_t(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_JTree_findEfficientTree__SWIG_0(args, nargout);
          }
        }
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


SWIG_DEFUN( JTree_calcMarginal, _wrap_JTree_calcMarginal, std::string() ) {
  dai::JTree *arg1 = (dai::JTree *) 0 ;
  dai::VarSet *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::Factor result;
  
  if (!SWIG_check_num_args("JTree_calcMarginal",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__JTree, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JTree_calcMarginal" "', argument " "1"" of type '" "dai::JTree *""'"); 
  }
  arg1 = reinterpret_cast< dai::JTree * >(argp1);
  res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_dai__VarSet,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "JTree_calcMarginal" "', argument " "2"" of type '" "dai::VarSet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "JTree_calcMarginal" "', argument " "2"" of type '" "dai::VarSet const &""'"); 
  }
  arg2 = reinterpret_cast< dai::VarSet * >(argp2);
  result = (arg1)->calcMarginal((dai::VarSet const &)*arg2);
  _outv = SWIG_NewPointerObj((new dai::Factor(static_cast< const dai::Factor& >(result))), SWIGTYPE_p_dai__TFactorT_double_t, SWIG_POINTER_OWN |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( delete_JTree, _wrap_delete_JTree, std::string() ) {
  dai::JTree *arg1 = (dai::JTree *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("delete_JTree",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__JTree, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_JTree" "', argument " "1"" of type '" "dai::JTree *""'"); 
  }
  arg1 = reinterpret_cast< dai::JTree * >(argp1);
  delete arg1;
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static swig_octave_member swig_JTree_members[] = {
{"RTree",0,_wrap_JTree_RTree_get,_wrap_JTree_RTree_set,0,0},
{"Qa",0,_wrap_JTree_Qa_get,_wrap_JTree_Qa_set,0,0},
{"Qb",0,_wrap_JTree_Qb_get,_wrap_JTree_Qb_set,0,0},
{"props",0,_wrap_JTree_props_get,_wrap_JTree_props_set,0,0},
{"clone",_wrap_JTree_clone,0,0,0,0},
{"name",_wrap_JTree_name,0,0,0,0},
{"belief",_wrap_JTree_belief,0,0,0,0},
{"beliefs",_wrap_JTree_beliefs,0,0,0,0},
{"logZ",_wrap_JTree_logZ,0,0,0,0},
{"findMaximum",_wrap_JTree_findMaximum,0,0,0,0},
{"init",_wrap_JTree_init,0,0,0,0},
{"run",_wrap_JTree_run,0,0,0,0},
{"maxDiff",_wrap_JTree_maxDiff,0,0,0,0},
{"Iterations",_wrap_JTree_Iterations,0,0,0,0},
{"setProperties",_wrap_JTree_setProperties,0,0,0,0},
{"getProperties",_wrap_JTree_getProperties,0,0,0,0},
{"printProperties",_wrap_JTree_printProperties,0,0,0,0},
{"construct",_wrap_JTree_construct,0,0,0,0},
{"GenerateJT",_wrap_JTree_GenerateJT,0,0,0,0},
{"message",_wrap_JTree_message,0,0,0,0},
{"runHUGIN",_wrap_JTree_runHUGIN,0,0,0,0},
{"runShaferShenoy",_wrap_JTree_runShaferShenoy,0,0,0,0},
{"findEfficientTree",_wrap_JTree_findEfficientTree,0,0,0,0},
{"calcMarginal",_wrap_JTree_calcMarginal,0,0,0,0},
{0,0,0,0,0,0}
};
static const char *swig_JTree_base_names[] = {0};
static const swig_type_info *swig_JTree_base[] = {0};
static swig_octave_class _wrap_class_JTree = {"JTree", &SWIGTYPE_p_dai__JTree,0,_wrap_new_JTree,0,_wrap_delete_JTree,swig_JTree_members,swig_JTree_base_names,swig_JTree_base };

static octave_value_list _wrap_boundTreewidth__SWIG_0 (const octave_value_list& args, int nargout) {
  dai::FactorGraph *arg1 = 0 ;
  dai::greedyVariableElimination::eliminationCostFunction arg2 = (dai::greedyVariableElimination::eliminationCostFunction) 0 ;
  size_t arg3 ;
  void *argp1 ;
  int res1 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  std::pair< size_t,dai::BigInt > result;
  
  if (!SWIG_check_num_args("boundTreewidth",args.length(),3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1, SWIGTYPE_p_dai__FactorGraph,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "boundTreewidth" "', argument " "1"" of type '" "dai::FactorGraph const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "boundTreewidth" "', argument " "1"" of type '" "dai::FactorGraph const &""'"); 
  }
  arg1 = reinterpret_cast< dai::FactorGraph * >(argp1);
  {
    int res = SWIG_ConvertFunctionPtr(args(1), (void**)(&arg2), SWIGTYPE_p_f_r_q_const__dai__ClusterGraph_size_t__size_t);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "boundTreewidth" "', argument " "2"" of type '" "dai::greedyVariableElimination::eliminationCostFunction""'"); 
    }
  }
  ecode3 = SWIG_AsVal_size_t(args(2), &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "boundTreewidth" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  result = dai::boundTreewidth((dai::FactorGraph const &)*arg1,arg2,arg3);
  _outv = swig::from(static_cast< std::pair< size_t,mpz_class > >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static octave_value_list _wrap_boundTreewidth__SWIG_1 (const octave_value_list& args, int nargout) {
  dai::FactorGraph *arg1 = 0 ;
  dai::greedyVariableElimination::eliminationCostFunction arg2 = (dai::greedyVariableElimination::eliminationCostFunction) 0 ;
  void *argp1 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  std::pair< size_t,dai::BigInt > result;
  
  if (!SWIG_check_num_args("boundTreewidth",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1, SWIGTYPE_p_dai__FactorGraph,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "boundTreewidth" "', argument " "1"" of type '" "dai::FactorGraph const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "boundTreewidth" "', argument " "1"" of type '" "dai::FactorGraph const &""'"); 
  }
  arg1 = reinterpret_cast< dai::FactorGraph * >(argp1);
  {
    int res = SWIG_ConvertFunctionPtr(args(1), (void**)(&arg2), SWIGTYPE_p_f_r_q_const__dai__ClusterGraph_size_t__size_t);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "boundTreewidth" "', argument " "2"" of type '" "dai::greedyVariableElimination::eliminationCostFunction""'"); 
    }
  }
  result = dai::boundTreewidth((dai::FactorGraph const &)*arg1,arg2);
  _outv = swig::from(static_cast< std::pair< size_t,mpz_class > >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( boundTreewidth, _wrap_boundTreewidth, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[3]={
    octave_value_ref(args,0),octave_value_ref(args,1),octave_value_ref(args,2)
  };
  
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dai__FactorGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *ptr = 0;
      int res = SWIG_ConvertFunctionPtr(argv[1], &ptr, SWIGTYPE_p_f_r_q_const__dai__ClusterGraph_size_t__size_t);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_boundTreewidth__SWIG_1(args, nargout);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dai__FactorGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *ptr = 0;
      int res = SWIG_ConvertFunctionPtr(argv[1], &ptr, SWIGTYPE_p_f_r_q_const__dai__ClusterGraph_size_t__size_t);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_boundTreewidth__SWIG_0(args, nargout);
        }
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


SWIG_DEFUN( TreeEP_props_set, _wrap_TreeEP_props_set, std::string() ) {
  dai::TreeEP *arg1 = (dai::TreeEP *) 0 ;
  dai::TreeEP::Properties *arg2 = (dai::TreeEP::Properties *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("TreeEP_props_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__TreeEP, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeEP_props_set" "', argument " "1"" of type '" "dai::TreeEP *""'"); 
  }
  arg1 = reinterpret_cast< dai::TreeEP * >(argp1);
  res2 = SWIG_ConvertPtr(args(1), &argp2,SWIGTYPE_p_dai__TreeEP__Properties, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreeEP_props_set" "', argument " "2"" of type '" "dai::TreeEP::Properties *""'"); 
  }
  arg2 = reinterpret_cast< dai::TreeEP::Properties * >(argp2);
  if (arg1) (arg1)->props = *arg2;
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( TreeEP_props_get, _wrap_TreeEP_props_get, std::string() ) {
  dai::TreeEP *arg1 = (dai::TreeEP *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::TreeEP::Properties *result = 0 ;
  
  if (!SWIG_check_num_args("TreeEP_props_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__TreeEP, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeEP_props_get" "', argument " "1"" of type '" "dai::TreeEP *""'"); 
  }
  arg1 = reinterpret_cast< dai::TreeEP * >(argp1);
  result = (dai::TreeEP::Properties *)& ((arg1)->props);
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dai__TreeEP__Properties, 0 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static octave_value_list _wrap_new_TreeEP__SWIG_0 (const octave_value_list& args, int nargout) {
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::TreeEP *result = 0 ;
  
  if (!SWIG_check_num_args("new_TreeEP",args.length(),0,0,0)) {
    SWIG_fail;
  }
  result = (dai::TreeEP *)new dai::TreeEP();
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dai__TreeEP, 1 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static octave_value_list _wrap_new_TreeEP__SWIG_1 (const octave_value_list& args, int nargout) {
  dai::TreeEP *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::TreeEP *result = 0 ;
  
  if (!SWIG_check_num_args("new_TreeEP",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1, SWIGTYPE_p_dai__TreeEP,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_TreeEP" "', argument " "1"" of type '" "dai::TreeEP const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_TreeEP" "', argument " "1"" of type '" "dai::TreeEP const &""'"); 
  }
  arg1 = reinterpret_cast< dai::TreeEP * >(argp1);
  result = (dai::TreeEP *)new dai::TreeEP((dai::TreeEP const &)*arg1);
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dai__TreeEP, 1 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static octave_value_list _wrap_new_TreeEP__SWIG_2 (const octave_value_list& args, int nargout) {
  dai::FactorGraph *arg1 = 0 ;
  dai::PropertySet *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::TreeEP *result = 0 ;
  
  if (!SWIG_check_num_args("new_TreeEP",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1, SWIGTYPE_p_dai__FactorGraph,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_TreeEP" "', argument " "1"" of type '" "dai::FactorGraph const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_TreeEP" "', argument " "1"" of type '" "dai::FactorGraph const &""'"); 
  }
  arg1 = reinterpret_cast< dai::FactorGraph * >(argp1);
  res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_dai__PropertySet,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_TreeEP" "', argument " "2"" of type '" "dai::PropertySet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_TreeEP" "', argument " "2"" of type '" "dai::PropertySet const &""'"); 
  }
  arg2 = reinterpret_cast< dai::PropertySet * >(argp2);
  result = (dai::TreeEP *)new dai::TreeEP((dai::FactorGraph const &)*arg1,(dai::PropertySet const &)*arg2);
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dai__TreeEP, 1 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( new_TreeEP, _wrap_new_TreeEP, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[2]={
    octave_value_ref(args,0),octave_value_ref(args,1)
  };
  
  if (argc == 0) {
    return _wrap_new_TreeEP__SWIG_0(args, nargout);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dai__TreeEP, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_TreeEP__SWIG_1(args, nargout);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dai__FactorGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_dai__PropertySet, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_TreeEP__SWIG_2(args, nargout);
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


SWIG_DEFUN( TreeEP_clone, _wrap_TreeEP_clone, std::string() ) {
  dai::TreeEP *arg1 = (dai::TreeEP *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::TreeEP *result = 0 ;
  
  if (!SWIG_check_num_args("TreeEP_clone",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__TreeEP, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeEP_clone" "', argument " "1"" of type '" "dai::TreeEP const *""'"); 
  }
  arg1 = reinterpret_cast< dai::TreeEP * >(argp1);
  result = (dai::TreeEP *)((dai::TreeEP const *)arg1)->clone();
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dai__TreeEP, 0 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( TreeEP_construct, _wrap_TreeEP_construct, std::string() ) {
  dai::TreeEP *arg1 = (dai::TreeEP *) 0 ;
  dai::FactorGraph *arg2 = 0 ;
  dai::PropertySet *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::TreeEP *result = 0 ;
  
  if (!SWIG_check_num_args("TreeEP_construct",args.length(),3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__TreeEP, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeEP_construct" "', argument " "1"" of type '" "dai::TreeEP const *""'"); 
  }
  arg1 = reinterpret_cast< dai::TreeEP * >(argp1);
  res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_dai__FactorGraph,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreeEP_construct" "', argument " "2"" of type '" "dai::FactorGraph const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreeEP_construct" "', argument " "2"" of type '" "dai::FactorGraph const &""'"); 
  }
  arg2 = reinterpret_cast< dai::FactorGraph * >(argp2);
  res3 = SWIG_ConvertPtr(args(2), &argp3, SWIGTYPE_p_dai__PropertySet,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TreeEP_construct" "', argument " "3"" of type '" "dai::PropertySet const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreeEP_construct" "', argument " "3"" of type '" "dai::PropertySet const &""'"); 
  }
  arg3 = reinterpret_cast< dai::PropertySet * >(argp3);
  result = (dai::TreeEP *)((dai::TreeEP const *)arg1)->construct((dai::FactorGraph const &)*arg2,(dai::PropertySet const &)*arg3);
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dai__TreeEP, 0 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( TreeEP_name, _wrap_TreeEP_name, std::string() ) {
  dai::TreeEP *arg1 = (dai::TreeEP *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  std::string result;
  
  if (!SWIG_check_num_args("TreeEP_name",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__TreeEP, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeEP_name" "', argument " "1"" of type '" "dai::TreeEP const *""'"); 
  }
  arg1 = reinterpret_cast< dai::TreeEP * >(argp1);
  result = ((dai::TreeEP const *)arg1)->name();
  _outv = SWIG_From_std_string(static_cast< std::string >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( TreeEP_logZ, _wrap_TreeEP_logZ, std::string() ) {
  dai::TreeEP *arg1 = (dai::TreeEP *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::Real result;
  
  if (!SWIG_check_num_args("TreeEP_logZ",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__TreeEP, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeEP_logZ" "', argument " "1"" of type '" "dai::TreeEP const *""'"); 
  }
  arg1 = reinterpret_cast< dai::TreeEP * >(argp1);
  result = (dai::Real)((dai::TreeEP const *)arg1)->logZ();
  _outv = SWIG_From_double(static_cast< double >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static octave_value_list _wrap_TreeEP_init__SWIG_0 (const octave_value_list& args, int nargout) {
  dai::TreeEP *arg1 = (dai::TreeEP *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("TreeEP_init",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__TreeEP, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeEP_init" "', argument " "1"" of type '" "dai::TreeEP *""'"); 
  }
  arg1 = reinterpret_cast< dai::TreeEP * >(argp1);
  (arg1)->init();
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static octave_value_list _wrap_TreeEP_init__SWIG_1 (const octave_value_list& args, int nargout) {
  dai::TreeEP *arg1 = (dai::TreeEP *) 0 ;
  dai::VarSet *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("TreeEP_init",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__TreeEP, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeEP_init" "', argument " "1"" of type '" "dai::TreeEP *""'"); 
  }
  arg1 = reinterpret_cast< dai::TreeEP * >(argp1);
  res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_dai__VarSet,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreeEP_init" "', argument " "2"" of type '" "dai::VarSet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreeEP_init" "', argument " "2"" of type '" "dai::VarSet const &""'"); 
  }
  arg2 = reinterpret_cast< dai::VarSet * >(argp2);
  (arg1)->init((dai::VarSet const &)*arg2);
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( TreeEP_init, _wrap_TreeEP_init, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[2]={
    octave_value_ref(args,0),octave_value_ref(args,1)
  };
  
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dai__TreeEP, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_TreeEP_init__SWIG_0(args, nargout);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dai__TreeEP, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_dai__VarSet, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_TreeEP_init__SWIG_1(args, nargout);
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


SWIG_DEFUN( TreeEP_run, _wrap_TreeEP_run, std::string() ) {
  dai::TreeEP *arg1 = (dai::TreeEP *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::Real result;
  
  if (!SWIG_check_num_args("TreeEP_run",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__TreeEP, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeEP_run" "', argument " "1"" of type '" "dai::TreeEP *""'"); 
  }
  arg1 = reinterpret_cast< dai::TreeEP * >(argp1);
  result = (dai::Real)(arg1)->run();
  _outv = SWIG_From_double(static_cast< double >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( TreeEP_maxDiff, _wrap_TreeEP_maxDiff, std::string() ) {
  dai::TreeEP *arg1 = (dai::TreeEP *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::Real result;
  
  if (!SWIG_check_num_args("TreeEP_maxDiff",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__TreeEP, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeEP_maxDiff" "', argument " "1"" of type '" "dai::TreeEP const *""'"); 
  }
  arg1 = reinterpret_cast< dai::TreeEP * >(argp1);
  result = (dai::Real)((dai::TreeEP const *)arg1)->maxDiff();
  _outv = SWIG_From_double(static_cast< double >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( TreeEP_Iterations, _wrap_TreeEP_Iterations, std::string() ) {
  dai::TreeEP *arg1 = (dai::TreeEP *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  size_t result;
  
  if (!SWIG_check_num_args("TreeEP_Iterations",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__TreeEP, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeEP_Iterations" "', argument " "1"" of type '" "dai::TreeEP const *""'"); 
  }
  arg1 = reinterpret_cast< dai::TreeEP * >(argp1);
  result = ((dai::TreeEP const *)arg1)->Iterations();
  _outv = SWIG_From_size_t(static_cast< size_t >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( TreeEP_setMaxIter, _wrap_TreeEP_setMaxIter, std::string() ) {
  dai::TreeEP *arg1 = (dai::TreeEP *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("TreeEP_setMaxIter",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__TreeEP, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeEP_setMaxIter" "', argument " "1"" of type '" "dai::TreeEP *""'"); 
  }
  arg1 = reinterpret_cast< dai::TreeEP * >(argp1);
  ecode2 = SWIG_AsVal_size_t(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TreeEP_setMaxIter" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  (arg1)->setMaxIter(arg2);
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( TreeEP_setProperties, _wrap_TreeEP_setProperties, std::string() ) {
  dai::TreeEP *arg1 = (dai::TreeEP *) 0 ;
  dai::PropertySet *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("TreeEP_setProperties",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__TreeEP, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeEP_setProperties" "', argument " "1"" of type '" "dai::TreeEP *""'"); 
  }
  arg1 = reinterpret_cast< dai::TreeEP * >(argp1);
  res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_dai__PropertySet,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreeEP_setProperties" "', argument " "2"" of type '" "dai::PropertySet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreeEP_setProperties" "', argument " "2"" of type '" "dai::PropertySet const &""'"); 
  }
  arg2 = reinterpret_cast< dai::PropertySet * >(argp2);
  (arg1)->setProperties((dai::PropertySet const &)*arg2);
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( TreeEP_getProperties, _wrap_TreeEP_getProperties, std::string() ) {
  dai::TreeEP *arg1 = (dai::TreeEP *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::PropertySet result;
  
  if (!SWIG_check_num_args("TreeEP_getProperties",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__TreeEP, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeEP_getProperties" "', argument " "1"" of type '" "dai::TreeEP const *""'"); 
  }
  arg1 = reinterpret_cast< dai::TreeEP * >(argp1);
  result = ((dai::TreeEP const *)arg1)->getProperties();
  _outv = SWIG_NewPointerObj((new dai::PropertySet(static_cast< const dai::PropertySet& >(result))), SWIGTYPE_p_dai__PropertySet, SWIG_POINTER_OWN |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( TreeEP_printProperties, _wrap_TreeEP_printProperties, std::string() ) {
  dai::TreeEP *arg1 = (dai::TreeEP *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  std::string result;
  
  if (!SWIG_check_num_args("TreeEP_printProperties",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__TreeEP, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeEP_printProperties" "', argument " "1"" of type '" "dai::TreeEP const *""'"); 
  }
  arg1 = reinterpret_cast< dai::TreeEP * >(argp1);
  result = ((dai::TreeEP const *)arg1)->printProperties();
  _outv = SWIG_From_std_string(static_cast< std::string >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( delete_TreeEP, _wrap_delete_TreeEP, std::string() ) {
  dai::TreeEP *arg1 = (dai::TreeEP *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("delete_TreeEP",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__TreeEP, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_TreeEP" "', argument " "1"" of type '" "dai::TreeEP *""'"); 
  }
  arg1 = reinterpret_cast< dai::TreeEP * >(argp1);
  delete arg1;
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static swig_octave_member swig_TreeEP_members[] = {
{"props",0,_wrap_TreeEP_props_get,_wrap_TreeEP_props_set,0,0},
{"clone",_wrap_TreeEP_clone,0,0,0,0},
{"construct",_wrap_TreeEP_construct,0,0,0,0},
{"name",_wrap_TreeEP_name,0,0,0,0},
{"logZ",_wrap_TreeEP_logZ,0,0,0,0},
{"init",_wrap_TreeEP_init,0,0,0,0},
{"run",_wrap_TreeEP_run,0,0,0,0},
{"maxDiff",_wrap_TreeEP_maxDiff,0,0,0,0},
{"Iterations",_wrap_TreeEP_Iterations,0,0,0,0},
{"setMaxIter",_wrap_TreeEP_setMaxIter,0,0,0,0},
{"setProperties",_wrap_TreeEP_setProperties,0,0,0,0},
{"getProperties",_wrap_TreeEP_getProperties,0,0,0,0},
{"printProperties",_wrap_TreeEP_printProperties,0,0,0,0},
{0,0,0,0,0,0}
};
static const char *swig_TreeEP_base_names[] = {"_p_dai__JTree",0};
static const swig_type_info *swig_TreeEP_base[] = {0,0};
static swig_octave_class _wrap_class_TreeEP = {"TreeEP", &SWIGTYPE_p_dai__TreeEP,0,_wrap_new_TreeEP,0,_wrap_delete_TreeEP,swig_TreeEP_members,swig_TreeEP_base_names,swig_TreeEP_base };

SWIG_DEFUN( MR_props_set, _wrap_MR_props_set, std::string() ) {
  dai::MR *arg1 = (dai::MR *) 0 ;
  dai::MR::Properties *arg2 = (dai::MR::Properties *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MR_props_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__MR, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MR_props_set" "', argument " "1"" of type '" "dai::MR *""'"); 
  }
  arg1 = reinterpret_cast< dai::MR * >(argp1);
  res2 = SWIG_ConvertPtr(args(1), &argp2,SWIGTYPE_p_dai__MR__Properties, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MR_props_set" "', argument " "2"" of type '" "dai::MR::Properties *""'"); 
  }
  arg2 = reinterpret_cast< dai::MR::Properties * >(argp2);
  if (arg1) (arg1)->props = *arg2;
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( MR_props_get, _wrap_MR_props_get, std::string() ) {
  dai::MR *arg1 = (dai::MR *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::MR::Properties *result = 0 ;
  
  if (!SWIG_check_num_args("MR_props_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__MR, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MR_props_get" "', argument " "1"" of type '" "dai::MR *""'"); 
  }
  arg1 = reinterpret_cast< dai::MR * >(argp1);
  result = (dai::MR::Properties *)& ((arg1)->props);
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dai__MR__Properties, 0 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static octave_value_list _wrap_new_MR__SWIG_0 (const octave_value_list& args, int nargout) {
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::MR *result = 0 ;
  
  if (!SWIG_check_num_args("new_MR",args.length(),0,0,0)) {
    SWIG_fail;
  }
  result = (dai::MR *)new dai::MR();
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dai__MR, 1 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static octave_value_list _wrap_new_MR__SWIG_1 (const octave_value_list& args, int nargout) {
  dai::FactorGraph *arg1 = 0 ;
  dai::PropertySet *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::MR *result = 0 ;
  
  if (!SWIG_check_num_args("new_MR",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1, SWIGTYPE_p_dai__FactorGraph,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_MR" "', argument " "1"" of type '" "dai::FactorGraph const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_MR" "', argument " "1"" of type '" "dai::FactorGraph const &""'"); 
  }
  arg1 = reinterpret_cast< dai::FactorGraph * >(argp1);
  res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_dai__PropertySet,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_MR" "', argument " "2"" of type '" "dai::PropertySet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_MR" "', argument " "2"" of type '" "dai::PropertySet const &""'"); 
  }
  arg2 = reinterpret_cast< dai::PropertySet * >(argp2);
  result = (dai::MR *)new dai::MR((dai::FactorGraph const &)*arg1,(dai::PropertySet const &)*arg2);
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dai__MR, 1 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( new_MR, _wrap_new_MR, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[2]={
    octave_value_ref(args,0),octave_value_ref(args,1)
  };
  
  if (argc == 0) {
    return _wrap_new_MR__SWIG_0(args, nargout);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dai__FactorGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_dai__PropertySet, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_MR__SWIG_1(args, nargout);
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


SWIG_DEFUN( MR_clone, _wrap_MR_clone, std::string() ) {
  dai::MR *arg1 = (dai::MR *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::MR *result = 0 ;
  
  if (!SWIG_check_num_args("MR_clone",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__MR, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MR_clone" "', argument " "1"" of type '" "dai::MR const *""'"); 
  }
  arg1 = reinterpret_cast< dai::MR * >(argp1);
  result = (dai::MR *)((dai::MR const *)arg1)->clone();
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dai__MR, 0 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( MR_construct, _wrap_MR_construct, std::string() ) {
  dai::MR *arg1 = (dai::MR *) 0 ;
  dai::FactorGraph *arg2 = 0 ;
  dai::PropertySet *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::MR *result = 0 ;
  
  if (!SWIG_check_num_args("MR_construct",args.length(),3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__MR, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MR_construct" "', argument " "1"" of type '" "dai::MR const *""'"); 
  }
  arg1 = reinterpret_cast< dai::MR * >(argp1);
  res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_dai__FactorGraph,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MR_construct" "', argument " "2"" of type '" "dai::FactorGraph const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MR_construct" "', argument " "2"" of type '" "dai::FactorGraph const &""'"); 
  }
  arg2 = reinterpret_cast< dai::FactorGraph * >(argp2);
  res3 = SWIG_ConvertPtr(args(2), &argp3, SWIGTYPE_p_dai__PropertySet,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "MR_construct" "', argument " "3"" of type '" "dai::PropertySet const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MR_construct" "', argument " "3"" of type '" "dai::PropertySet const &""'"); 
  }
  arg3 = reinterpret_cast< dai::PropertySet * >(argp3);
  result = (dai::MR *)((dai::MR const *)arg1)->construct((dai::FactorGraph const &)*arg2,(dai::PropertySet const &)*arg3);
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dai__MR, 0 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( MR_name, _wrap_MR_name, std::string() ) {
  dai::MR *arg1 = (dai::MR *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  std::string result;
  
  if (!SWIG_check_num_args("MR_name",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__MR, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MR_name" "', argument " "1"" of type '" "dai::MR const *""'"); 
  }
  arg1 = reinterpret_cast< dai::MR * >(argp1);
  result = ((dai::MR const *)arg1)->name();
  _outv = SWIG_From_std_string(static_cast< std::string >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static octave_value_list _wrap_MR_belief__SWIG_0 (const octave_value_list& args, int nargout) {
  dai::MR *arg1 = (dai::MR *) 0 ;
  dai::Var *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::Factor result;
  
  if (!SWIG_check_num_args("MR_belief",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__MR, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MR_belief" "', argument " "1"" of type '" "dai::MR const *""'"); 
  }
  arg1 = reinterpret_cast< dai::MR * >(argp1);
  res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_dai__Var,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MR_belief" "', argument " "2"" of type '" "dai::Var const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MR_belief" "', argument " "2"" of type '" "dai::Var const &""'"); 
  }
  arg2 = reinterpret_cast< dai::Var * >(argp2);
  result = ((dai::MR const *)arg1)->belief((dai::Var const &)*arg2);
  _outv = SWIG_NewPointerObj((new dai::Factor(static_cast< const dai::Factor& >(result))), SWIGTYPE_p_dai__TFactorT_double_t, SWIG_POINTER_OWN |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static octave_value_list _wrap_MR_belief__SWIG_1 (const octave_value_list& args, int nargout) {
  dai::MR *arg1 = (dai::MR *) 0 ;
  dai::VarSet *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::Factor result;
  
  if (!SWIG_check_num_args("MR_belief",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__MR, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MR_belief" "', argument " "1"" of type '" "dai::MR const *""'"); 
  }
  arg1 = reinterpret_cast< dai::MR * >(argp1);
  res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_dai__VarSet,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MR_belief" "', argument " "2"" of type '" "dai::VarSet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MR_belief" "', argument " "2"" of type '" "dai::VarSet const &""'"); 
  }
  arg2 = reinterpret_cast< dai::VarSet * >(argp2);
  result = ((dai::MR const *)arg1)->belief((dai::VarSet const &)*arg2);
  _outv = SWIG_NewPointerObj((new dai::Factor(static_cast< const dai::Factor& >(result))), SWIGTYPE_p_dai__TFactorT_double_t, SWIG_POINTER_OWN |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( MR_belief, _wrap_MR_belief, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[2]={
    octave_value_ref(args,0),octave_value_ref(args,1)
  };
  
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dai__MR, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_dai__Var, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_MR_belief__SWIG_0(args, nargout);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dai__MR, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_dai__VarSet, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_MR_belief__SWIG_1(args, nargout);
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


SWIG_DEFUN( MR_beliefV, _wrap_MR_beliefV, std::string() ) {
  dai::MR *arg1 = (dai::MR *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::Factor result;
  
  if (!SWIG_check_num_args("MR_beliefV",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__MR, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MR_beliefV" "', argument " "1"" of type '" "dai::MR const *""'"); 
  }
  arg1 = reinterpret_cast< dai::MR * >(argp1);
  ecode2 = SWIG_AsVal_size_t(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MR_beliefV" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  result = ((dai::MR const *)arg1)->beliefV(arg2);
  _outv = SWIG_NewPointerObj((new dai::Factor(static_cast< const dai::Factor& >(result))), SWIGTYPE_p_dai__TFactorT_double_t, SWIG_POINTER_OWN |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( MR_beliefs, _wrap_MR_beliefs, std::string() ) {
  dai::MR *arg1 = (dai::MR *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  std::vector< dai::Factor,std::allocator< dai::Factor > > result;
  
  if (!SWIG_check_num_args("MR_beliefs",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__MR, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MR_beliefs" "', argument " "1"" of type '" "dai::MR const *""'"); 
  }
  arg1 = reinterpret_cast< dai::MR * >(argp1);
  result = ((dai::MR const *)arg1)->beliefs();
  _outv = swig::from(static_cast< std::vector< dai::TFactor< double >,std::allocator< dai::TFactor< double > > > >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( MR_logZ, _wrap_MR_logZ, std::string() ) {
  dai::MR *arg1 = (dai::MR *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::Real result;
  
  if (!SWIG_check_num_args("MR_logZ",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__MR, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MR_logZ" "', argument " "1"" of type '" "dai::MR const *""'"); 
  }
  arg1 = reinterpret_cast< dai::MR * >(argp1);
  result = (dai::Real)((dai::MR const *)arg1)->logZ();
  _outv = SWIG_From_double(static_cast< double >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static octave_value_list _wrap_MR_init__SWIG_0 (const octave_value_list& args, int nargout) {
  dai::MR *arg1 = (dai::MR *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MR_init",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__MR, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MR_init" "', argument " "1"" of type '" "dai::MR *""'"); 
  }
  arg1 = reinterpret_cast< dai::MR * >(argp1);
  (arg1)->init();
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static octave_value_list _wrap_MR_init__SWIG_1 (const octave_value_list& args, int nargout) {
  dai::MR *arg1 = (dai::MR *) 0 ;
  dai::VarSet *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MR_init",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__MR, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MR_init" "', argument " "1"" of type '" "dai::MR *""'"); 
  }
  arg1 = reinterpret_cast< dai::MR * >(argp1);
  res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_dai__VarSet,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MR_init" "', argument " "2"" of type '" "dai::VarSet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MR_init" "', argument " "2"" of type '" "dai::VarSet const &""'"); 
  }
  arg2 = reinterpret_cast< dai::VarSet * >(argp2);
  (arg1)->init((dai::VarSet const &)*arg2);
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( MR_init, _wrap_MR_init, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[2]={
    octave_value_ref(args,0),octave_value_ref(args,1)
  };
  
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dai__MR, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_MR_init__SWIG_0(args, nargout);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dai__MR, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_dai__VarSet, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_MR_init__SWIG_1(args, nargout);
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


SWIG_DEFUN( MR_run, _wrap_MR_run, std::string() ) {
  dai::MR *arg1 = (dai::MR *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::Real result;
  
  if (!SWIG_check_num_args("MR_run",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__MR, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MR_run" "', argument " "1"" of type '" "dai::MR *""'"); 
  }
  arg1 = reinterpret_cast< dai::MR * >(argp1);
  result = (dai::Real)(arg1)->run();
  _outv = SWIG_From_double(static_cast< double >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( MR_maxDiff, _wrap_MR_maxDiff, std::string() ) {
  dai::MR *arg1 = (dai::MR *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::Real result;
  
  if (!SWIG_check_num_args("MR_maxDiff",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__MR, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MR_maxDiff" "', argument " "1"" of type '" "dai::MR const *""'"); 
  }
  arg1 = reinterpret_cast< dai::MR * >(argp1);
  result = (dai::Real)((dai::MR const *)arg1)->maxDiff();
  _outv = SWIG_From_double(static_cast< double >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( MR_Iterations, _wrap_MR_Iterations, std::string() ) {
  dai::MR *arg1 = (dai::MR *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  size_t result;
  
  if (!SWIG_check_num_args("MR_Iterations",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__MR, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MR_Iterations" "', argument " "1"" of type '" "dai::MR const *""'"); 
  }
  arg1 = reinterpret_cast< dai::MR * >(argp1);
  result = ((dai::MR const *)arg1)->Iterations();
  _outv = SWIG_From_size_t(static_cast< size_t >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( MR_setProperties, _wrap_MR_setProperties, std::string() ) {
  dai::MR *arg1 = (dai::MR *) 0 ;
  dai::PropertySet *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MR_setProperties",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__MR, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MR_setProperties" "', argument " "1"" of type '" "dai::MR *""'"); 
  }
  arg1 = reinterpret_cast< dai::MR * >(argp1);
  res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_dai__PropertySet,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MR_setProperties" "', argument " "2"" of type '" "dai::PropertySet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MR_setProperties" "', argument " "2"" of type '" "dai::PropertySet const &""'"); 
  }
  arg2 = reinterpret_cast< dai::PropertySet * >(argp2);
  (arg1)->setProperties((dai::PropertySet const &)*arg2);
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( MR_getProperties, _wrap_MR_getProperties, std::string() ) {
  dai::MR *arg1 = (dai::MR *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::PropertySet result;
  
  if (!SWIG_check_num_args("MR_getProperties",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__MR, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MR_getProperties" "', argument " "1"" of type '" "dai::MR const *""'"); 
  }
  arg1 = reinterpret_cast< dai::MR * >(argp1);
  result = ((dai::MR const *)arg1)->getProperties();
  _outv = SWIG_NewPointerObj((new dai::PropertySet(static_cast< const dai::PropertySet& >(result))), SWIGTYPE_p_dai__PropertySet, SWIG_POINTER_OWN |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( MR_printProperties, _wrap_MR_printProperties, std::string() ) {
  dai::MR *arg1 = (dai::MR *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  std::string result;
  
  if (!SWIG_check_num_args("MR_printProperties",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__MR, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MR_printProperties" "', argument " "1"" of type '" "dai::MR const *""'"); 
  }
  arg1 = reinterpret_cast< dai::MR * >(argp1);
  result = ((dai::MR const *)arg1)->printProperties();
  _outv = SWIG_From_std_string(static_cast< std::string >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( delete_MR, _wrap_delete_MR, std::string() ) {
  dai::MR *arg1 = (dai::MR *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("delete_MR",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__MR, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_MR" "', argument " "1"" of type '" "dai::MR *""'"); 
  }
  arg1 = reinterpret_cast< dai::MR * >(argp1);
  delete arg1;
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static swig_octave_member swig_MR_members[] = {
{"props",0,_wrap_MR_props_get,_wrap_MR_props_set,0,0},
{"clone",_wrap_MR_clone,0,0,0,0},
{"construct",_wrap_MR_construct,0,0,0,0},
{"name",_wrap_MR_name,0,0,0,0},
{"belief",_wrap_MR_belief,0,0,0,0},
{"beliefV",_wrap_MR_beliefV,0,0,0,0},
{"beliefs",_wrap_MR_beliefs,0,0,0,0},
{"logZ",_wrap_MR_logZ,0,0,0,0},
{"init",_wrap_MR_init,0,0,0,0},
{"run",_wrap_MR_run,0,0,0,0},
{"maxDiff",_wrap_MR_maxDiff,0,0,0,0},
{"Iterations",_wrap_MR_Iterations,0,0,0,0},
{"setProperties",_wrap_MR_setProperties,0,0,0,0},
{"getProperties",_wrap_MR_getProperties,0,0,0,0},
{"printProperties",_wrap_MR_printProperties,0,0,0,0},
{0,0,0,0,0,0}
};
static const char *swig_MR_base_names[] = {0};
static const swig_type_info *swig_MR_base[] = {0};
static swig_octave_class _wrap_class_MR = {"MR", &SWIGTYPE_p_dai__MR,0,_wrap_new_MR,0,_wrap_delete_MR,swig_MR_members,swig_MR_base_names,swig_MR_base };

SWIG_DEFUN( Gibbs_props_set, _wrap_Gibbs_props_set, std::string() ) {
  dai::Gibbs *arg1 = (dai::Gibbs *) 0 ;
  dai::Gibbs::Properties *arg2 = (dai::Gibbs::Properties *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("Gibbs_props_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__Gibbs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Gibbs_props_set" "', argument " "1"" of type '" "dai::Gibbs *""'"); 
  }
  arg1 = reinterpret_cast< dai::Gibbs * >(argp1);
  res2 = SWIG_ConvertPtr(args(1), &argp2,SWIGTYPE_p_dai__Gibbs__Properties, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Gibbs_props_set" "', argument " "2"" of type '" "dai::Gibbs::Properties *""'"); 
  }
  arg2 = reinterpret_cast< dai::Gibbs::Properties * >(argp2);
  if (arg1) (arg1)->props = *arg2;
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( Gibbs_props_get, _wrap_Gibbs_props_get, std::string() ) {
  dai::Gibbs *arg1 = (dai::Gibbs *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::Gibbs::Properties *result = 0 ;
  
  if (!SWIG_check_num_args("Gibbs_props_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__Gibbs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Gibbs_props_get" "', argument " "1"" of type '" "dai::Gibbs *""'"); 
  }
  arg1 = reinterpret_cast< dai::Gibbs * >(argp1);
  result = (dai::Gibbs::Properties *)& ((arg1)->props);
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dai__Gibbs__Properties, 0 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static octave_value_list _wrap_new_Gibbs__SWIG_0 (const octave_value_list& args, int nargout) {
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::Gibbs *result = 0 ;
  
  if (!SWIG_check_num_args("new_Gibbs",args.length(),0,0,0)) {
    SWIG_fail;
  }
  result = (dai::Gibbs *)new dai::Gibbs();
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dai__Gibbs, 1 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static octave_value_list _wrap_new_Gibbs__SWIG_1 (const octave_value_list& args, int nargout) {
  dai::FactorGraph *arg1 = 0 ;
  dai::PropertySet *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::Gibbs *result = 0 ;
  
  if (!SWIG_check_num_args("new_Gibbs",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1, SWIGTYPE_p_dai__FactorGraph,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Gibbs" "', argument " "1"" of type '" "dai::FactorGraph const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Gibbs" "', argument " "1"" of type '" "dai::FactorGraph const &""'"); 
  }
  arg1 = reinterpret_cast< dai::FactorGraph * >(argp1);
  res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_dai__PropertySet,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_Gibbs" "', argument " "2"" of type '" "dai::PropertySet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Gibbs" "', argument " "2"" of type '" "dai::PropertySet const &""'"); 
  }
  arg2 = reinterpret_cast< dai::PropertySet * >(argp2);
  result = (dai::Gibbs *)new dai::Gibbs((dai::FactorGraph const &)*arg1,(dai::PropertySet const &)*arg2);
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dai__Gibbs, 1 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( new_Gibbs, _wrap_new_Gibbs, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[2]={
    octave_value_ref(args,0),octave_value_ref(args,1)
  };
  
  if (argc == 0) {
    return _wrap_new_Gibbs__SWIG_0(args, nargout);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dai__FactorGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_dai__PropertySet, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_Gibbs__SWIG_1(args, nargout);
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


SWIG_DEFUN( Gibbs_clone, _wrap_Gibbs_clone, std::string() ) {
  dai::Gibbs *arg1 = (dai::Gibbs *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::Gibbs *result = 0 ;
  
  if (!SWIG_check_num_args("Gibbs_clone",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__Gibbs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Gibbs_clone" "', argument " "1"" of type '" "dai::Gibbs const *""'"); 
  }
  arg1 = reinterpret_cast< dai::Gibbs * >(argp1);
  result = (dai::Gibbs *)((dai::Gibbs const *)arg1)->clone();
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dai__Gibbs, 0 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( Gibbs_construct, _wrap_Gibbs_construct, std::string() ) {
  dai::Gibbs *arg1 = (dai::Gibbs *) 0 ;
  dai::FactorGraph *arg2 = 0 ;
  dai::PropertySet *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::Gibbs *result = 0 ;
  
  if (!SWIG_check_num_args("Gibbs_construct",args.length(),3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__Gibbs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Gibbs_construct" "', argument " "1"" of type '" "dai::Gibbs const *""'"); 
  }
  arg1 = reinterpret_cast< dai::Gibbs * >(argp1);
  res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_dai__FactorGraph,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Gibbs_construct" "', argument " "2"" of type '" "dai::FactorGraph const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Gibbs_construct" "', argument " "2"" of type '" "dai::FactorGraph const &""'"); 
  }
  arg2 = reinterpret_cast< dai::FactorGraph * >(argp2);
  res3 = SWIG_ConvertPtr(args(2), &argp3, SWIGTYPE_p_dai__PropertySet,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Gibbs_construct" "', argument " "3"" of type '" "dai::PropertySet const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Gibbs_construct" "', argument " "3"" of type '" "dai::PropertySet const &""'"); 
  }
  arg3 = reinterpret_cast< dai::PropertySet * >(argp3);
  result = (dai::Gibbs *)((dai::Gibbs const *)arg1)->construct((dai::FactorGraph const &)*arg2,(dai::PropertySet const &)*arg3);
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dai__Gibbs, 0 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( Gibbs_name, _wrap_Gibbs_name, std::string() ) {
  dai::Gibbs *arg1 = (dai::Gibbs *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  std::string result;
  
  if (!SWIG_check_num_args("Gibbs_name",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__Gibbs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Gibbs_name" "', argument " "1"" of type '" "dai::Gibbs const *""'"); 
  }
  arg1 = reinterpret_cast< dai::Gibbs * >(argp1);
  result = ((dai::Gibbs const *)arg1)->name();
  _outv = SWIG_From_std_string(static_cast< std::string >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static octave_value_list _wrap_Gibbs_belief__SWIG_0 (const octave_value_list& args, int nargout) {
  dai::Gibbs *arg1 = (dai::Gibbs *) 0 ;
  dai::Var *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::Factor result;
  
  if (!SWIG_check_num_args("Gibbs_belief",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__Gibbs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Gibbs_belief" "', argument " "1"" of type '" "dai::Gibbs const *""'"); 
  }
  arg1 = reinterpret_cast< dai::Gibbs * >(argp1);
  res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_dai__Var,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Gibbs_belief" "', argument " "2"" of type '" "dai::Var const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Gibbs_belief" "', argument " "2"" of type '" "dai::Var const &""'"); 
  }
  arg2 = reinterpret_cast< dai::Var * >(argp2);
  result = ((dai::Gibbs const *)arg1)->belief((dai::Var const &)*arg2);
  _outv = SWIG_NewPointerObj((new dai::Factor(static_cast< const dai::Factor& >(result))), SWIGTYPE_p_dai__TFactorT_double_t, SWIG_POINTER_OWN |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static octave_value_list _wrap_Gibbs_belief__SWIG_1 (const octave_value_list& args, int nargout) {
  dai::Gibbs *arg1 = (dai::Gibbs *) 0 ;
  dai::VarSet *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::Factor result;
  
  if (!SWIG_check_num_args("Gibbs_belief",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__Gibbs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Gibbs_belief" "', argument " "1"" of type '" "dai::Gibbs const *""'"); 
  }
  arg1 = reinterpret_cast< dai::Gibbs * >(argp1);
  res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_dai__VarSet,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Gibbs_belief" "', argument " "2"" of type '" "dai::VarSet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Gibbs_belief" "', argument " "2"" of type '" "dai::VarSet const &""'"); 
  }
  arg2 = reinterpret_cast< dai::VarSet * >(argp2);
  result = ((dai::Gibbs const *)arg1)->belief((dai::VarSet const &)*arg2);
  _outv = SWIG_NewPointerObj((new dai::Factor(static_cast< const dai::Factor& >(result))), SWIGTYPE_p_dai__TFactorT_double_t, SWIG_POINTER_OWN |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( Gibbs_belief, _wrap_Gibbs_belief, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[2]={
    octave_value_ref(args,0),octave_value_ref(args,1)
  };
  
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dai__Gibbs, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_dai__Var, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Gibbs_belief__SWIG_0(args, nargout);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dai__Gibbs, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_dai__VarSet, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Gibbs_belief__SWIG_1(args, nargout);
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


SWIG_DEFUN( Gibbs_beliefV, _wrap_Gibbs_beliefV, std::string() ) {
  dai::Gibbs *arg1 = (dai::Gibbs *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::Factor result;
  
  if (!SWIG_check_num_args("Gibbs_beliefV",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__Gibbs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Gibbs_beliefV" "', argument " "1"" of type '" "dai::Gibbs const *""'"); 
  }
  arg1 = reinterpret_cast< dai::Gibbs * >(argp1);
  ecode2 = SWIG_AsVal_size_t(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Gibbs_beliefV" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  result = ((dai::Gibbs const *)arg1)->beliefV(arg2);
  _outv = SWIG_NewPointerObj((new dai::Factor(static_cast< const dai::Factor& >(result))), SWIGTYPE_p_dai__TFactorT_double_t, SWIG_POINTER_OWN |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( Gibbs_beliefF, _wrap_Gibbs_beliefF, std::string() ) {
  dai::Gibbs *arg1 = (dai::Gibbs *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::Factor result;
  
  if (!SWIG_check_num_args("Gibbs_beliefF",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__Gibbs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Gibbs_beliefF" "', argument " "1"" of type '" "dai::Gibbs const *""'"); 
  }
  arg1 = reinterpret_cast< dai::Gibbs * >(argp1);
  ecode2 = SWIG_AsVal_size_t(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Gibbs_beliefF" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  result = ((dai::Gibbs const *)arg1)->beliefF(arg2);
  _outv = SWIG_NewPointerObj((new dai::Factor(static_cast< const dai::Factor& >(result))), SWIGTYPE_p_dai__TFactorT_double_t, SWIG_POINTER_OWN |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( Gibbs_beliefs, _wrap_Gibbs_beliefs, std::string() ) {
  dai::Gibbs *arg1 = (dai::Gibbs *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  std::vector< dai::Factor,std::allocator< dai::Factor > > result;
  
  if (!SWIG_check_num_args("Gibbs_beliefs",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__Gibbs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Gibbs_beliefs" "', argument " "1"" of type '" "dai::Gibbs const *""'"); 
  }
  arg1 = reinterpret_cast< dai::Gibbs * >(argp1);
  result = ((dai::Gibbs const *)arg1)->beliefs();
  _outv = swig::from(static_cast< std::vector< dai::TFactor< double >,std::allocator< dai::TFactor< double > > > >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( Gibbs_logZ, _wrap_Gibbs_logZ, std::string() ) {
  dai::Gibbs *arg1 = (dai::Gibbs *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::Real result;
  
  if (!SWIG_check_num_args("Gibbs_logZ",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__Gibbs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Gibbs_logZ" "', argument " "1"" of type '" "dai::Gibbs const *""'"); 
  }
  arg1 = reinterpret_cast< dai::Gibbs * >(argp1);
  result = (dai::Real)((dai::Gibbs const *)arg1)->logZ();
  _outv = SWIG_From_double(static_cast< double >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( Gibbs_findMaximum, _wrap_Gibbs_findMaximum, std::string() ) {
  dai::Gibbs *arg1 = (dai::Gibbs *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  std::vector< size_t,std::allocator< size_t > > result;
  
  if (!SWIG_check_num_args("Gibbs_findMaximum",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__Gibbs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Gibbs_findMaximum" "', argument " "1"" of type '" "dai::Gibbs const *""'"); 
  }
  arg1 = reinterpret_cast< dai::Gibbs * >(argp1);
  result = ((dai::Gibbs const *)arg1)->findMaximum();
  _outv = swig::from(static_cast< std::vector< size_t,std::allocator< size_t > > >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static octave_value_list _wrap_Gibbs_init__SWIG_0 (const octave_value_list& args, int nargout) {
  dai::Gibbs *arg1 = (dai::Gibbs *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("Gibbs_init",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__Gibbs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Gibbs_init" "', argument " "1"" of type '" "dai::Gibbs *""'"); 
  }
  arg1 = reinterpret_cast< dai::Gibbs * >(argp1);
  (arg1)->init();
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static octave_value_list _wrap_Gibbs_init__SWIG_1 (const octave_value_list& args, int nargout) {
  dai::Gibbs *arg1 = (dai::Gibbs *) 0 ;
  dai::VarSet *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("Gibbs_init",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__Gibbs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Gibbs_init" "', argument " "1"" of type '" "dai::Gibbs *""'"); 
  }
  arg1 = reinterpret_cast< dai::Gibbs * >(argp1);
  res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_dai__VarSet,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Gibbs_init" "', argument " "2"" of type '" "dai::VarSet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Gibbs_init" "', argument " "2"" of type '" "dai::VarSet const &""'"); 
  }
  arg2 = reinterpret_cast< dai::VarSet * >(argp2);
  (arg1)->init((dai::VarSet const &)*arg2);
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( Gibbs_init, _wrap_Gibbs_init, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[2]={
    octave_value_ref(args,0),octave_value_ref(args,1)
  };
  
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dai__Gibbs, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Gibbs_init__SWIG_0(args, nargout);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dai__Gibbs, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_dai__VarSet, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Gibbs_init__SWIG_1(args, nargout);
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


SWIG_DEFUN( Gibbs_run, _wrap_Gibbs_run, std::string() ) {
  dai::Gibbs *arg1 = (dai::Gibbs *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::Real result;
  
  if (!SWIG_check_num_args("Gibbs_run",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__Gibbs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Gibbs_run" "', argument " "1"" of type '" "dai::Gibbs *""'"); 
  }
  arg1 = reinterpret_cast< dai::Gibbs * >(argp1);
  result = (dai::Real)(arg1)->run();
  _outv = SWIG_From_double(static_cast< double >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( Gibbs_maxDiff, _wrap_Gibbs_maxDiff, std::string() ) {
  dai::Gibbs *arg1 = (dai::Gibbs *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::Real result;
  
  if (!SWIG_check_num_args("Gibbs_maxDiff",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__Gibbs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Gibbs_maxDiff" "', argument " "1"" of type '" "dai::Gibbs const *""'"); 
  }
  arg1 = reinterpret_cast< dai::Gibbs * >(argp1);
  result = (dai::Real)((dai::Gibbs const *)arg1)->maxDiff();
  _outv = SWIG_From_double(static_cast< double >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( Gibbs_Iterations, _wrap_Gibbs_Iterations, std::string() ) {
  dai::Gibbs *arg1 = (dai::Gibbs *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  size_t result;
  
  if (!SWIG_check_num_args("Gibbs_Iterations",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__Gibbs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Gibbs_Iterations" "', argument " "1"" of type '" "dai::Gibbs const *""'"); 
  }
  arg1 = reinterpret_cast< dai::Gibbs * >(argp1);
  result = ((dai::Gibbs const *)arg1)->Iterations();
  _outv = SWIG_From_size_t(static_cast< size_t >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( Gibbs_setMaxIter, _wrap_Gibbs_setMaxIter, std::string() ) {
  dai::Gibbs *arg1 = (dai::Gibbs *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("Gibbs_setMaxIter",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__Gibbs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Gibbs_setMaxIter" "', argument " "1"" of type '" "dai::Gibbs *""'"); 
  }
  arg1 = reinterpret_cast< dai::Gibbs * >(argp1);
  ecode2 = SWIG_AsVal_size_t(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Gibbs_setMaxIter" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  (arg1)->setMaxIter(arg2);
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( Gibbs_setProperties, _wrap_Gibbs_setProperties, std::string() ) {
  dai::Gibbs *arg1 = (dai::Gibbs *) 0 ;
  dai::PropertySet *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("Gibbs_setProperties",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__Gibbs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Gibbs_setProperties" "', argument " "1"" of type '" "dai::Gibbs *""'"); 
  }
  arg1 = reinterpret_cast< dai::Gibbs * >(argp1);
  res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_dai__PropertySet,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Gibbs_setProperties" "', argument " "2"" of type '" "dai::PropertySet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Gibbs_setProperties" "', argument " "2"" of type '" "dai::PropertySet const &""'"); 
  }
  arg2 = reinterpret_cast< dai::PropertySet * >(argp2);
  (arg1)->setProperties((dai::PropertySet const &)*arg2);
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( Gibbs_getProperties, _wrap_Gibbs_getProperties, std::string() ) {
  dai::Gibbs *arg1 = (dai::Gibbs *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::PropertySet result;
  
  if (!SWIG_check_num_args("Gibbs_getProperties",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__Gibbs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Gibbs_getProperties" "', argument " "1"" of type '" "dai::Gibbs const *""'"); 
  }
  arg1 = reinterpret_cast< dai::Gibbs * >(argp1);
  result = ((dai::Gibbs const *)arg1)->getProperties();
  _outv = SWIG_NewPointerObj((new dai::PropertySet(static_cast< const dai::PropertySet& >(result))), SWIGTYPE_p_dai__PropertySet, SWIG_POINTER_OWN |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( Gibbs_printProperties, _wrap_Gibbs_printProperties, std::string() ) {
  dai::Gibbs *arg1 = (dai::Gibbs *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  std::string result;
  
  if (!SWIG_check_num_args("Gibbs_printProperties",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__Gibbs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Gibbs_printProperties" "', argument " "1"" of type '" "dai::Gibbs const *""'"); 
  }
  arg1 = reinterpret_cast< dai::Gibbs * >(argp1);
  result = ((dai::Gibbs const *)arg1)->printProperties();
  _outv = SWIG_From_std_string(static_cast< std::string >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( Gibbs_randomizeState, _wrap_Gibbs_randomizeState, std::string() ) {
  dai::Gibbs *arg1 = (dai::Gibbs *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("Gibbs_randomizeState",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__Gibbs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Gibbs_randomizeState" "', argument " "1"" of type '" "dai::Gibbs *""'"); 
  }
  arg1 = reinterpret_cast< dai::Gibbs * >(argp1);
  (arg1)->randomizeState();
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static octave_value_list _wrap_Gibbs_state__SWIG_0 (const octave_value_list& args, int nargout) {
  dai::Gibbs *arg1 = (dai::Gibbs *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  std::vector< size_t,std::allocator< size_t > > *result = 0 ;
  
  if (!SWIG_check_num_args("Gibbs_state",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__Gibbs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Gibbs_state" "', argument " "1"" of type '" "dai::Gibbs *""'"); 
  }
  arg1 = reinterpret_cast< dai::Gibbs * >(argp1);
  result = (std::vector< size_t,std::allocator< size_t > > *) &(arg1)->state();
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_size_t_std__allocatorT_size_t_t_t, 0 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static octave_value_list _wrap_Gibbs_state__SWIG_1 (const octave_value_list& args, int nargout) {
  dai::Gibbs *arg1 = (dai::Gibbs *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  std::vector< size_t,std::allocator< size_t > > *result = 0 ;
  
  if (!SWIG_check_num_args("Gibbs_state",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__Gibbs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Gibbs_state" "', argument " "1"" of type '" "dai::Gibbs const *""'"); 
  }
  arg1 = reinterpret_cast< dai::Gibbs * >(argp1);
  result = (std::vector< size_t,std::allocator< size_t > > *) &((dai::Gibbs const *)arg1)->state();
  _outv = swig::from(static_cast< std::vector< size_t,std::allocator< size_t > > >(*result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( Gibbs_state, _wrap_Gibbs_state, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[1]={
    octave_value_ref(args,0)
  };
  
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dai__Gibbs, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Gibbs_state__SWIG_0(args, nargout);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dai__Gibbs, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Gibbs_state__SWIG_1(args, nargout);
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


SWIG_DEFUN( delete_Gibbs, _wrap_delete_Gibbs, std::string() ) {
  dai::Gibbs *arg1 = (dai::Gibbs *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("delete_Gibbs",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__Gibbs, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Gibbs" "', argument " "1"" of type '" "dai::Gibbs *""'"); 
  }
  arg1 = reinterpret_cast< dai::Gibbs * >(argp1);
  delete arg1;
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static swig_octave_member swig_Gibbs_members[] = {
{"props",0,_wrap_Gibbs_props_get,_wrap_Gibbs_props_set,0,0},
{"clone",_wrap_Gibbs_clone,0,0,0,0},
{"construct",_wrap_Gibbs_construct,0,0,0,0},
{"name",_wrap_Gibbs_name,0,0,0,0},
{"belief",_wrap_Gibbs_belief,0,0,0,0},
{"beliefV",_wrap_Gibbs_beliefV,0,0,0,0},
{"beliefF",_wrap_Gibbs_beliefF,0,0,0,0},
{"beliefs",_wrap_Gibbs_beliefs,0,0,0,0},
{"logZ",_wrap_Gibbs_logZ,0,0,0,0},
{"findMaximum",_wrap_Gibbs_findMaximum,0,0,0,0},
{"init",_wrap_Gibbs_init,0,0,0,0},
{"run",_wrap_Gibbs_run,0,0,0,0},
{"maxDiff",_wrap_Gibbs_maxDiff,0,0,0,0},
{"Iterations",_wrap_Gibbs_Iterations,0,0,0,0},
{"setMaxIter",_wrap_Gibbs_setMaxIter,0,0,0,0},
{"setProperties",_wrap_Gibbs_setProperties,0,0,0,0},
{"getProperties",_wrap_Gibbs_getProperties,0,0,0,0},
{"printProperties",_wrap_Gibbs_printProperties,0,0,0,0},
{"randomizeState",_wrap_Gibbs_randomizeState,0,0,0,0},
{"state",_wrap_Gibbs_state,0,0,0,0},
{0,0,0,0,0,0}
};
static const char *swig_Gibbs_base_names[] = {0};
static const swig_type_info *swig_Gibbs_base[] = {0};
static swig_octave_class _wrap_class_Gibbs = {"Gibbs", &SWIGTYPE_p_dai__Gibbs,0,_wrap_new_Gibbs,0,_wrap_delete_Gibbs,swig_Gibbs_members,swig_Gibbs_base_names,swig_Gibbs_base };

SWIG_DEFUN( getGibbsState, _wrap_getGibbsState, std::string() ) {
  dai::FactorGraph *arg1 = 0 ;
  size_t arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  std::vector< size_t,std::allocator< size_t > > result;
  
  if (!SWIG_check_num_args("getGibbsState",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1, SWIGTYPE_p_dai__FactorGraph,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "getGibbsState" "', argument " "1"" of type '" "dai::FactorGraph const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "getGibbsState" "', argument " "1"" of type '" "dai::FactorGraph const &""'"); 
  }
  arg1 = reinterpret_cast< dai::FactorGraph * >(argp1);
  ecode2 = SWIG_AsVal_size_t(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "getGibbsState" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  result = dai::getGibbsState((dai::FactorGraph const &)*arg1,arg2);
  _outv = swig::from(static_cast< std::vector< size_t,std::allocator< size_t > > >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static octave_value_list _wrap_new_CBP__SWIG_0 (const octave_value_list& args, int nargout) {
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::CBP *result = 0 ;
  
  if (!SWIG_check_num_args("new_CBP",args.length(),0,0,0)) {
    SWIG_fail;
  }
  result = (dai::CBP *)new dai::CBP();
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dai__CBP, 1 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static octave_value_list _wrap_new_CBP__SWIG_1 (const octave_value_list& args, int nargout) {
  dai::FactorGraph *arg1 = 0 ;
  dai::PropertySet *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::CBP *result = 0 ;
  
  if (!SWIG_check_num_args("new_CBP",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1, SWIGTYPE_p_dai__FactorGraph,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_CBP" "', argument " "1"" of type '" "dai::FactorGraph const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_CBP" "', argument " "1"" of type '" "dai::FactorGraph const &""'"); 
  }
  arg1 = reinterpret_cast< dai::FactorGraph * >(argp1);
  res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_dai__PropertySet,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_CBP" "', argument " "2"" of type '" "dai::PropertySet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_CBP" "', argument " "2"" of type '" "dai::PropertySet const &""'"); 
  }
  arg2 = reinterpret_cast< dai::PropertySet * >(argp2);
  result = (dai::CBP *)new dai::CBP((dai::FactorGraph const &)*arg1,(dai::PropertySet const &)*arg2);
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dai__CBP, 1 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( new_CBP, _wrap_new_CBP, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[2]={
    octave_value_ref(args,0),octave_value_ref(args,1)
  };
  
  if (argc == 0) {
    return _wrap_new_CBP__SWIG_0(args, nargout);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dai__FactorGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_dai__PropertySet, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_CBP__SWIG_1(args, nargout);
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


SWIG_DEFUN( CBP_clone, _wrap_CBP_clone, std::string() ) {
  dai::CBP *arg1 = (dai::CBP *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::CBP *result = 0 ;
  
  if (!SWIG_check_num_args("CBP_clone",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__CBP, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CBP_clone" "', argument " "1"" of type '" "dai::CBP const *""'"); 
  }
  arg1 = reinterpret_cast< dai::CBP * >(argp1);
  result = (dai::CBP *)((dai::CBP const *)arg1)->clone();
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dai__CBP, 0 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( CBP_construct, _wrap_CBP_construct, std::string() ) {
  dai::CBP *arg1 = (dai::CBP *) 0 ;
  dai::FactorGraph *arg2 = 0 ;
  dai::PropertySet *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::CBP *result = 0 ;
  
  if (!SWIG_check_num_args("CBP_construct",args.length(),3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__CBP, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CBP_construct" "', argument " "1"" of type '" "dai::CBP const *""'"); 
  }
  arg1 = reinterpret_cast< dai::CBP * >(argp1);
  res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_dai__FactorGraph,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CBP_construct" "', argument " "2"" of type '" "dai::FactorGraph const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CBP_construct" "', argument " "2"" of type '" "dai::FactorGraph const &""'"); 
  }
  arg2 = reinterpret_cast< dai::FactorGraph * >(argp2);
  res3 = SWIG_ConvertPtr(args(2), &argp3, SWIGTYPE_p_dai__PropertySet,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CBP_construct" "', argument " "3"" of type '" "dai::PropertySet const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CBP_construct" "', argument " "3"" of type '" "dai::PropertySet const &""'"); 
  }
  arg3 = reinterpret_cast< dai::PropertySet * >(argp3);
  result = (dai::CBP *)((dai::CBP const *)arg1)->construct((dai::FactorGraph const &)*arg2,(dai::PropertySet const &)*arg3);
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dai__CBP, 0 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( CBP_name, _wrap_CBP_name, std::string() ) {
  dai::CBP *arg1 = (dai::CBP *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  std::string result;
  
  if (!SWIG_check_num_args("CBP_name",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__CBP, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CBP_name" "', argument " "1"" of type '" "dai::CBP const *""'"); 
  }
  arg1 = reinterpret_cast< dai::CBP * >(argp1);
  result = ((dai::CBP const *)arg1)->name();
  _outv = SWIG_From_std_string(static_cast< std::string >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static octave_value_list _wrap_CBP_belief__SWIG_0 (const octave_value_list& args, int nargout) {
  dai::CBP *arg1 = (dai::CBP *) 0 ;
  dai::Var *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::Factor result;
  
  if (!SWIG_check_num_args("CBP_belief",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__CBP, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CBP_belief" "', argument " "1"" of type '" "dai::CBP const *""'"); 
  }
  arg1 = reinterpret_cast< dai::CBP * >(argp1);
  res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_dai__Var,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CBP_belief" "', argument " "2"" of type '" "dai::Var const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CBP_belief" "', argument " "2"" of type '" "dai::Var const &""'"); 
  }
  arg2 = reinterpret_cast< dai::Var * >(argp2);
  result = ((dai::CBP const *)arg1)->belief((dai::Var const &)*arg2);
  _outv = SWIG_NewPointerObj((new dai::Factor(static_cast< const dai::Factor& >(result))), SWIGTYPE_p_dai__TFactorT_double_t, SWIG_POINTER_OWN |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static octave_value_list _wrap_CBP_belief__SWIG_1 (const octave_value_list& args, int nargout) {
  dai::CBP *arg1 = (dai::CBP *) 0 ;
  dai::VarSet *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::Factor result;
  
  if (!SWIG_check_num_args("CBP_belief",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__CBP, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CBP_belief" "', argument " "1"" of type '" "dai::CBP const *""'"); 
  }
  arg1 = reinterpret_cast< dai::CBP * >(argp1);
  res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_dai__VarSet,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CBP_belief" "', argument " "2"" of type '" "dai::VarSet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CBP_belief" "', argument " "2"" of type '" "dai::VarSet const &""'"); 
  }
  arg2 = reinterpret_cast< dai::VarSet * >(argp2);
  result = ((dai::CBP const *)arg1)->belief((dai::VarSet const &)*arg2);
  _outv = SWIG_NewPointerObj((new dai::Factor(static_cast< const dai::Factor& >(result))), SWIGTYPE_p_dai__TFactorT_double_t, SWIG_POINTER_OWN |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( CBP_belief, _wrap_CBP_belief, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[2]={
    octave_value_ref(args,0),octave_value_ref(args,1)
  };
  
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dai__CBP, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_dai__Var, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_CBP_belief__SWIG_0(args, nargout);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dai__CBP, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_dai__VarSet, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_CBP_belief__SWIG_1(args, nargout);
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


SWIG_DEFUN( CBP_beliefV, _wrap_CBP_beliefV, std::string() ) {
  dai::CBP *arg1 = (dai::CBP *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::Factor result;
  
  if (!SWIG_check_num_args("CBP_beliefV",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__CBP, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CBP_beliefV" "', argument " "1"" of type '" "dai::CBP const *""'"); 
  }
  arg1 = reinterpret_cast< dai::CBP * >(argp1);
  ecode2 = SWIG_AsVal_size_t(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CBP_beliefV" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  result = ((dai::CBP const *)arg1)->beliefV(arg2);
  _outv = SWIG_NewPointerObj((new dai::Factor(static_cast< const dai::Factor& >(result))), SWIGTYPE_p_dai__TFactorT_double_t, SWIG_POINTER_OWN |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( CBP_beliefF, _wrap_CBP_beliefF, std::string() ) {
  dai::CBP *arg1 = (dai::CBP *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::Factor result;
  
  if (!SWIG_check_num_args("CBP_beliefF",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__CBP, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CBP_beliefF" "', argument " "1"" of type '" "dai::CBP const *""'"); 
  }
  arg1 = reinterpret_cast< dai::CBP * >(argp1);
  ecode2 = SWIG_AsVal_size_t(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CBP_beliefF" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  result = ((dai::CBP const *)arg1)->beliefF(arg2);
  _outv = SWIG_NewPointerObj((new dai::Factor(static_cast< const dai::Factor& >(result))), SWIGTYPE_p_dai__TFactorT_double_t, SWIG_POINTER_OWN |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( CBP_beliefs, _wrap_CBP_beliefs, std::string() ) {
  dai::CBP *arg1 = (dai::CBP *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  std::vector< dai::Factor,std::allocator< dai::Factor > > result;
  
  if (!SWIG_check_num_args("CBP_beliefs",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__CBP, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CBP_beliefs" "', argument " "1"" of type '" "dai::CBP const *""'"); 
  }
  arg1 = reinterpret_cast< dai::CBP * >(argp1);
  result = ((dai::CBP const *)arg1)->beliefs();
  _outv = swig::from(static_cast< std::vector< dai::TFactor< double >,std::allocator< dai::TFactor< double > > > >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( CBP_logZ, _wrap_CBP_logZ, std::string() ) {
  dai::CBP *arg1 = (dai::CBP *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::Real result;
  
  if (!SWIG_check_num_args("CBP_logZ",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__CBP, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CBP_logZ" "', argument " "1"" of type '" "dai::CBP const *""'"); 
  }
  arg1 = reinterpret_cast< dai::CBP * >(argp1);
  result = (dai::Real)((dai::CBP const *)arg1)->logZ();
  _outv = SWIG_From_double(static_cast< double >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static octave_value_list _wrap_CBP_init__SWIG_0 (const octave_value_list& args, int nargout) {
  dai::CBP *arg1 = (dai::CBP *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("CBP_init",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__CBP, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CBP_init" "', argument " "1"" of type '" "dai::CBP *""'"); 
  }
  arg1 = reinterpret_cast< dai::CBP * >(argp1);
  (arg1)->init();
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static octave_value_list _wrap_CBP_init__SWIG_1 (const octave_value_list& args, int nargout) {
  dai::CBP *arg1 = (dai::CBP *) 0 ;
  dai::VarSet *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("CBP_init",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__CBP, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CBP_init" "', argument " "1"" of type '" "dai::CBP *""'"); 
  }
  arg1 = reinterpret_cast< dai::CBP * >(argp1);
  res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_dai__VarSet,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CBP_init" "', argument " "2"" of type '" "dai::VarSet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CBP_init" "', argument " "2"" of type '" "dai::VarSet const &""'"); 
  }
  arg2 = reinterpret_cast< dai::VarSet * >(argp2);
  (arg1)->init((dai::VarSet const &)*arg2);
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( CBP_init, _wrap_CBP_init, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[2]={
    octave_value_ref(args,0),octave_value_ref(args,1)
  };
  
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dai__CBP, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_CBP_init__SWIG_0(args, nargout);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dai__CBP, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_dai__VarSet, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_CBP_init__SWIG_1(args, nargout);
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


SWIG_DEFUN( CBP_run, _wrap_CBP_run, std::string() ) {
  dai::CBP *arg1 = (dai::CBP *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::Real result;
  
  if (!SWIG_check_num_args("CBP_run",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__CBP, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CBP_run" "', argument " "1"" of type '" "dai::CBP *""'"); 
  }
  arg1 = reinterpret_cast< dai::CBP * >(argp1);
  result = (dai::Real)(arg1)->run();
  _outv = SWIG_From_double(static_cast< double >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( CBP_maxDiff, _wrap_CBP_maxDiff, std::string() ) {
  dai::CBP *arg1 = (dai::CBP *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::Real result;
  
  if (!SWIG_check_num_args("CBP_maxDiff",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__CBP, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CBP_maxDiff" "', argument " "1"" of type '" "dai::CBP const *""'"); 
  }
  arg1 = reinterpret_cast< dai::CBP * >(argp1);
  result = (dai::Real)((dai::CBP const *)arg1)->maxDiff();
  _outv = SWIG_From_double(static_cast< double >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( CBP_Iterations, _wrap_CBP_Iterations, std::string() ) {
  dai::CBP *arg1 = (dai::CBP *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  size_t result;
  
  if (!SWIG_check_num_args("CBP_Iterations",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__CBP, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CBP_Iterations" "', argument " "1"" of type '" "dai::CBP const *""'"); 
  }
  arg1 = reinterpret_cast< dai::CBP * >(argp1);
  result = ((dai::CBP const *)arg1)->Iterations();
  _outv = SWIG_From_size_t(static_cast< size_t >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( CBP_setMaxIter, _wrap_CBP_setMaxIter, std::string() ) {
  dai::CBP *arg1 = (dai::CBP *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("CBP_setMaxIter",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__CBP, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CBP_setMaxIter" "', argument " "1"" of type '" "dai::CBP *""'"); 
  }
  arg1 = reinterpret_cast< dai::CBP * >(argp1);
  ecode2 = SWIG_AsVal_size_t(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CBP_setMaxIter" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  (arg1)->setMaxIter(arg2);
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( CBP_setProperties, _wrap_CBP_setProperties, std::string() ) {
  dai::CBP *arg1 = (dai::CBP *) 0 ;
  dai::PropertySet *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("CBP_setProperties",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__CBP, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CBP_setProperties" "', argument " "1"" of type '" "dai::CBP *""'"); 
  }
  arg1 = reinterpret_cast< dai::CBP * >(argp1);
  res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_dai__PropertySet,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CBP_setProperties" "', argument " "2"" of type '" "dai::PropertySet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CBP_setProperties" "', argument " "2"" of type '" "dai::PropertySet const &""'"); 
  }
  arg2 = reinterpret_cast< dai::PropertySet * >(argp2);
  (arg1)->setProperties((dai::PropertySet const &)*arg2);
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( CBP_getProperties, _wrap_CBP_getProperties, std::string() ) {
  dai::CBP *arg1 = (dai::CBP *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::PropertySet result;
  
  if (!SWIG_check_num_args("CBP_getProperties",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__CBP, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CBP_getProperties" "', argument " "1"" of type '" "dai::CBP const *""'"); 
  }
  arg1 = reinterpret_cast< dai::CBP * >(argp1);
  result = ((dai::CBP const *)arg1)->getProperties();
  _outv = SWIG_NewPointerObj((new dai::PropertySet(static_cast< const dai::PropertySet& >(result))), SWIGTYPE_p_dai__PropertySet, SWIG_POINTER_OWN |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( CBP_printProperties, _wrap_CBP_printProperties, std::string() ) {
  dai::CBP *arg1 = (dai::CBP *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  std::string result;
  
  if (!SWIG_check_num_args("CBP_printProperties",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__CBP, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CBP_printProperties" "', argument " "1"" of type '" "dai::CBP const *""'"); 
  }
  arg1 = reinterpret_cast< dai::CBP * >(argp1);
  result = ((dai::CBP const *)arg1)->printProperties();
  _outv = SWIG_From_std_string(static_cast< std::string >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( CBP_props_set, _wrap_CBP_props_set, std::string() ) {
  dai::CBP *arg1 = (dai::CBP *) 0 ;
  dai::CBP::Properties *arg2 = (dai::CBP::Properties *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("CBP_props_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__CBP, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CBP_props_set" "', argument " "1"" of type '" "dai::CBP *""'"); 
  }
  arg1 = reinterpret_cast< dai::CBP * >(argp1);
  res2 = SWIG_ConvertPtr(args(1), &argp2,SWIGTYPE_p_dai__CBP__Properties, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CBP_props_set" "', argument " "2"" of type '" "dai::CBP::Properties *""'"); 
  }
  arg2 = reinterpret_cast< dai::CBP::Properties * >(argp2);
  if (arg1) (arg1)->props = *arg2;
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( CBP_props_get, _wrap_CBP_props_get, std::string() ) {
  dai::CBP *arg1 = (dai::CBP *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::CBP::Properties *result = 0 ;
  
  if (!SWIG_check_num_args("CBP_props_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__CBP, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CBP_props_get" "', argument " "1"" of type '" "dai::CBP *""'"); 
  }
  arg1 = reinterpret_cast< dai::CBP * >(argp1);
  result = (dai::CBP::Properties *)& ((arg1)->props);
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dai__CBP__Properties, 0 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( delete_CBP, _wrap_delete_CBP, std::string() ) {
  dai::CBP *arg1 = (dai::CBP *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("delete_CBP",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__CBP, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_CBP" "', argument " "1"" of type '" "dai::CBP *""'"); 
  }
  arg1 = reinterpret_cast< dai::CBP * >(argp1);
  delete arg1;
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static swig_octave_member swig_CBP_members[] = {
{"clone",_wrap_CBP_clone,0,0,0,0},
{"construct",_wrap_CBP_construct,0,0,0,0},
{"name",_wrap_CBP_name,0,0,0,0},
{"belief",_wrap_CBP_belief,0,0,0,0},
{"beliefV",_wrap_CBP_beliefV,0,0,0,0},
{"beliefF",_wrap_CBP_beliefF,0,0,0,0},
{"beliefs",_wrap_CBP_beliefs,0,0,0,0},
{"logZ",_wrap_CBP_logZ,0,0,0,0},
{"init",_wrap_CBP_init,0,0,0,0},
{"run",_wrap_CBP_run,0,0,0,0},
{"maxDiff",_wrap_CBP_maxDiff,0,0,0,0},
{"Iterations",_wrap_CBP_Iterations,0,0,0,0},
{"setMaxIter",_wrap_CBP_setMaxIter,0,0,0,0},
{"setProperties",_wrap_CBP_setProperties,0,0,0,0},
{"getProperties",_wrap_CBP_getProperties,0,0,0,0},
{"printProperties",_wrap_CBP_printProperties,0,0,0,0},
{"props",0,_wrap_CBP_props_get,_wrap_CBP_props_set,0,0},
{0,0,0,0,0,0}
};
static const char *swig_CBP_base_names[] = {0};
static const swig_type_info *swig_CBP_base[] = {0};
static swig_octave_class _wrap_class_CBP = {"CBP", &SWIGTYPE_p_dai__CBP,0,_wrap_new_CBP,0,_wrap_delete_CBP,swig_CBP_members,swig_CBP_base_names,swig_CBP_base };

SWIG_DEFUN( BBPFindClampVar, _wrap_BBPFindClampVar, std::string() ) {
  dai::InfAlg *arg1 = 0 ;
  bool arg2 ;
  dai::PropertySet *arg3 = 0 ;
  BBPCostFunction *arg4 = 0 ;
  dai::Real *arg5 = (dai::Real *) 0 ;
  void *argp1 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  SwigValueWrapper< std::pair< size_t,size_t > > result;
  
  if (!SWIG_check_num_args("BBPFindClampVar",args.length(),5,5,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1, SWIGTYPE_p_dai__InfAlg,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BBPFindClampVar" "', argument " "1"" of type '" "dai::InfAlg const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BBPFindClampVar" "', argument " "1"" of type '" "dai::InfAlg const &""'"); 
  }
  arg1 = reinterpret_cast< dai::InfAlg * >(argp1);
  ecode2 = SWIG_AsVal_bool(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BBPFindClampVar" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  res3 = SWIG_ConvertPtr(args(2), &argp3, SWIGTYPE_p_dai__PropertySet,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "BBPFindClampVar" "', argument " "3"" of type '" "dai::PropertySet const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BBPFindClampVar" "', argument " "3"" of type '" "dai::PropertySet const &""'"); 
  }
  arg3 = reinterpret_cast< dai::PropertySet * >(argp3);
  res4 = SWIG_ConvertPtr(args(3), &argp4, SWIGTYPE_p_BBPCostFunction,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "BBPFindClampVar" "', argument " "4"" of type '" "BBPCostFunction const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BBPFindClampVar" "', argument " "4"" of type '" "BBPCostFunction const &""'"); 
  }
  arg4 = reinterpret_cast< BBPCostFunction * >(argp4);
  res5 = SWIG_ConvertPtr(args(4), &argp5,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "BBPFindClampVar" "', argument " "5"" of type '" "dai::Real *""'"); 
  }
  arg5 = reinterpret_cast< dai::Real * >(argp5);
  result = dai::BBPFindClampVar((dai::InfAlg const &)*arg1,arg2,(dai::PropertySet const &)*arg3,(BBPCostFunction const &)*arg4,arg5);
  _outv = SWIG_NewPointerObj((new std::pair< size_t,size_t >(static_cast< const std::pair< size_t,size_t >& >(result))), SWIGTYPE_p_std__pairT_size_t_size_t_t, SWIG_POINTER_OWN |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( DecMAP_props_set, _wrap_DecMAP_props_set, std::string() ) {
  dai::DecMAP *arg1 = (dai::DecMAP *) 0 ;
  dai::DecMAP::Properties *arg2 = (dai::DecMAP::Properties *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("DecMAP_props_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__DecMAP, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DecMAP_props_set" "', argument " "1"" of type '" "dai::DecMAP *""'"); 
  }
  arg1 = reinterpret_cast< dai::DecMAP * >(argp1);
  res2 = SWIG_ConvertPtr(args(1), &argp2,SWIGTYPE_p_dai__DecMAP__Properties, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DecMAP_props_set" "', argument " "2"" of type '" "dai::DecMAP::Properties *""'"); 
  }
  arg2 = reinterpret_cast< dai::DecMAP::Properties * >(argp2);
  if (arg1) (arg1)->props = *arg2;
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( DecMAP_props_get, _wrap_DecMAP_props_get, std::string() ) {
  dai::DecMAP *arg1 = (dai::DecMAP *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::DecMAP::Properties *result = 0 ;
  
  if (!SWIG_check_num_args("DecMAP_props_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__DecMAP, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DecMAP_props_get" "', argument " "1"" of type '" "dai::DecMAP *""'"); 
  }
  arg1 = reinterpret_cast< dai::DecMAP * >(argp1);
  result = (dai::DecMAP::Properties *)& ((arg1)->props);
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dai__DecMAP__Properties, 0 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static octave_value_list _wrap_new_DecMAP__SWIG_0 (const octave_value_list& args, int nargout) {
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::DecMAP *result = 0 ;
  
  if (!SWIG_check_num_args("new_DecMAP",args.length(),0,0,0)) {
    SWIG_fail;
  }
  result = (dai::DecMAP *)new dai::DecMAP();
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dai__DecMAP, 1 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static octave_value_list _wrap_new_DecMAP__SWIG_1 (const octave_value_list& args, int nargout) {
  dai::FactorGraph *arg1 = 0 ;
  dai::PropertySet *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::DecMAP *result = 0 ;
  
  if (!SWIG_check_num_args("new_DecMAP",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1, SWIGTYPE_p_dai__FactorGraph,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_DecMAP" "', argument " "1"" of type '" "dai::FactorGraph const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_DecMAP" "', argument " "1"" of type '" "dai::FactorGraph const &""'"); 
  }
  arg1 = reinterpret_cast< dai::FactorGraph * >(argp1);
  res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_dai__PropertySet,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_DecMAP" "', argument " "2"" of type '" "dai::PropertySet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_DecMAP" "', argument " "2"" of type '" "dai::PropertySet const &""'"); 
  }
  arg2 = reinterpret_cast< dai::PropertySet * >(argp2);
  result = (dai::DecMAP *)new dai::DecMAP((dai::FactorGraph const &)*arg1,(dai::PropertySet const &)*arg2);
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dai__DecMAP, 1 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( new_DecMAP, _wrap_new_DecMAP, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[2]={
    octave_value_ref(args,0),octave_value_ref(args,1)
  };
  
  if (argc == 0) {
    return _wrap_new_DecMAP__SWIG_0(args, nargout);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dai__FactorGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_dai__PropertySet, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_DecMAP__SWIG_1(args, nargout);
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


SWIG_DEFUN( DecMAP_clone, _wrap_DecMAP_clone, std::string() ) {
  dai::DecMAP *arg1 = (dai::DecMAP *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::DecMAP *result = 0 ;
  
  if (!SWIG_check_num_args("DecMAP_clone",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__DecMAP, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DecMAP_clone" "', argument " "1"" of type '" "dai::DecMAP const *""'"); 
  }
  arg1 = reinterpret_cast< dai::DecMAP * >(argp1);
  result = (dai::DecMAP *)((dai::DecMAP const *)arg1)->clone();
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dai__DecMAP, 0 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( DecMAP_construct, _wrap_DecMAP_construct, std::string() ) {
  dai::DecMAP *arg1 = (dai::DecMAP *) 0 ;
  dai::FactorGraph *arg2 = 0 ;
  dai::PropertySet *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::DecMAP *result = 0 ;
  
  if (!SWIG_check_num_args("DecMAP_construct",args.length(),3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__DecMAP, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DecMAP_construct" "', argument " "1"" of type '" "dai::DecMAP const *""'"); 
  }
  arg1 = reinterpret_cast< dai::DecMAP * >(argp1);
  res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_dai__FactorGraph,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DecMAP_construct" "', argument " "2"" of type '" "dai::FactorGraph const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DecMAP_construct" "', argument " "2"" of type '" "dai::FactorGraph const &""'"); 
  }
  arg2 = reinterpret_cast< dai::FactorGraph * >(argp2);
  res3 = SWIG_ConvertPtr(args(2), &argp3, SWIGTYPE_p_dai__PropertySet,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DecMAP_construct" "', argument " "3"" of type '" "dai::PropertySet const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DecMAP_construct" "', argument " "3"" of type '" "dai::PropertySet const &""'"); 
  }
  arg3 = reinterpret_cast< dai::PropertySet * >(argp3);
  result = (dai::DecMAP *)((dai::DecMAP const *)arg1)->construct((dai::FactorGraph const &)*arg2,(dai::PropertySet const &)*arg3);
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dai__DecMAP, 0 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( DecMAP_name, _wrap_DecMAP_name, std::string() ) {
  dai::DecMAP *arg1 = (dai::DecMAP *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  std::string result;
  
  if (!SWIG_check_num_args("DecMAP_name",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__DecMAP, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DecMAP_name" "', argument " "1"" of type '" "dai::DecMAP const *""'"); 
  }
  arg1 = reinterpret_cast< dai::DecMAP * >(argp1);
  result = ((dai::DecMAP const *)arg1)->name();
  _outv = SWIG_From_std_string(static_cast< std::string >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static octave_value_list _wrap_DecMAP_belief__SWIG_0 (const octave_value_list& args, int nargout) {
  dai::DecMAP *arg1 = (dai::DecMAP *) 0 ;
  dai::Var *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::Factor result;
  
  if (!SWIG_check_num_args("DecMAP_belief",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__DecMAP, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DecMAP_belief" "', argument " "1"" of type '" "dai::DecMAP const *""'"); 
  }
  arg1 = reinterpret_cast< dai::DecMAP * >(argp1);
  res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_dai__Var,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DecMAP_belief" "', argument " "2"" of type '" "dai::Var const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DecMAP_belief" "', argument " "2"" of type '" "dai::Var const &""'"); 
  }
  arg2 = reinterpret_cast< dai::Var * >(argp2);
  result = ((dai::DecMAP const *)arg1)->belief((dai::Var const &)*arg2);
  _outv = SWIG_NewPointerObj((new dai::Factor(static_cast< const dai::Factor& >(result))), SWIGTYPE_p_dai__TFactorT_double_t, SWIG_POINTER_OWN |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static octave_value_list _wrap_DecMAP_belief__SWIG_1 (const octave_value_list& args, int nargout) {
  dai::DecMAP *arg1 = (dai::DecMAP *) 0 ;
  dai::VarSet *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::Factor result;
  
  if (!SWIG_check_num_args("DecMAP_belief",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__DecMAP, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DecMAP_belief" "', argument " "1"" of type '" "dai::DecMAP const *""'"); 
  }
  arg1 = reinterpret_cast< dai::DecMAP * >(argp1);
  res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_dai__VarSet,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DecMAP_belief" "', argument " "2"" of type '" "dai::VarSet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DecMAP_belief" "', argument " "2"" of type '" "dai::VarSet const &""'"); 
  }
  arg2 = reinterpret_cast< dai::VarSet * >(argp2);
  result = ((dai::DecMAP const *)arg1)->belief((dai::VarSet const &)*arg2);
  _outv = SWIG_NewPointerObj((new dai::Factor(static_cast< const dai::Factor& >(result))), SWIGTYPE_p_dai__TFactorT_double_t, SWIG_POINTER_OWN |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( DecMAP_belief, _wrap_DecMAP_belief, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[2]={
    octave_value_ref(args,0),octave_value_ref(args,1)
  };
  
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dai__DecMAP, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_dai__Var, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_DecMAP_belief__SWIG_0(args, nargout);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dai__DecMAP, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_dai__VarSet, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_DecMAP_belief__SWIG_1(args, nargout);
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


SWIG_DEFUN( DecMAP_beliefV, _wrap_DecMAP_beliefV, std::string() ) {
  dai::DecMAP *arg1 = (dai::DecMAP *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::Factor result;
  
  if (!SWIG_check_num_args("DecMAP_beliefV",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__DecMAP, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DecMAP_beliefV" "', argument " "1"" of type '" "dai::DecMAP const *""'"); 
  }
  arg1 = reinterpret_cast< dai::DecMAP * >(argp1);
  ecode2 = SWIG_AsVal_size_t(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DecMAP_beliefV" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  result = ((dai::DecMAP const *)arg1)->beliefV(arg2);
  _outv = SWIG_NewPointerObj((new dai::Factor(static_cast< const dai::Factor& >(result))), SWIGTYPE_p_dai__TFactorT_double_t, SWIG_POINTER_OWN |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( DecMAP_beliefF, _wrap_DecMAP_beliefF, std::string() ) {
  dai::DecMAP *arg1 = (dai::DecMAP *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::Factor result;
  
  if (!SWIG_check_num_args("DecMAP_beliefF",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__DecMAP, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DecMAP_beliefF" "', argument " "1"" of type '" "dai::DecMAP const *""'"); 
  }
  arg1 = reinterpret_cast< dai::DecMAP * >(argp1);
  ecode2 = SWIG_AsVal_size_t(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DecMAP_beliefF" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  result = ((dai::DecMAP const *)arg1)->beliefF(arg2);
  _outv = SWIG_NewPointerObj((new dai::Factor(static_cast< const dai::Factor& >(result))), SWIGTYPE_p_dai__TFactorT_double_t, SWIG_POINTER_OWN |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( DecMAP_beliefs, _wrap_DecMAP_beliefs, std::string() ) {
  dai::DecMAP *arg1 = (dai::DecMAP *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  std::vector< dai::Factor,std::allocator< dai::Factor > > result;
  
  if (!SWIG_check_num_args("DecMAP_beliefs",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__DecMAP, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DecMAP_beliefs" "', argument " "1"" of type '" "dai::DecMAP const *""'"); 
  }
  arg1 = reinterpret_cast< dai::DecMAP * >(argp1);
  result = ((dai::DecMAP const *)arg1)->beliefs();
  _outv = swig::from(static_cast< std::vector< dai::TFactor< double >,std::allocator< dai::TFactor< double > > > >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( DecMAP_logZ, _wrap_DecMAP_logZ, std::string() ) {
  dai::DecMAP *arg1 = (dai::DecMAP *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::Real result;
  
  if (!SWIG_check_num_args("DecMAP_logZ",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__DecMAP, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DecMAP_logZ" "', argument " "1"" of type '" "dai::DecMAP const *""'"); 
  }
  arg1 = reinterpret_cast< dai::DecMAP * >(argp1);
  result = (dai::Real)((dai::DecMAP const *)arg1)->logZ();
  _outv = SWIG_From_double(static_cast< double >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( DecMAP_findMaximum, _wrap_DecMAP_findMaximum, std::string() ) {
  dai::DecMAP *arg1 = (dai::DecMAP *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  std::vector< size_t,std::allocator< size_t > > result;
  
  if (!SWIG_check_num_args("DecMAP_findMaximum",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__DecMAP, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DecMAP_findMaximum" "', argument " "1"" of type '" "dai::DecMAP const *""'"); 
  }
  arg1 = reinterpret_cast< dai::DecMAP * >(argp1);
  result = ((dai::DecMAP const *)arg1)->findMaximum();
  _outv = swig::from(static_cast< std::vector< size_t,std::allocator< size_t > > >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static octave_value_list _wrap_DecMAP_init__SWIG_0 (const octave_value_list& args, int nargout) {
  dai::DecMAP *arg1 = (dai::DecMAP *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("DecMAP_init",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__DecMAP, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DecMAP_init" "', argument " "1"" of type '" "dai::DecMAP *""'"); 
  }
  arg1 = reinterpret_cast< dai::DecMAP * >(argp1);
  (arg1)->init();
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static octave_value_list _wrap_DecMAP_init__SWIG_1 (const octave_value_list& args, int nargout) {
  dai::DecMAP *arg1 = (dai::DecMAP *) 0 ;
  dai::VarSet *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("DecMAP_init",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__DecMAP, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DecMAP_init" "', argument " "1"" of type '" "dai::DecMAP *""'"); 
  }
  arg1 = reinterpret_cast< dai::DecMAP * >(argp1);
  res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_dai__VarSet,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DecMAP_init" "', argument " "2"" of type '" "dai::VarSet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DecMAP_init" "', argument " "2"" of type '" "dai::VarSet const &""'"); 
  }
  arg2 = reinterpret_cast< dai::VarSet * >(argp2);
  (arg1)->init((dai::VarSet const &)*arg2);
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( DecMAP_init, _wrap_DecMAP_init, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[2]={
    octave_value_ref(args,0),octave_value_ref(args,1)
  };
  
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dai__DecMAP, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_DecMAP_init__SWIG_0(args, nargout);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dai__DecMAP, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_dai__VarSet, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_DecMAP_init__SWIG_1(args, nargout);
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


SWIG_DEFUN( DecMAP_run, _wrap_DecMAP_run, std::string() ) {
  dai::DecMAP *arg1 = (dai::DecMAP *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::Real result;
  
  if (!SWIG_check_num_args("DecMAP_run",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__DecMAP, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DecMAP_run" "', argument " "1"" of type '" "dai::DecMAP *""'"); 
  }
  arg1 = reinterpret_cast< dai::DecMAP * >(argp1);
  result = (dai::Real)(arg1)->run();
  _outv = SWIG_From_double(static_cast< double >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( DecMAP_maxDiff, _wrap_DecMAP_maxDiff, std::string() ) {
  dai::DecMAP *arg1 = (dai::DecMAP *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::Real result;
  
  if (!SWIG_check_num_args("DecMAP_maxDiff",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__DecMAP, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DecMAP_maxDiff" "', argument " "1"" of type '" "dai::DecMAP const *""'"); 
  }
  arg1 = reinterpret_cast< dai::DecMAP * >(argp1);
  result = (dai::Real)((dai::DecMAP const *)arg1)->maxDiff();
  _outv = SWIG_From_double(static_cast< double >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( DecMAP_Iterations, _wrap_DecMAP_Iterations, std::string() ) {
  dai::DecMAP *arg1 = (dai::DecMAP *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  size_t result;
  
  if (!SWIG_check_num_args("DecMAP_Iterations",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__DecMAP, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DecMAP_Iterations" "', argument " "1"" of type '" "dai::DecMAP const *""'"); 
  }
  arg1 = reinterpret_cast< dai::DecMAP * >(argp1);
  result = ((dai::DecMAP const *)arg1)->Iterations();
  _outv = SWIG_From_size_t(static_cast< size_t >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( DecMAP_setProperties, _wrap_DecMAP_setProperties, std::string() ) {
  dai::DecMAP *arg1 = (dai::DecMAP *) 0 ;
  dai::PropertySet *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("DecMAP_setProperties",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__DecMAP, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DecMAP_setProperties" "', argument " "1"" of type '" "dai::DecMAP *""'"); 
  }
  arg1 = reinterpret_cast< dai::DecMAP * >(argp1);
  res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_dai__PropertySet,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DecMAP_setProperties" "', argument " "2"" of type '" "dai::PropertySet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DecMAP_setProperties" "', argument " "2"" of type '" "dai::PropertySet const &""'"); 
  }
  arg2 = reinterpret_cast< dai::PropertySet * >(argp2);
  (arg1)->setProperties((dai::PropertySet const &)*arg2);
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( DecMAP_getProperties, _wrap_DecMAP_getProperties, std::string() ) {
  dai::DecMAP *arg1 = (dai::DecMAP *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::PropertySet result;
  
  if (!SWIG_check_num_args("DecMAP_getProperties",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__DecMAP, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DecMAP_getProperties" "', argument " "1"" of type '" "dai::DecMAP const *""'"); 
  }
  arg1 = reinterpret_cast< dai::DecMAP * >(argp1);
  result = ((dai::DecMAP const *)arg1)->getProperties();
  _outv = SWIG_NewPointerObj((new dai::PropertySet(static_cast< const dai::PropertySet& >(result))), SWIGTYPE_p_dai__PropertySet, SWIG_POINTER_OWN |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( DecMAP_printProperties, _wrap_DecMAP_printProperties, std::string() ) {
  dai::DecMAP *arg1 = (dai::DecMAP *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  std::string result;
  
  if (!SWIG_check_num_args("DecMAP_printProperties",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__DecMAP, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DecMAP_printProperties" "', argument " "1"" of type '" "dai::DecMAP const *""'"); 
  }
  arg1 = reinterpret_cast< dai::DecMAP * >(argp1);
  result = ((dai::DecMAP const *)arg1)->printProperties();
  _outv = SWIG_From_std_string(static_cast< std::string >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( delete_DecMAP, _wrap_delete_DecMAP, std::string() ) {
  dai::DecMAP *arg1 = (dai::DecMAP *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("delete_DecMAP",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__DecMAP, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_DecMAP" "', argument " "1"" of type '" "dai::DecMAP *""'"); 
  }
  arg1 = reinterpret_cast< dai::DecMAP * >(argp1);
  delete arg1;
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static swig_octave_member swig_DecMAP_members[] = {
{"props",0,_wrap_DecMAP_props_get,_wrap_DecMAP_props_set,0,0},
{"clone",_wrap_DecMAP_clone,0,0,0,0},
{"construct",_wrap_DecMAP_construct,0,0,0,0},
{"name",_wrap_DecMAP_name,0,0,0,0},
{"belief",_wrap_DecMAP_belief,0,0,0,0},
{"beliefV",_wrap_DecMAP_beliefV,0,0,0,0},
{"beliefF",_wrap_DecMAP_beliefF,0,0,0,0},
{"beliefs",_wrap_DecMAP_beliefs,0,0,0,0},
{"logZ",_wrap_DecMAP_logZ,0,0,0,0},
{"findMaximum",_wrap_DecMAP_findMaximum,0,0,0,0},
{"init",_wrap_DecMAP_init,0,0,0,0},
{"run",_wrap_DecMAP_run,0,0,0,0},
{"maxDiff",_wrap_DecMAP_maxDiff,0,0,0,0},
{"Iterations",_wrap_DecMAP_Iterations,0,0,0,0},
{"setProperties",_wrap_DecMAP_setProperties,0,0,0,0},
{"getProperties",_wrap_DecMAP_getProperties,0,0,0,0},
{"printProperties",_wrap_DecMAP_printProperties,0,0,0,0},
{0,0,0,0,0,0}
};
static const char *swig_DecMAP_base_names[] = {0};
static const swig_type_info *swig_DecMAP_base[] = {0};
static swig_octave_class _wrap_class_DecMAP = {"DecMAP", &SWIGTYPE_p_dai__DecMAP,0,_wrap_new_DecMAP,0,_wrap_delete_DecMAP,swig_DecMAP_members,swig_DecMAP_base_names,swig_DecMAP_base };

SWIG_DEFUN( Cobweb_cav_set, _wrap_Cobweb_cav_set, std::string() ) {
  dai::Cobweb *arg1 = (dai::Cobweb *) 0 ;
  dai::DAIAlgFG *arg2 = (dai::DAIAlgFG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("Cobweb_cav_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__Cobweb, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cobweb_cav_set" "', argument " "1"" of type '" "dai::Cobweb *""'"); 
  }
  arg1 = reinterpret_cast< dai::Cobweb * >(argp1);
  res2 = SWIG_ConvertPtr(args(1), &argp2,SWIGTYPE_p_dai__DAIAlgT_dai__FactorGraph_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Cobweb_cav_set" "', argument " "2"" of type '" "dai::DAIAlgFG *""'"); 
  }
  arg2 = reinterpret_cast< dai::DAIAlgFG * >(argp2);
  if (arg1) (arg1)->cav = arg2;
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( Cobweb_cav_get, _wrap_Cobweb_cav_get, std::string() ) {
  dai::Cobweb *arg1 = (dai::Cobweb *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::DAIAlgFG *result = 0 ;
  
  if (!SWIG_check_num_args("Cobweb_cav_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__Cobweb, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cobweb_cav_get" "', argument " "1"" of type '" "dai::Cobweb *""'"); 
  }
  arg1 = reinterpret_cast< dai::Cobweb * >(argp1);
  result = (dai::DAIAlgFG *) ((arg1)->cav);
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dai__DAIAlgT_dai__FactorGraph_t, 0 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( Cobweb__g2l_set, _wrap_Cobweb__g2l_set, std::string() ) {
  dai::Cobweb *arg1 = (dai::Cobweb *) 0 ;
  std::map< int,size_t > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("Cobweb__g2l_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__Cobweb, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cobweb__g2l_set" "', argument " "1"" of type '" "dai::Cobweb *""'"); 
  }
  arg1 = reinterpret_cast< dai::Cobweb * >(argp1);
  {
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_std__mapT_int_size_t_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Cobweb__g2l_set" "', argument " "2"" of type '" "std::map< int,size_t >""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Cobweb__g2l_set" "', argument " "2"" of type '" "std::map< int,size_t >""'");
    } else {
      arg2 = *(reinterpret_cast< std::map< int,size_t > * >(argp2));
    }
  }
  if (arg1) (arg1)->_g2l = arg2;
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( Cobweb__g2l_get, _wrap_Cobweb__g2l_get, std::string() ) {
  dai::Cobweb *arg1 = (dai::Cobweb *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  std::map< int,size_t > result;
  
  if (!SWIG_check_num_args("Cobweb__g2l_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__Cobweb, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cobweb__g2l_get" "', argument " "1"" of type '" "dai::Cobweb *""'"); 
  }
  arg1 = reinterpret_cast< dai::Cobweb * >(argp1);
  result =  ((arg1)->_g2l);
  _outv = SWIG_NewPointerObj((new std::map< int,size_t >(static_cast< const std::map< int,size_t >& >(result))), SWIGTYPE_p_std__mapT_int_size_t_t, SWIG_POINTER_OWN |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static octave_value_list _wrap_new_Cobweb__SWIG_0 (const octave_value_list& args, int nargout) {
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::Cobweb *result = 0 ;
  
  if (!SWIG_check_num_args("new_Cobweb",args.length(),0,0,0)) {
    SWIG_fail;
  }
  result = (dai::Cobweb *)new dai::Cobweb();
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dai__Cobweb, 1 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static octave_value_list _wrap_new_Cobweb__SWIG_1 (const octave_value_list& args, int nargout) {
  std::map< int,size_t > *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::Cobweb *result = 0 ;
  
  if (!SWIG_check_num_args("new_Cobweb",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1, SWIGTYPE_p_std__mapT_int_size_t_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Cobweb" "', argument " "1"" of type '" "std::map< int,size_t > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Cobweb" "', argument " "1"" of type '" "std::map< int,size_t > const &""'"); 
  }
  arg1 = reinterpret_cast< std::map< int,size_t > * >(argp1);
  result = (dai::Cobweb *)new dai::Cobweb((std::map< int,size_t > const &)*arg1);
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dai__Cobweb, 1 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( new_Cobweb, _wrap_new_Cobweb, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[1]={
    octave_value_ref(args,0)
  };
  
  if (argc == 0) {
    return _wrap_new_Cobweb__SWIG_0(args, nargout);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__mapT_int_size_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Cobweb__SWIG_1(args, nargout);
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


SWIG_DEFUN( delete_Cobweb, _wrap_delete_Cobweb, std::string() ) {
  dai::Cobweb *arg1 = (dai::Cobweb *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("delete_Cobweb",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__Cobweb, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Cobweb" "', argument " "1"" of type '" "dai::Cobweb *""'"); 
  }
  arg1 = reinterpret_cast< dai::Cobweb * >(argp1);
  delete arg1;
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( Cobweb_setInfAlg, _wrap_Cobweb_setInfAlg, std::string() ) {
  dai::Cobweb *arg1 = (dai::Cobweb *) 0 ;
  dai::DAIAlgFG *arg2 = (dai::DAIAlgFG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("Cobweb_setInfAlg",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__Cobweb, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cobweb_setInfAlg" "', argument " "1"" of type '" "dai::Cobweb *""'"); 
  }
  arg1 = reinterpret_cast< dai::Cobweb * >(argp1);
  res2 = SWIG_ConvertPtr(args(1), &argp2,SWIGTYPE_p_dai__DAIAlgT_dai__FactorGraph_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Cobweb_setInfAlg" "', argument " "2"" of type '" "dai::DAIAlgFG *""'"); 
  }
  arg2 = reinterpret_cast< dai::DAIAlgFG * >(argp2);
  (arg1)->setInfAlg(arg2);
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( Cobweb_factor, _wrap_Cobweb_factor, std::string() ) {
  dai::Cobweb *arg1 = (dai::Cobweb *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::Factor result;
  
  if (!SWIG_check_num_args("Cobweb_factor",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__Cobweb, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cobweb_factor" "', argument " "1"" of type '" "dai::Cobweb *""'"); 
  }
  arg1 = reinterpret_cast< dai::Cobweb * >(argp1);
  ecode2 = SWIG_AsVal_size_t(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Cobweb_factor" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  result = (arg1)->factor(arg2);
  _outv = SWIG_NewPointerObj((new dai::Factor(static_cast< const dai::Factor& >(result))), SWIGTYPE_p_dai__TFactorT_double_t, SWIG_POINTER_OWN |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( Cobweb_initialize, _wrap_Cobweb_initialize, std::string() ) {
  dai::Cobweb *arg1 = (dai::Cobweb *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("Cobweb_initialize",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__Cobweb, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cobweb_initialize" "', argument " "1"" of type '" "dai::Cobweb *""'"); 
  }
  arg1 = reinterpret_cast< dai::Cobweb * >(argp1);
  (arg1)->initialize();
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static octave_value_list _wrap_Cobweb_marginal__SWIG_0 (const octave_value_list& args, int nargout) {
  dai::Cobweb *arg1 = (dai::Cobweb *) 0 ;
  dai::VarSet *arg2 = 0 ;
  std::vector< size_t,std::allocator< size_t > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::Factor result;
  
  if (!SWIG_check_num_args("Cobweb_marginal",args.length(),3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__Cobweb, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cobweb_marginal" "', argument " "1"" of type '" "dai::Cobweb *""'"); 
  }
  arg1 = reinterpret_cast< dai::Cobweb * >(argp1);
  res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_dai__VarSet,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Cobweb_marginal" "', argument " "2"" of type '" "dai::VarSet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Cobweb_marginal" "', argument " "2"" of type '" "dai::VarSet const &""'"); 
  }
  arg2 = reinterpret_cast< dai::VarSet * >(argp2);
  {
    std::vector< size_t,std::allocator< size_t > > *ptr = (std::vector< size_t,std::allocator< size_t > > *)0;
    res3 = swig::asptr(args(2), &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Cobweb_marginal" "', argument " "3"" of type '" "std::vector< size_t,std::allocator< size_t > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Cobweb_marginal" "', argument " "3"" of type '" "std::vector< size_t,std::allocator< size_t > > const &""'"); 
    }
    arg3 = ptr;
  }
  result = (arg1)->marginal((dai::VarSet const &)*arg2,(std::vector< size_t,std::allocator< size_t > > const &)*arg3);
  _outv = SWIG_NewPointerObj((new dai::Factor(static_cast< const dai::Factor& >(result))), SWIGTYPE_p_dai__TFactorT_double_t, SWIG_POINTER_OWN |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  if (SWIG_IsNewObj(res3)) delete arg3;
  return _out;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return octave_value_list();
}


static octave_value_list _wrap_Cobweb_marginal__SWIG_1 (const octave_value_list& args, int nargout) {
  dai::Cobweb *arg1 = (dai::Cobweb *) 0 ;
  int *arg2 = 0 ;
  std::vector< size_t,std::allocator< size_t > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::Factor result;
  
  if (!SWIG_check_num_args("Cobweb_marginal",args.length(),3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__Cobweb, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cobweb_marginal" "', argument " "1"" of type '" "dai::Cobweb *""'"); 
  }
  arg1 = reinterpret_cast< dai::Cobweb * >(argp1);
  ecode2 = SWIG_AsVal_int(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Cobweb_marginal" "', argument " "2"" of type '" "int""'");
  } 
  temp2 = static_cast< int >(val2);
  arg2 = &temp2;
  {
    std::vector< size_t,std::allocator< size_t > > *ptr = (std::vector< size_t,std::allocator< size_t > > *)0;
    res3 = swig::asptr(args(2), &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Cobweb_marginal" "', argument " "3"" of type '" "std::vector< size_t,std::allocator< size_t > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Cobweb_marginal" "', argument " "3"" of type '" "std::vector< size_t,std::allocator< size_t > > const &""'"); 
    }
    arg3 = ptr;
  }
  result = (arg1)->marginal((int const &)*arg2,(std::vector< size_t,std::allocator< size_t > > const &)*arg3);
  _outv = SWIG_NewPointerObj((new dai::Factor(static_cast< const dai::Factor& >(result))), SWIGTYPE_p_dai__TFactorT_double_t, SWIG_POINTER_OWN |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  if (SWIG_IsNewObj(res3)) delete arg3;
  return _out;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return octave_value_list();
}


SWIG_DEFUN( Cobweb_marginal, _wrap_Cobweb_marginal, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[3]={
    octave_value_ref(args,0),octave_value_ref(args,1),octave_value_ref(args,2)
  };
  
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dai__Cobweb, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_dai__VarSet, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector< size_t,std::allocator< size_t > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_Cobweb_marginal__SWIG_0(args, nargout);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dai__Cobweb, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector< size_t,std::allocator< size_t > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_Cobweb_marginal__SWIG_1(args, nargout);
        }
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


static octave_value_list _wrap_Cobweb_updateFactor__SWIG_0 (const octave_value_list& args, int nargout) {
  dai::Cobweb *arg1 = (dai::Cobweb *) 0 ;
  int arg2 ;
  dai::Factor *arg3 = 0 ;
  bool arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("Cobweb_updateFactor",args.length(),4,4,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__Cobweb, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cobweb_updateFactor" "', argument " "1"" of type '" "dai::Cobweb *""'"); 
  }
  arg1 = reinterpret_cast< dai::Cobweb * >(argp1);
  ecode2 = SWIG_AsVal_int(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Cobweb_updateFactor" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_ConvertPtr(args(2), &argp3, SWIGTYPE_p_dai__TFactorT_double_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Cobweb_updateFactor" "', argument " "3"" of type '" "dai::Factor const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Cobweb_updateFactor" "', argument " "3"" of type '" "dai::Factor const &""'"); 
  }
  arg3 = reinterpret_cast< dai::Factor * >(argp3);
  ecode4 = SWIG_AsVal_bool(args(3), &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Cobweb_updateFactor" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  (arg1)->updateFactor(arg2,(dai::Factor const &)*arg3,arg4);
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static octave_value_list _wrap_Cobweb_updateFactor__SWIG_1 (const octave_value_list& args, int nargout) {
  dai::Cobweb *arg1 = (dai::Cobweb *) 0 ;
  int arg2 ;
  dai::Factor *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("Cobweb_updateFactor",args.length(),3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__Cobweb, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cobweb_updateFactor" "', argument " "1"" of type '" "dai::Cobweb *""'"); 
  }
  arg1 = reinterpret_cast< dai::Cobweb * >(argp1);
  ecode2 = SWIG_AsVal_int(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Cobweb_updateFactor" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_ConvertPtr(args(2), &argp3, SWIGTYPE_p_dai__TFactorT_double_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Cobweb_updateFactor" "', argument " "3"" of type '" "dai::Factor const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Cobweb_updateFactor" "', argument " "3"" of type '" "dai::Factor const &""'"); 
  }
  arg3 = reinterpret_cast< dai::Factor * >(argp3);
  (arg1)->updateFactor(arg2,(dai::Factor const &)*arg3);
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( Cobweb_updateFactor, _wrap_Cobweb_updateFactor, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[4]={
    octave_value_ref(args,0),octave_value_ref(args,1),octave_value_ref(args,2),octave_value_ref(args,3)
  };
  
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dai__Cobweb, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_dai__TFactorT_double_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_Cobweb_updateFactor__SWIG_1(args, nargout);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dai__Cobweb, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_dai__TFactorT_double_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_Cobweb_updateFactor__SWIG_0(args, nargout);
          }
        }
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


static octave_value_list _wrap_Cobweb_belief__SWIG_0 (const octave_value_list& args, int nargout) {
  dai::Cobweb *arg1 = (dai::Cobweb *) 0 ;
  dai::Var arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::Factor result;
  
  if (!SWIG_check_num_args("Cobweb_belief",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__Cobweb, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cobweb_belief" "', argument " "1"" of type '" "dai::Cobweb *""'"); 
  }
  arg1 = reinterpret_cast< dai::Cobweb * >(argp1);
  {
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_dai__Var,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Cobweb_belief" "', argument " "2"" of type '" "dai::Var const""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Cobweb_belief" "', argument " "2"" of type '" "dai::Var const""'");
    } else {
      arg2 = *(reinterpret_cast< dai::Var * >(argp2));
    }
  }
  result = (arg1)->belief(arg2);
  _outv = SWIG_NewPointerObj((new dai::Factor(static_cast< const dai::Factor& >(result))), SWIGTYPE_p_dai__TFactorT_double_t, SWIG_POINTER_OWN |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static octave_value_list _wrap_Cobweb_belief__SWIG_1 (const octave_value_list& args, int nargout) {
  dai::Cobweb *arg1 = (dai::Cobweb *) 0 ;
  dai::VarSet *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::Factor result;
  
  if (!SWIG_check_num_args("Cobweb_belief",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__Cobweb, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cobweb_belief" "', argument " "1"" of type '" "dai::Cobweb *""'"); 
  }
  arg1 = reinterpret_cast< dai::Cobweb * >(argp1);
  res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_dai__VarSet,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Cobweb_belief" "', argument " "2"" of type '" "dai::VarSet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Cobweb_belief" "', argument " "2"" of type '" "dai::VarSet const &""'"); 
  }
  arg2 = reinterpret_cast< dai::VarSet * >(argp2);
  result = (arg1)->belief((dai::VarSet const &)*arg2);
  _outv = SWIG_NewPointerObj((new dai::Factor(static_cast< const dai::Factor& >(result))), SWIGTYPE_p_dai__TFactorT_double_t, SWIG_POINTER_OWN |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( Cobweb_belief, _wrap_Cobweb_belief, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[2]={
    octave_value_ref(args,0),octave_value_ref(args,1)
  };
  
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dai__Cobweb, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_dai__Var, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Cobweb_belief__SWIG_0(args, nargout);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dai__Cobweb, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_dai__VarSet, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Cobweb_belief__SWIG_1(args, nargout);
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


static swig_octave_member swig_Cobweb_members[] = {
{"cav",0,_wrap_Cobweb_cav_get,_wrap_Cobweb_cav_set,0,0},
{"_g2l",0,_wrap_Cobweb__g2l_get,_wrap_Cobweb__g2l_set,0,0},
{"setInfAlg",_wrap_Cobweb_setInfAlg,0,0,0,0},
{"factor",_wrap_Cobweb_factor,0,0,0,0},
{"initialize",_wrap_Cobweb_initialize,0,0,0,0},
{"marginal",_wrap_Cobweb_marginal,0,0,0,0},
{"updateFactor",_wrap_Cobweb_updateFactor,0,0,0,0},
{"belief",_wrap_Cobweb_belief,0,0,0,0},
{0,0,0,0,0,0}
};
static const char *swig_Cobweb_base_names[] = {0};
static const swig_type_info *swig_Cobweb_base[] = {0};
static swig_octave_class _wrap_class_Cobweb = {"Cobweb", &SWIGTYPE_p_dai__Cobweb,0,_wrap_new_Cobweb,0,_wrap_delete_Cobweb,swig_Cobweb_members,swig_Cobweb_base_names,swig_Cobweb_base };

SWIG_DEFUN( GLC_props_set, _wrap_GLC_props_set, std::string() ) {
  dai::GLC *arg1 = (dai::GLC *) 0 ;
  dai::GLC::Properties *arg2 = (dai::GLC::Properties *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("GLC_props_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__GLC, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GLC_props_set" "', argument " "1"" of type '" "dai::GLC *""'"); 
  }
  arg1 = reinterpret_cast< dai::GLC * >(argp1);
  res2 = SWIG_ConvertPtr(args(1), &argp2,SWIGTYPE_p_dai__GLC__Properties, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GLC_props_set" "', argument " "2"" of type '" "dai::GLC::Properties *""'"); 
  }
  arg2 = reinterpret_cast< dai::GLC::Properties * >(argp2);
  if (arg1) (arg1)->props = *arg2;
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( GLC_props_get, _wrap_GLC_props_get, std::string() ) {
  dai::GLC *arg1 = (dai::GLC *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::GLC::Properties *result = 0 ;
  
  if (!SWIG_check_num_args("GLC_props_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__GLC, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GLC_props_get" "', argument " "1"" of type '" "dai::GLC *""'"); 
  }
  arg1 = reinterpret_cast< dai::GLC * >(argp1);
  result = (dai::GLC::Properties *)& ((arg1)->props);
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dai__GLC__Properties, 0 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static octave_value_list _wrap_new_GLC__SWIG_0 (const octave_value_list& args, int nargout) {
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::GLC *result = 0 ;
  
  if (!SWIG_check_num_args("new_GLC",args.length(),0,0,0)) {
    SWIG_fail;
  }
  result = (dai::GLC *)new dai::GLC();
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dai__GLC, 1 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static octave_value_list _wrap_new_GLC__SWIG_1 (const octave_value_list& args, int nargout) {
  dai::FactorGraph *arg1 = 0 ;
  dai::PropertySet *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::GLC *result = 0 ;
  
  if (!SWIG_check_num_args("new_GLC",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1, SWIGTYPE_p_dai__FactorGraph,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_GLC" "', argument " "1"" of type '" "dai::FactorGraph const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_GLC" "', argument " "1"" of type '" "dai::FactorGraph const &""'"); 
  }
  arg1 = reinterpret_cast< dai::FactorGraph * >(argp1);
  res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_dai__PropertySet,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_GLC" "', argument " "2"" of type '" "dai::PropertySet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_GLC" "', argument " "2"" of type '" "dai::PropertySet const &""'"); 
  }
  arg2 = reinterpret_cast< dai::PropertySet * >(argp2);
  result = (dai::GLC *)new dai::GLC((dai::FactorGraph const &)*arg1,(dai::PropertySet const &)*arg2);
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dai__GLC, 1 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( new_GLC, _wrap_new_GLC, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[2]={
    octave_value_ref(args,0),octave_value_ref(args,1)
  };
  
  if (argc == 0) {
    return _wrap_new_GLC__SWIG_0(args, nargout);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dai__FactorGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_dai__PropertySet, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_GLC__SWIG_1(args, nargout);
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


SWIG_DEFUN( GLC_clone, _wrap_GLC_clone, std::string() ) {
  dai::GLC *arg1 = (dai::GLC *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::GLC *result = 0 ;
  
  if (!SWIG_check_num_args("GLC_clone",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__GLC, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GLC_clone" "', argument " "1"" of type '" "dai::GLC const *""'"); 
  }
  arg1 = reinterpret_cast< dai::GLC * >(argp1);
  result = (dai::GLC *)((dai::GLC const *)arg1)->clone();
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dai__GLC, 0 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( GLC_construct, _wrap_GLC_construct, std::string() ) {
  dai::GLC *arg1 = (dai::GLC *) 0 ;
  dai::FactorGraph *arg2 = 0 ;
  dai::PropertySet *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::GLC *result = 0 ;
  
  if (!SWIG_check_num_args("GLC_construct",args.length(),3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__GLC, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GLC_construct" "', argument " "1"" of type '" "dai::GLC const *""'"); 
  }
  arg1 = reinterpret_cast< dai::GLC * >(argp1);
  res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_dai__FactorGraph,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GLC_construct" "', argument " "2"" of type '" "dai::FactorGraph const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GLC_construct" "', argument " "2"" of type '" "dai::FactorGraph const &""'"); 
  }
  arg2 = reinterpret_cast< dai::FactorGraph * >(argp2);
  res3 = SWIG_ConvertPtr(args(2), &argp3, SWIGTYPE_p_dai__PropertySet,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "GLC_construct" "', argument " "3"" of type '" "dai::PropertySet const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GLC_construct" "', argument " "3"" of type '" "dai::PropertySet const &""'"); 
  }
  arg3 = reinterpret_cast< dai::PropertySet * >(argp3);
  result = (dai::GLC *)((dai::GLC const *)arg1)->construct((dai::FactorGraph const &)*arg2,(dai::PropertySet const &)*arg3);
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dai__GLC, 0 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( GLC_name, _wrap_GLC_name, std::string() ) {
  dai::GLC *arg1 = (dai::GLC *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  std::string result;
  
  if (!SWIG_check_num_args("GLC_name",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__GLC, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GLC_name" "', argument " "1"" of type '" "dai::GLC const *""'"); 
  }
  arg1 = reinterpret_cast< dai::GLC * >(argp1);
  result = ((dai::GLC const *)arg1)->name();
  _outv = SWIG_From_std_string(static_cast< std::string >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static octave_value_list _wrap_GLC_belief__SWIG_0 (const octave_value_list& args, int nargout) {
  dai::GLC *arg1 = (dai::GLC *) 0 ;
  dai::Var *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::Factor result;
  
  if (!SWIG_check_num_args("GLC_belief",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__GLC, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GLC_belief" "', argument " "1"" of type '" "dai::GLC const *""'"); 
  }
  arg1 = reinterpret_cast< dai::GLC * >(argp1);
  res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_dai__Var,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GLC_belief" "', argument " "2"" of type '" "dai::Var const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GLC_belief" "', argument " "2"" of type '" "dai::Var const &""'"); 
  }
  arg2 = reinterpret_cast< dai::Var * >(argp2);
  result = ((dai::GLC const *)arg1)->belief((dai::Var const &)*arg2);
  _outv = SWIG_NewPointerObj((new dai::Factor(static_cast< const dai::Factor& >(result))), SWIGTYPE_p_dai__TFactorT_double_t, SWIG_POINTER_OWN |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static octave_value_list _wrap_GLC_belief__SWIG_1 (const octave_value_list& args, int nargout) {
  dai::GLC *arg1 = (dai::GLC *) 0 ;
  dai::VarSet *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::Factor result;
  
  if (!SWIG_check_num_args("GLC_belief",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__GLC, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GLC_belief" "', argument " "1"" of type '" "dai::GLC const *""'"); 
  }
  arg1 = reinterpret_cast< dai::GLC * >(argp1);
  res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_dai__VarSet,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GLC_belief" "', argument " "2"" of type '" "dai::VarSet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GLC_belief" "', argument " "2"" of type '" "dai::VarSet const &""'"); 
  }
  arg2 = reinterpret_cast< dai::VarSet * >(argp2);
  result = ((dai::GLC const *)arg1)->belief((dai::VarSet const &)*arg2);
  _outv = SWIG_NewPointerObj((new dai::Factor(static_cast< const dai::Factor& >(result))), SWIGTYPE_p_dai__TFactorT_double_t, SWIG_POINTER_OWN |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( GLC_belief, _wrap_GLC_belief, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[2]={
    octave_value_ref(args,0),octave_value_ref(args,1)
  };
  
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dai__GLC, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_dai__Var, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_GLC_belief__SWIG_0(args, nargout);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dai__GLC, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_dai__VarSet, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_GLC_belief__SWIG_1(args, nargout);
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


SWIG_DEFUN( GLC_beliefV, _wrap_GLC_beliefV, std::string() ) {
  dai::GLC *arg1 = (dai::GLC *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::Factor result;
  
  if (!SWIG_check_num_args("GLC_beliefV",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__GLC, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GLC_beliefV" "', argument " "1"" of type '" "dai::GLC const *""'"); 
  }
  arg1 = reinterpret_cast< dai::GLC * >(argp1);
  ecode2 = SWIG_AsVal_size_t(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GLC_beliefV" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  result = ((dai::GLC const *)arg1)->beliefV(arg2);
  _outv = SWIG_NewPointerObj((new dai::Factor(static_cast< const dai::Factor& >(result))), SWIGTYPE_p_dai__TFactorT_double_t, SWIG_POINTER_OWN |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( GLC_beliefs, _wrap_GLC_beliefs, std::string() ) {
  dai::GLC *arg1 = (dai::GLC *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  std::vector< dai::Factor,std::allocator< dai::Factor > > result;
  
  if (!SWIG_check_num_args("GLC_beliefs",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__GLC, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GLC_beliefs" "', argument " "1"" of type '" "dai::GLC const *""'"); 
  }
  arg1 = reinterpret_cast< dai::GLC * >(argp1);
  result = ((dai::GLC const *)arg1)->beliefs();
  _outv = swig::from(static_cast< std::vector< dai::TFactor< double >,std::allocator< dai::TFactor< double > > > >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( GLC_logZ, _wrap_GLC_logZ, std::string() ) {
  dai::GLC *arg1 = (dai::GLC *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::Real result;
  
  if (!SWIG_check_num_args("GLC_logZ",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__GLC, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GLC_logZ" "', argument " "1"" of type '" "dai::GLC const *""'"); 
  }
  arg1 = reinterpret_cast< dai::GLC * >(argp1);
  result = (dai::Real)((dai::GLC const *)arg1)->logZ();
  _outv = SWIG_From_double(static_cast< double >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static octave_value_list _wrap_GLC_init__SWIG_0 (const octave_value_list& args, int nargout) {
  dai::GLC *arg1 = (dai::GLC *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("GLC_init",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__GLC, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GLC_init" "', argument " "1"" of type '" "dai::GLC *""'"); 
  }
  arg1 = reinterpret_cast< dai::GLC * >(argp1);
  (arg1)->init();
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static octave_value_list _wrap_GLC_init__SWIG_1 (const octave_value_list& args, int nargout) {
  dai::GLC *arg1 = (dai::GLC *) 0 ;
  dai::VarSet *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("GLC_init",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__GLC, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GLC_init" "', argument " "1"" of type '" "dai::GLC *""'"); 
  }
  arg1 = reinterpret_cast< dai::GLC * >(argp1);
  res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_dai__VarSet,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GLC_init" "', argument " "2"" of type '" "dai::VarSet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GLC_init" "', argument " "2"" of type '" "dai::VarSet const &""'"); 
  }
  arg2 = reinterpret_cast< dai::VarSet * >(argp2);
  (arg1)->init((dai::VarSet const &)*arg2);
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( GLC_init, _wrap_GLC_init, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[2]={
    octave_value_ref(args,0),octave_value_ref(args,1)
  };
  
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dai__GLC, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_GLC_init__SWIG_0(args, nargout);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dai__GLC, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_dai__VarSet, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_GLC_init__SWIG_1(args, nargout);
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


SWIG_DEFUN( GLC_run, _wrap_GLC_run, std::string() ) {
  dai::GLC *arg1 = (dai::GLC *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::Real result;
  
  if (!SWIG_check_num_args("GLC_run",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__GLC, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GLC_run" "', argument " "1"" of type '" "dai::GLC *""'"); 
  }
  arg1 = reinterpret_cast< dai::GLC * >(argp1);
  result = (dai::Real)(arg1)->run();
  _outv = SWIG_From_double(static_cast< double >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( GLC_maxDiff, _wrap_GLC_maxDiff, std::string() ) {
  dai::GLC *arg1 = (dai::GLC *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::Real result;
  
  if (!SWIG_check_num_args("GLC_maxDiff",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__GLC, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GLC_maxDiff" "', argument " "1"" of type '" "dai::GLC const *""'"); 
  }
  arg1 = reinterpret_cast< dai::GLC * >(argp1);
  result = (dai::Real)((dai::GLC const *)arg1)->maxDiff();
  _outv = SWIG_From_double(static_cast< double >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( GLC_Iterations, _wrap_GLC_Iterations, std::string() ) {
  dai::GLC *arg1 = (dai::GLC *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  size_t result;
  
  if (!SWIG_check_num_args("GLC_Iterations",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__GLC, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GLC_Iterations" "', argument " "1"" of type '" "dai::GLC const *""'"); 
  }
  arg1 = reinterpret_cast< dai::GLC * >(argp1);
  result = ((dai::GLC const *)arg1)->Iterations();
  _outv = SWIG_From_size_t(static_cast< size_t >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( GLC_setMaxIter, _wrap_GLC_setMaxIter, std::string() ) {
  dai::GLC *arg1 = (dai::GLC *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("GLC_setMaxIter",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__GLC, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GLC_setMaxIter" "', argument " "1"" of type '" "dai::GLC *""'"); 
  }
  arg1 = reinterpret_cast< dai::GLC * >(argp1);
  ecode2 = SWIG_AsVal_size_t(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GLC_setMaxIter" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  (arg1)->setMaxIter(arg2);
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( GLC_setProperties, _wrap_GLC_setProperties, std::string() ) {
  dai::GLC *arg1 = (dai::GLC *) 0 ;
  dai::PropertySet *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("GLC_setProperties",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__GLC, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GLC_setProperties" "', argument " "1"" of type '" "dai::GLC *""'"); 
  }
  arg1 = reinterpret_cast< dai::GLC * >(argp1);
  res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_dai__PropertySet,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GLC_setProperties" "', argument " "2"" of type '" "dai::PropertySet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GLC_setProperties" "', argument " "2"" of type '" "dai::PropertySet const &""'"); 
  }
  arg2 = reinterpret_cast< dai::PropertySet * >(argp2);
  (arg1)->setProperties((dai::PropertySet const &)*arg2);
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( GLC_getProperties, _wrap_GLC_getProperties, std::string() ) {
  dai::GLC *arg1 = (dai::GLC *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::PropertySet result;
  
  if (!SWIG_check_num_args("GLC_getProperties",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__GLC, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GLC_getProperties" "', argument " "1"" of type '" "dai::GLC const *""'"); 
  }
  arg1 = reinterpret_cast< dai::GLC * >(argp1);
  result = ((dai::GLC const *)arg1)->getProperties();
  _outv = SWIG_NewPointerObj((new dai::PropertySet(static_cast< const dai::PropertySet& >(result))), SWIGTYPE_p_dai__PropertySet, SWIG_POINTER_OWN |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( GLC_printProperties, _wrap_GLC_printProperties, std::string() ) {
  dai::GLC *arg1 = (dai::GLC *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  std::string result;
  
  if (!SWIG_check_num_args("GLC_printProperties",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__GLC, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GLC_printProperties" "', argument " "1"" of type '" "dai::GLC const *""'"); 
  }
  arg1 = reinterpret_cast< dai::GLC * >(argp1);
  result = ((dai::GLC const *)arg1)->printProperties();
  _outv = SWIG_From_std_string(static_cast< std::string >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static octave_value_list _wrap_GLC_CW__SWIG_0 (const octave_value_list& args, int nargout) {
  dai::GLC *arg1 = (dai::GLC *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::Cobweb *result = 0 ;
  
  if (!SWIG_check_num_args("GLC_CW",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__GLC, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GLC_CW" "', argument " "1"" of type '" "dai::GLC const *""'"); 
  }
  arg1 = reinterpret_cast< dai::GLC * >(argp1);
  ecode2 = SWIG_AsVal_size_t(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GLC_CW" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  result = (dai::Cobweb *) &((dai::GLC const *)arg1)->CW(arg2);
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dai__Cobweb, 0 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static octave_value_list _wrap_GLC_CW__SWIG_1 (const octave_value_list& args, int nargout) {
  dai::GLC *arg1 = (dai::GLC *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::Cobweb *result = 0 ;
  
  if (!SWIG_check_num_args("GLC_CW",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__GLC, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GLC_CW" "', argument " "1"" of type '" "dai::GLC *""'"); 
  }
  arg1 = reinterpret_cast< dai::GLC * >(argp1);
  ecode2 = SWIG_AsVal_size_t(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GLC_CW" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  result = (dai::Cobweb *) &(arg1)->CW(arg2);
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dai__Cobweb, 0 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( GLC_CW, _wrap_GLC_CW, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[2]={
    octave_value_ref(args,0),octave_value_ref(args,1)
  };
  
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dai__GLC, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_GLC_CW__SWIG_1(args, nargout);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dai__GLC, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_GLC_CW__SWIG_0(args, nargout);
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


SWIG_DEFUN( GLC_CalcCavityDist, _wrap_GLC_CalcCavityDist, std::string() ) {
  dai::GLC *arg1 = (dai::GLC *) 0 ;
  size_t arg2 ;
  std::string *arg3 = 0 ;
  dai::PropertySet *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  void *argp4 ;
  int res4 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::Real result;
  
  if (!SWIG_check_num_args("GLC_CalcCavityDist",args.length(),4,4,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__GLC, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GLC_CalcCavityDist" "', argument " "1"" of type '" "dai::GLC *""'"); 
  }
  arg1 = reinterpret_cast< dai::GLC * >(argp1);
  ecode2 = SWIG_AsVal_size_t(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GLC_CalcCavityDist" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(args(2), &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "GLC_CalcCavityDist" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GLC_CalcCavityDist" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  res4 = SWIG_ConvertPtr(args(3), &argp4, SWIGTYPE_p_dai__PropertySet,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "GLC_CalcCavityDist" "', argument " "4"" of type '" "dai::PropertySet const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GLC_CalcCavityDist" "', argument " "4"" of type '" "dai::PropertySet const &""'"); 
  }
  arg4 = reinterpret_cast< dai::PropertySet * >(argp4);
  result = (dai::Real)(arg1)->CalcCavityDist(arg2,(std::string const &)*arg3,(dai::PropertySet const &)*arg4);
  _outv = SWIG_From_double(static_cast< double >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  if (SWIG_IsNewObj(res3)) delete arg3;
  return _out;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return octave_value_list();
}


SWIG_DEFUN( GLC_InitCavityDists, _wrap_GLC_InitCavityDists, std::string() ) {
  dai::GLC *arg1 = (dai::GLC *) 0 ;
  std::string *arg2 = 0 ;
  dai::PropertySet *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  void *argp3 ;
  int res3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  dai::Real result;
  
  if (!SWIG_check_num_args("GLC_InitCavityDists",args.length(),3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__GLC, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GLC_InitCavityDists" "', argument " "1"" of type '" "dai::GLC *""'"); 
  }
  arg1 = reinterpret_cast< dai::GLC * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(args(1), &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GLC_InitCavityDists" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GLC_InitCavityDists" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  res3 = SWIG_ConvertPtr(args(2), &argp3, SWIGTYPE_p_dai__PropertySet,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "GLC_InitCavityDists" "', argument " "3"" of type '" "dai::PropertySet const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GLC_InitCavityDists" "', argument " "3"" of type '" "dai::PropertySet const &""'"); 
  }
  arg3 = reinterpret_cast< dai::PropertySet * >(argp3);
  result = (dai::Real)(arg1)->InitCavityDists((std::string const &)*arg2,(dai::PropertySet const &)*arg3);
  _outv = SWIG_From_double(static_cast< double >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  if (SWIG_IsNewObj(res2)) delete arg2;
  return _out;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return octave_value_list();
}


SWIG_DEFUN( GLC_NewPancake, _wrap_GLC_NewPancake, std::string() ) {
  dai::GLC *arg1 = (dai::GLC *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("GLC_NewPancake",args.length(),3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__GLC, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GLC_NewPancake" "', argument " "1"" of type '" "dai::GLC *""'"); 
  }
  arg1 = reinterpret_cast< dai::GLC * >(argp1);
  ecode2 = SWIG_AsVal_size_t(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GLC_NewPancake" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  ecode3 = SWIG_AsVal_size_t(args(2), &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "GLC_NewPancake" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  (arg1)->NewPancake(arg2,arg3);
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( GLC_OVNewPancake, _wrap_GLC_OVNewPancake, std::string() ) {
  dai::GLC *arg1 = (dai::GLC *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("GLC_OVNewPancake",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__GLC, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GLC_OVNewPancake" "', argument " "1"" of type '" "dai::GLC *""'"); 
  }
  arg1 = reinterpret_cast< dai::GLC * >(argp1);
  ecode2 = SWIG_AsVal_size_t(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GLC_OVNewPancake" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  (arg1)->OVNewPancake(arg2);
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static octave_value_list _wrap_GLC_CalcBelief__SWIG_0 (const octave_value_list& args, int nargout) {
  dai::GLC *arg1 = (dai::GLC *) 0 ;
  size_t arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("GLC_CalcBelief",args.length(),3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__GLC, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GLC_CalcBelief" "', argument " "1"" of type '" "dai::GLC *""'"); 
  }
  arg1 = reinterpret_cast< dai::GLC * >(argp1);
  ecode2 = SWIG_AsVal_size_t(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GLC_CalcBelief" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  ecode3 = SWIG_AsVal_bool(args(2), &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "GLC_CalcBelief" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  (arg1)->CalcBelief(arg2,arg3);
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static octave_value_list _wrap_GLC_CalcBelief__SWIG_1 (const octave_value_list& args, int nargout) {
  dai::GLC *arg1 = (dai::GLC *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("GLC_CalcBelief",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__GLC, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GLC_CalcBelief" "', argument " "1"" of type '" "dai::GLC *""'"); 
  }
  arg1 = reinterpret_cast< dai::GLC * >(argp1);
  ecode2 = SWIG_AsVal_size_t(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GLC_CalcBelief" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  (arg1)->CalcBelief(arg2);
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( GLC_CalcBelief, _wrap_GLC_CalcBelief, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[3]={
    octave_value_ref(args,0),octave_value_ref(args,1),octave_value_ref(args,2)
  };
  
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dai__GLC, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_GLC_CalcBelief__SWIG_1(args, nargout);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dai__GLC, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_GLC_CalcBelief__SWIG_0(args, nargout);
        }
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


SWIG_DEFUN( GLC_CalcFactorBelief, _wrap_GLC_CalcFactorBelief, std::string() ) {
  dai::GLC *arg1 = (dai::GLC *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("GLC_CalcFactorBelief",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__GLC, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GLC_CalcFactorBelief" "', argument " "1"" of type '" "dai::GLC *""'"); 
  }
  arg1 = reinterpret_cast< dai::GLC * >(argp1);
  ecode2 = SWIG_AsVal_size_t(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GLC_CalcFactorBelief" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  (arg1)->CalcFactorBelief(arg2);
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( GLC_calcRegions, _wrap_GLC_calcRegions, std::string() ) {
  dai::GLC *arg1 = (dai::GLC *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  SwigValueWrapper< std::vector< dai::SmallSet< size_t >,std::allocator< dai::SmallSet< size_t > > > > result;
  
  if (!SWIG_check_num_args("GLC_calcRegions",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__GLC, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GLC_calcRegions" "', argument " "1"" of type '" "dai::GLC *""'"); 
  }
  arg1 = reinterpret_cast< dai::GLC * >(argp1);
  result = (arg1)->calcRegions();
  _outv = SWIG_NewPointerObj((new std::vector< dai::SmallSet< size_t >,std::allocator< dai::SmallSet< size_t > > >(static_cast< const std::vector< dai::SmallSet< size_t >,std::allocator< dai::SmallSet< size_t > > >& >(result))), SWIGTYPE_p_std__vectorT_dai__SmallSetT_size_t_t_std__allocatorT_dai__SmallSetT_size_t_t_t_t, SWIG_POINTER_OWN |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( GLC_initCWs, _wrap_GLC_initCWs, std::string() ) {
  dai::GLC *arg1 = (dai::GLC *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("GLC_initCWs",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__GLC, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GLC_initCWs" "', argument " "1"" of type '" "dai::GLC *""'"); 
  }
  arg1 = reinterpret_cast< dai::GLC * >(argp1);
  (arg1)->initCWs();
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( GLC_setCWs, _wrap_GLC_setCWs, std::string() ) {
  dai::GLC *arg1 = (dai::GLC *) 0 ;
  std::string *arg2 = 0 ;
  dai::PropertySet *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  void *argp3 ;
  int res3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("GLC_setCWs",args.length(),3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__GLC, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GLC_setCWs" "', argument " "1"" of type '" "dai::GLC *""'"); 
  }
  arg1 = reinterpret_cast< dai::GLC * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(args(1), &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GLC_setCWs" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GLC_setCWs" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  res3 = SWIG_ConvertPtr(args(2), &argp3, SWIGTYPE_p_dai__PropertySet,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "GLC_setCWs" "', argument " "3"" of type '" "dai::PropertySet const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GLC_setCWs" "', argument " "3"" of type '" "dai::PropertySet const &""'"); 
  }
  arg3 = reinterpret_cast< dai::PropertySet * >(argp3);
  (arg1)->setCWs((std::string const &)*arg2,(dai::PropertySet const &)*arg3);
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  if (SWIG_IsNewObj(res2)) delete arg2;
  return _out;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return octave_value_list();
}


SWIG_DEFUN( GLC_findLoopClusters, _wrap_GLC_findLoopClusters, std::string() ) {
  dai::GLC *arg1 = (dai::GLC *) 0 ;
  dai::SmallSet< size_t > *arg2 = 0 ;
  std::set< dai::SmallSet< size_t > > *arg3 = 0 ;
  SwigValueWrapper< dai::SmallSet< size_t > > arg4 ;
  size_t *arg5 = 0 ;
  size_t arg6 ;
  SwigValueWrapper< dai::SmallSet< size_t > > arg7 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  size_t temp5 ;
  size_t val5 ;
  int ecode5 = 0 ;
  size_t val6 ;
  int ecode6 = 0 ;
  void *argp7 ;
  int res7 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("GLC_findLoopClusters",args.length(),7,7,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__GLC, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GLC_findLoopClusters" "', argument " "1"" of type '" "dai::GLC *""'"); 
  }
  arg1 = reinterpret_cast< dai::GLC * >(argp1);
  res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_dai__SmallSetT_size_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GLC_findLoopClusters" "', argument " "2"" of type '" "dai::SmallSet< size_t > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GLC_findLoopClusters" "', argument " "2"" of type '" "dai::SmallSet< size_t > &""'"); 
  }
  arg2 = reinterpret_cast< dai::SmallSet< size_t > * >(argp2);
  res3 = SWIG_ConvertPtr(args(2), &argp3, SWIGTYPE_p_std__setT_dai__SmallSetT_size_t_t_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "GLC_findLoopClusters" "', argument " "3"" of type '" "std::set< dai::SmallSet< size_t > > &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GLC_findLoopClusters" "', argument " "3"" of type '" "std::set< dai::SmallSet< size_t > > &""'"); 
  }
  arg3 = reinterpret_cast< std::set< dai::SmallSet< size_t > > * >(argp3);
  {
    res4 = SWIG_ConvertPtr(args(3), &argp4, SWIGTYPE_p_dai__SmallSetT_size_t_t,  0 );
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "GLC_findLoopClusters" "', argument " "4"" of type '" "dai::SmallSet< size_t >""'"); 
    }  
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GLC_findLoopClusters" "', argument " "4"" of type '" "dai::SmallSet< size_t >""'");
    } else {
      arg4 = *(reinterpret_cast< dai::SmallSet< size_t > * >(argp4));
    }
  }
  ecode5 = SWIG_AsVal_size_t(args(4), &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "GLC_findLoopClusters" "', argument " "5"" of type '" "size_t""'");
  } 
  temp5 = static_cast< size_t >(val5);
  arg5 = &temp5;
  ecode6 = SWIG_AsVal_size_t(args(5), &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "GLC_findLoopClusters" "', argument " "6"" of type '" "size_t""'");
  } 
  arg6 = static_cast< size_t >(val6);
  {
    res7 = SWIG_ConvertPtr(args(6), &argp7, SWIGTYPE_p_dai__SmallSetT_size_t_t,  0 );
    if (!SWIG_IsOK(res7)) {
      SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "GLC_findLoopClusters" "', argument " "7"" of type '" "dai::SmallSet< size_t >""'"); 
    }  
    if (!argp7) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GLC_findLoopClusters" "', argument " "7"" of type '" "dai::SmallSet< size_t >""'");
    } else {
      arg7 = *(reinterpret_cast< dai::SmallSet< size_t > * >(argp7));
    }
  }
  (arg1)->findLoopClusters(*arg2,*arg3,arg4,(size_t const &)*arg5,arg6,arg7);
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( GLC_findOVLoopClusters, _wrap_GLC_findOVLoopClusters, std::string() ) {
  dai::GLC *arg1 = (dai::GLC *) 0 ;
  dai::SmallSet< size_t > *arg2 = 0 ;
  std::set< dai::SmallSet< size_t > > *arg3 = 0 ;
  SwigValueWrapper< dai::SmallSet< size_t > > arg4 ;
  size_t *arg5 = 0 ;
  size_t arg6 ;
  SwigValueWrapper< dai::SmallSet< size_t > > arg7 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  size_t temp5 ;
  size_t val5 ;
  int ecode5 = 0 ;
  size_t val6 ;
  int ecode6 = 0 ;
  void *argp7 ;
  int res7 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("GLC_findOVLoopClusters",args.length(),7,7,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__GLC, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GLC_findOVLoopClusters" "', argument " "1"" of type '" "dai::GLC *""'"); 
  }
  arg1 = reinterpret_cast< dai::GLC * >(argp1);
  res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_dai__SmallSetT_size_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GLC_findOVLoopClusters" "', argument " "2"" of type '" "dai::SmallSet< size_t > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GLC_findOVLoopClusters" "', argument " "2"" of type '" "dai::SmallSet< size_t > &""'"); 
  }
  arg2 = reinterpret_cast< dai::SmallSet< size_t > * >(argp2);
  res3 = SWIG_ConvertPtr(args(2), &argp3, SWIGTYPE_p_std__setT_dai__SmallSetT_size_t_t_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "GLC_findOVLoopClusters" "', argument " "3"" of type '" "std::set< dai::SmallSet< size_t > > &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GLC_findOVLoopClusters" "', argument " "3"" of type '" "std::set< dai::SmallSet< size_t > > &""'"); 
  }
  arg3 = reinterpret_cast< std::set< dai::SmallSet< size_t > > * >(argp3);
  {
    res4 = SWIG_ConvertPtr(args(3), &argp4, SWIGTYPE_p_dai__SmallSetT_size_t_t,  0 );
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "GLC_findOVLoopClusters" "', argument " "4"" of type '" "dai::SmallSet< size_t >""'"); 
    }  
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GLC_findOVLoopClusters" "', argument " "4"" of type '" "dai::SmallSet< size_t >""'");
    } else {
      arg4 = *(reinterpret_cast< dai::SmallSet< size_t > * >(argp4));
    }
  }
  ecode5 = SWIG_AsVal_size_t(args(4), &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "GLC_findOVLoopClusters" "', argument " "5"" of type '" "size_t""'");
  } 
  temp5 = static_cast< size_t >(val5);
  arg5 = &temp5;
  ecode6 = SWIG_AsVal_size_t(args(5), &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "GLC_findOVLoopClusters" "', argument " "6"" of type '" "size_t""'");
  } 
  arg6 = static_cast< size_t >(val6);
  {
    res7 = SWIG_ConvertPtr(args(6), &argp7, SWIGTYPE_p_dai__SmallSetT_size_t_t,  0 );
    if (!SWIG_IsOK(res7)) {
      SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "GLC_findOVLoopClusters" "', argument " "7"" of type '" "dai::SmallSet< size_t >""'"); 
    }  
    if (!argp7) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GLC_findOVLoopClusters" "', argument " "7"" of type '" "dai::SmallSet< size_t >""'");
    } else {
      arg7 = *(reinterpret_cast< dai::SmallSet< size_t > * >(argp7));
    }
  }
  (arg1)->findOVLoopClusters(*arg2,*arg3,arg4,(size_t const &)*arg5,arg6,arg7);
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( delete_GLC, _wrap_delete_GLC, std::string() ) {
  dai::GLC *arg1 = (dai::GLC *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("delete_GLC",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_dai__GLC, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_GLC" "', argument " "1"" of type '" "dai::GLC *""'"); 
  }
  arg1 = reinterpret_cast< dai::GLC * >(argp1);
  delete arg1;
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static swig_octave_member swig_GLC_members[] = {
{"props",0,_wrap_GLC_props_get,_wrap_GLC_props_set,0,0},
{"clone",_wrap_GLC_clone,0,0,0,0},
{"construct",_wrap_GLC_construct,0,0,0,0},
{"name",_wrap_GLC_name,0,0,0,0},
{"belief",_wrap_GLC_belief,0,0,0,0},
{"beliefV",_wrap_GLC_beliefV,0,0,0,0},
{"beliefs",_wrap_GLC_beliefs,0,0,0,0},
{"logZ",_wrap_GLC_logZ,0,0,0,0},
{"init",_wrap_GLC_init,0,0,0,0},
{"run",_wrap_GLC_run,0,0,0,0},
{"maxDiff",_wrap_GLC_maxDiff,0,0,0,0},
{"Iterations",_wrap_GLC_Iterations,0,0,0,0},
{"setMaxIter",_wrap_GLC_setMaxIter,0,0,0,0},
{"setProperties",_wrap_GLC_setProperties,0,0,0,0},
{"getProperties",_wrap_GLC_getProperties,0,0,0,0},
{"printProperties",_wrap_GLC_printProperties,0,0,0,0},
{"CW",_wrap_GLC_CW,0,0,0,0},
{"CalcCavityDist",_wrap_GLC_CalcCavityDist,0,0,0,0},
{"InitCavityDists",_wrap_GLC_InitCavityDists,0,0,0,0},
{"NewPancake",_wrap_GLC_NewPancake,0,0,0,0},
{"OVNewPancake",_wrap_GLC_OVNewPancake,0,0,0,0},
{"CalcBelief",_wrap_GLC_CalcBelief,0,0,0,0},
{"CalcFactorBelief",_wrap_GLC_CalcFactorBelief,0,0,0,0},
{"calcRegions",_wrap_GLC_calcRegions,0,0,0,0},
{"initCWs",_wrap_GLC_initCWs,0,0,0,0},
{"setCWs",_wrap_GLC_setCWs,0,0,0,0},
{"findLoopClusters",_wrap_GLC_findLoopClusters,0,0,0,0},
{"findOVLoopClusters",_wrap_GLC_findOVLoopClusters,0,0,0,0},
{0,0,0,0,0,0}
};
static const char *swig_GLC_base_names[] = {0};
static const swig_type_info *swig_GLC_base[] = {0};
static swig_octave_class _wrap_class_GLC = {"GLC", &SWIGTYPE_p_dai__GLC,0,_wrap_new_GLC,0,_wrap_delete_GLC,swig_GLC_members,swig_GLC_base_names,swig_GLC_base };


static const struct swig_octave_member swig_globals[] = {
{"delete_OctSwigIterator",_wrap_delete_OctSwigIterator,0,0,2,0},
{"OctSwigIterator_value",_wrap_OctSwigIterator_value,0,0,2,0},
{"OctSwigIterator_incr",_wrap_OctSwigIterator_incr,0,0,2,0},
{"OctSwigIterator_decr",_wrap_OctSwigIterator_decr,0,0,2,0},
{"OctSwigIterator_distance",_wrap_OctSwigIterator_distance,0,0,2,0},
{"OctSwigIterator_equal",_wrap_OctSwigIterator_equal,0,0,2,0},
{"OctSwigIterator_copy",_wrap_OctSwigIterator_copy,0,0,2,0},
{"OctSwigIterator_next",_wrap_OctSwigIterator_next,0,0,2,0},
{"OctSwigIterator_previous",_wrap_OctSwigIterator_previous,0,0,2,0},
{"OctSwigIterator_advance",_wrap_OctSwigIterator_advance,0,0,2,0},
{"OctSwigIterator___eq__",_wrap_OctSwigIterator___eq__,0,0,2,0},
{"OctSwigIterator___ne__",_wrap_OctSwigIterator___ne__,0,0,2,0},
{"OctSwigIterator___incr__",_wrap_OctSwigIterator___incr__,0,0,2,0},
{"OctSwigIterator___decr__",_wrap_OctSwigIterator___decr__,0,0,2,0},
{"OctSwigIterator___add__",_wrap_OctSwigIterator___add__,0,0,2,0},
{"OctSwigIterator___sub__",_wrap_OctSwigIterator___sub__,0,0,2,0},
{"IntVector_pop",_wrap_IntVector_pop,0,0,2,0},
{"IntVector___paren__",_wrap_IntVector___paren__,0,0,2,0},
{"IntVector___paren_asgn__",_wrap_IntVector___paren_asgn__,0,0,2,0},
{"IntVector_append",_wrap_IntVector_append,0,0,2,0},
{"IntVector_empty",_wrap_IntVector_empty,0,0,2,0},
{"IntVector_size",_wrap_IntVector_size,0,0,2,0},
{"IntVector_swap",_wrap_IntVector_swap,0,0,2,0},
{"IntVector_begin",_wrap_IntVector_begin,0,0,2,0},
{"IntVector_end",_wrap_IntVector_end,0,0,2,0},
{"IntVector_rbegin",_wrap_IntVector_rbegin,0,0,2,0},
{"IntVector_rend",_wrap_IntVector_rend,0,0,2,0},
{"IntVector_clear",_wrap_IntVector_clear,0,0,2,0},
{"IntVector_get_allocator",_wrap_IntVector_get_allocator,0,0,2,0},
{"IntVector_pop_back",_wrap_IntVector_pop_back,0,0,2,0},
{"IntVector_erase",_wrap_IntVector_erase,0,0,2,0},
{"new_IntVector",_wrap_new_IntVector,0,0,2,0},
{"IntVector_push_back",_wrap_IntVector_push_back,0,0,2,0},
{"IntVector_front",_wrap_IntVector_front,0,0,2,0},
{"IntVector_back",_wrap_IntVector_back,0,0,2,0},
{"IntVector_assign",_wrap_IntVector_assign,0,0,2,0},
{"IntVector_resize",_wrap_IntVector_resize,0,0,2,0},
{"IntVector_insert",_wrap_IntVector_insert,0,0,2,0},
{"IntVector_reserve",_wrap_IntVector_reserve,0,0,2,0},
{"IntVector_capacity",_wrap_IntVector_capacity,0,0,2,0},
{"delete_IntVector",_wrap_delete_IntVector,0,0,2,0},
{"BigInt_size_t",_wrap_BigInt_size_t,0,0,2,0},
{"isnan",_wrap_isnan,0,0,2,0},
{"log",_wrap_log,0,0,2,0},
{"log0",_wrap_log0,0,0,2,0},
{"exp",_wrap_exp,0,0,2,0},
{"pow",_wrap_pow,0,0,2,0},
{"toc",_wrap_toc,0,0,2,0},
{"rnd_seed",_wrap_rnd_seed,0,0,2,0},
{"rnd_uniform",_wrap_rnd_uniform,0,0,2,0},
{"rnd_stdnormal",_wrap_rnd_stdnormal,0,0,2,0},
{"rnd_int",_wrap_rnd_int,0,0,2,0},
{"rnd",_wrap_rnd,0,0,2,0},
{"tokenizeString",_wrap_tokenizeString,0,0,2,0},
{"new_Var",_wrap_new_Var,0,0,2,0},
{"Var_label",_wrap_Var_label,0,0,2,0},
{"Var_states",_wrap_Var_states,0,0,2,0},
{"Var___lt__",_wrap_Var___lt__,0,0,2,0},
{"Var___gt__",_wrap_Var___gt__,0,0,2,0},
{"Var___le__",_wrap_Var___le__,0,0,2,0},
{"Var___ge__",_wrap_Var___ge__,0,0,2,0},
{"Var___ne__",_wrap_Var___ne__,0,0,2,0},
{"Var___eq__",_wrap_Var___eq__,0,0,2,0},
{"Var_toString",_wrap_Var_toString,0,0,2,0},
{"Var___str__",_wrap_Var___str__,0,0,2,0},
{"Var___str",_wrap_Var___str,0,0,2,0},
{"delete_Var",_wrap_delete_Var,0,0,2,0},
{"new_SmallSetVar",_wrap_new_SmallSetVar,0,0,2,0},
{"SmallSetVar_insert",_wrap_SmallSetVar_insert,0,0,2,0},
{"SmallSetVar_erase",_wrap_SmallSetVar_erase,0,0,2,0},
{"SmallSetVar___div__",_wrap_SmallSetVar___div__,0,0,2,0},
{"SmallSetVar_intersects",_wrap_SmallSetVar_intersects,0,0,2,0},
{"SmallSetVar_contains",_wrap_SmallSetVar_contains,0,0,2,0},
{"SmallSetVar_size",_wrap_SmallSetVar_size,0,0,2,0},
{"SmallSetVar_empty",_wrap_SmallSetVar_empty,0,0,2,0},
{"SmallSetVar_elements",_wrap_SmallSetVar_elements,0,0,2,0},
{"SmallSetVar_begin",_wrap_SmallSetVar_begin,0,0,2,0},
{"SmallSetVar_end",_wrap_SmallSetVar_end,0,0,2,0},
{"SmallSetVar_rbegin",_wrap_SmallSetVar_rbegin,0,0,2,0},
{"SmallSetVar_rend",_wrap_SmallSetVar_rend,0,0,2,0},
{"SmallSetVar_front",_wrap_SmallSetVar_front,0,0,2,0},
{"SmallSetVar_back",_wrap_SmallSetVar_back,0,0,2,0},
{"__eq__",_wrap___eq__,0,0,2,0},
{"__ne__",_wrap___ne__,0,0,2,0},
{"__lt__",_wrap___lt__,0,0,2,0},
{"SmallSetVar_toString",_wrap_SmallSetVar_toString,0,0,2,0},
{"SmallSetVar___str__",_wrap_SmallSetVar___str__,0,0,2,0},
{"SmallSetVar___str",_wrap_SmallSetVar___str,0,0,2,0},
{"delete_SmallSetVar",_wrap_delete_SmallSetVar,0,0,2,0},
{"calcLinearState",_wrap_calcLinearState,0,0,2,0},
{"calcState",_wrap_calcState,0,0,2,0},
{"new_VarSet",_wrap_new_VarSet,0,0,2,0},
{"VarSet_nrStates",_wrap_VarSet_nrStates,0,0,2,0},
{"VarSet_toString",_wrap_VarSet_toString,0,0,2,0},
{"VarSet_append",_wrap_VarSet_append,0,0,2,0},
{"VarSet___str__",_wrap_VarSet___str__,0,0,2,0},
{"VarSet___str",_wrap_VarSet___str,0,0,2,0},
{"delete_VarSet",_wrap_delete_VarSet,0,0,2,0},
{"new_Prob",_wrap_new_Prob,0,0,2,0},
{"Prob_begin",_wrap_Prob_begin,0,0,2,0},
{"Prob_end",_wrap_Prob_end,0,0,2,0},
{"Prob_rbegin",_wrap_Prob_rbegin,0,0,2,0},
{"Prob_rend",_wrap_Prob_rend,0,0,2,0},
{"Prob_resize",_wrap_Prob_resize,0,0,2,0},
{"Prob_get",_wrap_Prob_get,0,0,2,0},
{"Prob_set",_wrap_Prob_set,0,0,2,0},
{"Prob_p",_wrap_Prob_p,0,0,2,0},
{"Prob_size",_wrap_Prob_size,0,0,2,0},
{"Prob_entropy",_wrap_Prob_entropy,0,0,2,0},
{"Prob_max",_wrap_Prob_max,0,0,2,0},
{"Prob_min",_wrap_Prob_min,0,0,2,0},
{"Prob_sum",_wrap_Prob_sum,0,0,2,0},
{"Prob_sumAbs",_wrap_Prob_sumAbs,0,0,2,0},
{"Prob_maxAbs",_wrap_Prob_maxAbs,0,0,2,0},
{"Prob_hasNaNs",_wrap_Prob_hasNaNs,0,0,2,0},
{"Prob_hasNegatives",_wrap_Prob_hasNegatives,0,0,2,0},
{"Prob_argmax",_wrap_Prob_argmax,0,0,2,0},
{"Prob_draw",_wrap_Prob_draw,0,0,2,0},
{"Prob___lt__",_wrap_Prob___lt__,0,0,2,0},
{"Prob___eq__",_wrap_Prob___eq__,0,0,2,0},
{"Prob_toString",_wrap_Prob_toString,0,0,2,0},
{"Prob___uminus__",_wrap_Prob___uminus__,0,0,2,0},
{"Prob_abs",_wrap_Prob_abs,0,0,2,0},
{"Prob_exp",_wrap_Prob_exp,0,0,2,0},
{"Prob_log",_wrap_Prob_log,0,0,2,0},
{"Prob_inverse",_wrap_Prob_inverse,0,0,2,0},
{"Prob_normalized",_wrap_Prob_normalized,0,0,2,0},
{"Prob_randomize",_wrap_Prob_randomize,0,0,2,0},
{"Prob_setUniform",_wrap_Prob_setUniform,0,0,2,0},
{"Prob_takeAbs",_wrap_Prob_takeAbs,0,0,2,0},
{"Prob_takeExp",_wrap_Prob_takeExp,0,0,2,0},
{"Prob_takeLog",_wrap_Prob_takeLog,0,0,2,0},
{"Prob_normalize",_wrap_Prob_normalize,0,0,2,0},
{"Prob_fill",_wrap_Prob_fill,0,0,2,0},
{"Prob_divide",_wrap_Prob_divide,0,0,2,0},
{"Prob___add__",_wrap_Prob___add__,0,0,2,0},
{"Prob___sub__",_wrap_Prob___sub__,0,0,2,0},
{"Prob___mul__",_wrap_Prob___mul__,0,0,2,0},
{"Prob___div__",_wrap_Prob___div__,0,0,2,0},
{"Prob_divided_by",_wrap_Prob_divided_by,0,0,2,0},
{"Prob___xor__",_wrap_Prob___xor__,0,0,2,0},
{"Prob___getitem__",_wrap_Prob___getitem__,0,0,2,0},
{"Prob___setitem__",_wrap_Prob___setitem__,0,0,2,0},
{"Prob___paren__",_wrap_Prob___paren__,0,0,2,0},
{"Prob___paren_asgn__",_wrap_Prob___paren_asgn__,0,0,2,0},
{"Prob___str__",_wrap_Prob___str__,0,0,2,0},
{"Prob___str",_wrap_Prob___str,0,0,2,0},
{"delete_Prob",_wrap_delete_Prob,0,0,2,0},
{"createFactorIsing",_wrap_createFactorIsing,0,0,2,0},
{"createFactorExpGauss",_wrap_createFactorExpGauss,0,0,2,0},
{"createFactorPotts",_wrap_createFactorPotts,0,0,2,0},
{"createFactorDelta",_wrap_createFactorDelta,0,0,2,0},
{"new_Factor",_wrap_new_Factor,0,0,2,0},
{"Factor_set",_wrap_Factor_set,0,0,2,0},
{"Factor_get",_wrap_Factor_get,0,0,2,0},
{"Factor_p",_wrap_Factor_p,0,0,2,0},
{"Factor_vars",_wrap_Factor_vars,0,0,2,0},
{"Factor_nrStates",_wrap_Factor_nrStates,0,0,2,0},
{"Factor_entropy",_wrap_Factor_entropy,0,0,2,0},
{"Factor_max",_wrap_Factor_max,0,0,2,0},
{"Factor_min",_wrap_Factor_min,0,0,2,0},
{"Factor_sum",_wrap_Factor_sum,0,0,2,0},
{"Factor_sumAbs",_wrap_Factor_sumAbs,0,0,2,0},
{"Factor_maxAbs",_wrap_Factor_maxAbs,0,0,2,0},
{"Factor_hasNaNs",_wrap_Factor_hasNaNs,0,0,2,0},
{"Factor_hasNegatives",_wrap_Factor_hasNegatives,0,0,2,0},
{"Factor_strength",_wrap_Factor_strength,0,0,2,0},
{"Factor___eq__",_wrap_Factor___eq__,0,0,2,0},
{"Factor_toString",_wrap_Factor_toString,0,0,2,0},
{"Factor___uminus__",_wrap_Factor___uminus__,0,0,2,0},
{"Factor_abs",_wrap_Factor_abs,0,0,2,0},
{"Factor_exp",_wrap_Factor_exp,0,0,2,0},
{"Factor_log",_wrap_Factor_log,0,0,2,0},
{"Factor_inverse",_wrap_Factor_inverse,0,0,2,0},
{"Factor_normalized",_wrap_Factor_normalized,0,0,2,0},
{"Factor_randomize",_wrap_Factor_randomize,0,0,2,0},
{"Factor_setUniform",_wrap_Factor_setUniform,0,0,2,0},
{"Factor_takeAbs",_wrap_Factor_takeAbs,0,0,2,0},
{"Factor_takeExp",_wrap_Factor_takeExp,0,0,2,0},
{"Factor_takeLog",_wrap_Factor_takeLog,0,0,2,0},
{"Factor_normalize",_wrap_Factor_normalize,0,0,2,0},
{"Factor_fill",_wrap_Factor_fill,0,0,2,0},
{"Factor___xor__",_wrap_Factor___xor__,0,0,2,0},
{"Factor___add__",_wrap_Factor___add__,0,0,2,0},
{"Factor___sub__",_wrap_Factor___sub__,0,0,2,0},
{"Factor___mul__",_wrap_Factor___mul__,0,0,2,0},
{"Factor___div__",_wrap_Factor___div__,0,0,2,0},
{"Factor_slice",_wrap_Factor_slice,0,0,2,0},
{"Factor_embed",_wrap_Factor_embed,0,0,2,0},
{"Factor_marginal",_wrap_Factor_marginal,0,0,2,0},
{"Factor_maxMarginal",_wrap_Factor_maxMarginal,0,0,2,0},
{"Factor___getitem__",_wrap_Factor___getitem__,0,0,2,0},
{"Factor___setitem__",_wrap_Factor___setitem__,0,0,2,0},
{"Factor___paren__",_wrap_Factor___paren__,0,0,2,0},
{"Factor___paren_asgn__",_wrap_Factor___paren_asgn__,0,0,2,0},
{"Factor___str__",_wrap_Factor___str__,0,0,2,0},
{"Factor___str",_wrap_Factor___str,0,0,2,0},
{"delete_Factor",_wrap_delete_Factor,0,0,2,0},
{"VecFactor_pop",_wrap_VecFactor_pop,0,0,2,0},
{"VecFactor___paren__",_wrap_VecFactor___paren__,0,0,2,0},
{"VecFactor___paren_asgn__",_wrap_VecFactor___paren_asgn__,0,0,2,0},
{"VecFactor_append",_wrap_VecFactor_append,0,0,2,0},
{"VecFactor_empty",_wrap_VecFactor_empty,0,0,2,0},
{"VecFactor_size",_wrap_VecFactor_size,0,0,2,0},
{"VecFactor_swap",_wrap_VecFactor_swap,0,0,2,0},
{"VecFactor_begin",_wrap_VecFactor_begin,0,0,2,0},
{"VecFactor_end",_wrap_VecFactor_end,0,0,2,0},
{"VecFactor_rbegin",_wrap_VecFactor_rbegin,0,0,2,0},
{"VecFactor_rend",_wrap_VecFactor_rend,0,0,2,0},
{"VecFactor_clear",_wrap_VecFactor_clear,0,0,2,0},
{"VecFactor_get_allocator",_wrap_VecFactor_get_allocator,0,0,2,0},
{"VecFactor_pop_back",_wrap_VecFactor_pop_back,0,0,2,0},
{"VecFactor_erase",_wrap_VecFactor_erase,0,0,2,0},
{"new_VecFactor",_wrap_new_VecFactor,0,0,2,0},
{"VecFactor_push_back",_wrap_VecFactor_push_back,0,0,2,0},
{"VecFactor_front",_wrap_VecFactor_front,0,0,2,0},
{"VecFactor_back",_wrap_VecFactor_back,0,0,2,0},
{"VecFactor_assign",_wrap_VecFactor_assign,0,0,2,0},
{"VecFactor_resize",_wrap_VecFactor_resize,0,0,2,0},
{"VecFactor_insert",_wrap_VecFactor_insert,0,0,2,0},
{"VecFactor_reserve",_wrap_VecFactor_reserve,0,0,2,0},
{"VecFactor_capacity",_wrap_VecFactor_capacity,0,0,2,0},
{"delete_VecFactor",_wrap_delete_VecFactor,0,0,2,0},
{"VecVecFactor_pop",_wrap_VecVecFactor_pop,0,0,2,0},
{"VecVecFactor___paren__",_wrap_VecVecFactor___paren__,0,0,2,0},
{"VecVecFactor___paren_asgn__",_wrap_VecVecFactor___paren_asgn__,0,0,2,0},
{"VecVecFactor_append",_wrap_VecVecFactor_append,0,0,2,0},
{"VecVecFactor_empty",_wrap_VecVecFactor_empty,0,0,2,0},
{"VecVecFactor_size",_wrap_VecVecFactor_size,0,0,2,0},
{"VecVecFactor_swap",_wrap_VecVecFactor_swap,0,0,2,0},
{"VecVecFactor_begin",_wrap_VecVecFactor_begin,0,0,2,0},
{"VecVecFactor_end",_wrap_VecVecFactor_end,0,0,2,0},
{"VecVecFactor_rbegin",_wrap_VecVecFactor_rbegin,0,0,2,0},
{"VecVecFactor_rend",_wrap_VecVecFactor_rend,0,0,2,0},
{"VecVecFactor_clear",_wrap_VecVecFactor_clear,0,0,2,0},
{"VecVecFactor_get_allocator",_wrap_VecVecFactor_get_allocator,0,0,2,0},
{"VecVecFactor_pop_back",_wrap_VecVecFactor_pop_back,0,0,2,0},
{"VecVecFactor_erase",_wrap_VecVecFactor_erase,0,0,2,0},
{"new_VecVecFactor",_wrap_new_VecVecFactor,0,0,2,0},
{"VecVecFactor_push_back",_wrap_VecVecFactor_push_back,0,0,2,0},
{"VecVecFactor_front",_wrap_VecVecFactor_front,0,0,2,0},
{"VecVecFactor_back",_wrap_VecVecFactor_back,0,0,2,0},
{"VecVecFactor_assign",_wrap_VecVecFactor_assign,0,0,2,0},
{"VecVecFactor_resize",_wrap_VecVecFactor_resize,0,0,2,0},
{"VecVecFactor_insert",_wrap_VecVecFactor_insert,0,0,2,0},
{"VecVecFactor_reserve",_wrap_VecVecFactor_reserve,0,0,2,0},
{"VecVecFactor_capacity",_wrap_VecVecFactor_capacity,0,0,2,0},
{"delete_VecVecFactor",_wrap_delete_VecVecFactor,0,0,2,0},
{"Neighbor_iter_set",_wrap_Neighbor_iter_set,0,0,2,0},
{"Neighbor_iter_get",_wrap_Neighbor_iter_get,0,0,2,0},
{"Neighbor_node_set",_wrap_Neighbor_node_set,0,0,2,0},
{"Neighbor_node_get",_wrap_Neighbor_node_get,0,0,2,0},
{"Neighbor_dual_set",_wrap_Neighbor_dual_set,0,0,2,0},
{"Neighbor_dual_get",_wrap_Neighbor_dual_get,0,0,2,0},
{"new_Neighbor",_wrap_new_Neighbor,0,0,2,0},
{"Neighbor_toInt",_wrap_Neighbor_toInt,0,0,2,0},
{"delete_Neighbor",_wrap_delete_Neighbor,0,0,2,0},
{"new_GraphAL",_wrap_new_GraphAL,0,0,2,0},
{"GraphAL_nb",_wrap_GraphAL_nb,0,0,2,0},
{"GraphAL_addNode",_wrap_GraphAL_addNode,0,0,2,0},
{"GraphAL_addEdge",_wrap_GraphAL_addEdge,0,0,2,0},
{"GraphAL_eraseNode",_wrap_GraphAL_eraseNode,0,0,2,0},
{"GraphAL_eraseEdge",_wrap_GraphAL_eraseEdge,0,0,2,0},
{"GraphAL_nrNodes",_wrap_GraphAL_nrNodes,0,0,2,0},
{"GraphAL_nrEdges",_wrap_GraphAL_nrEdges,0,0,2,0},
{"GraphAL_hasEdge",_wrap_GraphAL_hasEdge,0,0,2,0},
{"GraphAL_findNb",_wrap_GraphAL_findNb,0,0,2,0},
{"GraphAL_nbSet",_wrap_GraphAL_nbSet,0,0,2,0},
{"GraphAL_isConnected",_wrap_GraphAL_isConnected,0,0,2,0},
{"GraphAL_isTree",_wrap_GraphAL_isTree,0,0,2,0},
{"GraphAL_checkConsistency",_wrap_GraphAL_checkConsistency,0,0,2,0},
{"GraphAL___eq__",_wrap_GraphAL___eq__,0,0,2,0},
{"GraphAL_printDot",_wrap_GraphAL_printDot,0,0,2,0},
{"GraphAL_toString",_wrap_GraphAL_toString,0,0,2,0},
{"GraphAL___str__",_wrap_GraphAL___str__,0,0,2,0},
{"GraphAL___str",_wrap_GraphAL___str,0,0,2,0},
{"delete_GraphAL",_wrap_delete_GraphAL,0,0,2,0},
{"createGraphFull",_wrap_createGraphFull,0,0,2,0},
{"createGraphGrid",_wrap_createGraphGrid,0,0,2,0},
{"createGraphGrid3D",_wrap_createGraphGrid3D,0,0,2,0},
{"createGraphLoop",_wrap_createGraphLoop,0,0,2,0},
{"createGraphTree",_wrap_createGraphTree,0,0,2,0},
{"createGraphRegular",_wrap_createGraphRegular,0,0,2,0},
{"new_BipartiteGraph",_wrap_new_BipartiteGraph,0,0,2,0},
{"BipartiteGraph_nb1",_wrap_BipartiteGraph_nb1,0,0,2,0},
{"BipartiteGraph_nb2",_wrap_BipartiteGraph_nb2,0,0,2,0},
{"BipartiteGraph_addNode1",_wrap_BipartiteGraph_addNode1,0,0,2,0},
{"BipartiteGraph_addNode2",_wrap_BipartiteGraph_addNode2,0,0,2,0},
{"BipartiteGraph_addEdge",_wrap_BipartiteGraph_addEdge,0,0,2,0},
{"BipartiteGraph_eraseNode1",_wrap_BipartiteGraph_eraseNode1,0,0,2,0},
{"BipartiteGraph_eraseNode2",_wrap_BipartiteGraph_eraseNode2,0,0,2,0},
{"BipartiteGraph_eraseEdge",_wrap_BipartiteGraph_eraseEdge,0,0,2,0},
{"BipartiteGraph_nrNodes1",_wrap_BipartiteGraph_nrNodes1,0,0,2,0},
{"BipartiteGraph_nrNodes2",_wrap_BipartiteGraph_nrNodes2,0,0,2,0},
{"BipartiteGraph_nrEdges",_wrap_BipartiteGraph_nrEdges,0,0,2,0},
{"BipartiteGraph_hasEdge",_wrap_BipartiteGraph_hasEdge,0,0,2,0},
{"BipartiteGraph_findNb1",_wrap_BipartiteGraph_findNb1,0,0,2,0},
{"BipartiteGraph_findNb2",_wrap_BipartiteGraph_findNb2,0,0,2,0},
{"BipartiteGraph_nb1Set",_wrap_BipartiteGraph_nb1Set,0,0,2,0},
{"BipartiteGraph_nb2Set",_wrap_BipartiteGraph_nb2Set,0,0,2,0},
{"BipartiteGraph_delta1",_wrap_BipartiteGraph_delta1,0,0,2,0},
{"BipartiteGraph_delta2",_wrap_BipartiteGraph_delta2,0,0,2,0},
{"BipartiteGraph_isConnected",_wrap_BipartiteGraph_isConnected,0,0,2,0},
{"BipartiteGraph_isTree",_wrap_BipartiteGraph_isTree,0,0,2,0},
{"BipartiteGraph___eq__",_wrap_BipartiteGraph___eq__,0,0,2,0},
{"BipartiteGraph_checkConsistency",_wrap_BipartiteGraph_checkConsistency,0,0,2,0},
{"BipartiteGraph_printDot",_wrap_BipartiteGraph_printDot,0,0,2,0},
{"BipartiteGraph_toString",_wrap_BipartiteGraph_toString,0,0,2,0},
{"BipartiteGraph___str__",_wrap_BipartiteGraph___str__,0,0,2,0},
{"BipartiteGraph___str",_wrap_BipartiteGraph___str,0,0,2,0},
{"delete_BipartiteGraph",_wrap_delete_BipartiteGraph,0,0,2,0},
{"new_FactorGraph",_wrap_new_FactorGraph,0,0,2,0},
{"delete_FactorGraph",_wrap_delete_FactorGraph,0,0,2,0},
{"FactorGraph_clone",_wrap_FactorGraph_clone,0,0,2,0},
{"FactorGraph_var",_wrap_FactorGraph_var,0,0,2,0},
{"FactorGraph_vars",_wrap_FactorGraph_vars,0,0,2,0},
{"FactorGraph_factor",_wrap_FactorGraph_factor,0,0,2,0},
{"FactorGraph_factors",_wrap_FactorGraph_factors,0,0,2,0},
{"FactorGraph_nbV",_wrap_FactorGraph_nbV,0,0,2,0},
{"FactorGraph_nbF",_wrap_FactorGraph_nbF,0,0,2,0},
{"FactorGraph_bipGraph",_wrap_FactorGraph_bipGraph,0,0,2,0},
{"FactorGraph_nrVars",_wrap_FactorGraph_nrVars,0,0,2,0},
{"FactorGraph_nrFactors",_wrap_FactorGraph_nrFactors,0,0,2,0},
{"FactorGraph_nrEdges",_wrap_FactorGraph_nrEdges,0,0,2,0},
{"FactorGraph_findVar",_wrap_FactorGraph_findVar,0,0,2,0},
{"FactorGraph_findVars",_wrap_FactorGraph_findVars,0,0,2,0},
{"FactorGraph_findFactor",_wrap_FactorGraph_findFactor,0,0,2,0},
{"FactorGraph_inds2vars",_wrap_FactorGraph_inds2vars,0,0,2,0},
{"FactorGraph_Delta",_wrap_FactorGraph_Delta,0,0,2,0},
{"FactorGraph_delta",_wrap_FactorGraph_delta,0,0,2,0},
{"FactorGraph_Deltai",_wrap_FactorGraph_Deltai,0,0,2,0},
{"FactorGraph_deltai",_wrap_FactorGraph_deltai,0,0,2,0},
{"FactorGraph_isConnected",_wrap_FactorGraph_isConnected,0,0,2,0},
{"FactorGraph_isTree",_wrap_FactorGraph_isTree,0,0,2,0},
{"FactorGraph_isPairwise",_wrap_FactorGraph_isPairwise,0,0,2,0},
{"FactorGraph_isBinary",_wrap_FactorGraph_isBinary,0,0,2,0},
{"FactorGraph_MarkovGraph",_wrap_FactorGraph_MarkovGraph,0,0,2,0},
{"FactorGraph_isMaximal",_wrap_FactorGraph_isMaximal,0,0,2,0},
{"FactorGraph_maximalFactor",_wrap_FactorGraph_maximalFactor,0,0,2,0},
{"FactorGraph_maximalFactorDomains",_wrap_FactorGraph_maximalFactorDomains,0,0,2,0},
{"FactorGraph_logScore",_wrap_FactorGraph_logScore,0,0,2,0},
{"FactorGraph_setFactor",_wrap_FactorGraph_setFactor,0,0,2,0},
{"FactorGraph_setFactors",_wrap_FactorGraph_setFactors,0,0,2,0},
{"FactorGraph_backupFactor",_wrap_FactorGraph_backupFactor,0,0,2,0},
{"FactorGraph_restoreFactor",_wrap_FactorGraph_restoreFactor,0,0,2,0},
{"FactorGraph_backupFactors",_wrap_FactorGraph_backupFactors,0,0,2,0},
{"FactorGraph_restoreFactors",_wrap_FactorGraph_restoreFactors,0,0,2,0},
{"FactorGraph_maximalFactors",_wrap_FactorGraph_maximalFactors,0,0,2,0},
{"FactorGraph_clamped",_wrap_FactorGraph_clamped,0,0,2,0},
{"FactorGraph_clamp",_wrap_FactorGraph_clamp,0,0,2,0},
{"FactorGraph_clampVar",_wrap_FactorGraph_clampVar,0,0,2,0},
{"FactorGraph_clampFactor",_wrap_FactorGraph_clampFactor,0,0,2,0},
{"FactorGraph_makeCavity",_wrap_FactorGraph_makeCavity,0,0,2,0},
{"FactorGraph_makeRegionCavity",_wrap_FactorGraph_makeRegionCavity,0,0,2,0},
{"FactorGraph_ReadFromFile",_wrap_FactorGraph_ReadFromFile,0,0,2,0},
{"FactorGraph_WriteToFile",_wrap_FactorGraph_WriteToFile,0,0,2,0},
{"FactorGraph_toString",_wrap_FactorGraph_toString,0,0,2,0},
{"FactorGraph_fromString",_wrap_FactorGraph_fromString,0,0,2,0},
{"FactorGraph___str__",_wrap_FactorGraph___str__,0,0,2,0},
{"FactorGraph___str",_wrap_FactorGraph___str,0,0,2,0},
{"FactorGraph_printDot",_wrap_FactorGraph_printDot,0,0,2,0},
{"new_Region",_wrap_new_Region,0,0,2,0},
{"Region_c",_wrap_Region_c,0,0,2,0},
{"delete_Region",_wrap_delete_Region,0,0,2,0},
{"new_FRegion",_wrap_new_FRegion,0,0,2,0},
{"FRegion_c",_wrap_FRegion_c,0,0,2,0},
{"delete_FRegion",_wrap_delete_FRegion,0,0,2,0},
{"new_RegionGraph",_wrap_new_RegionGraph,0,0,2,0},
{"RegionGraph_clone",_wrap_RegionGraph_clone,0,0,2,0},
{"RegionGraph_nrORs",_wrap_RegionGraph_nrORs,0,0,2,0},
{"RegionGraph_nrIRs",_wrap_RegionGraph_nrIRs,0,0,2,0},
{"RegionGraph_OR",_wrap_RegionGraph_OR,0,0,2,0},
{"RegionGraph_IR",_wrap_RegionGraph_IR,0,0,2,0},
{"RegionGraph_fac2OR",_wrap_RegionGraph_fac2OR,0,0,2,0},
{"RegionGraph_nbOR",_wrap_RegionGraph_nbOR,0,0,2,0},
{"RegionGraph_nbIR",_wrap_RegionGraph_nbIR,0,0,2,0},
{"RegionGraph_DAG",_wrap_RegionGraph_DAG,0,0,2,0},
{"RegionGraph_checkCountingNumbers",_wrap_RegionGraph_checkCountingNumbers,0,0,2,0},
{"RegionGraph_setFactor",_wrap_RegionGraph_setFactor,0,0,2,0},
{"RegionGraph_setFactors",_wrap_RegionGraph_setFactors,0,0,2,0},
{"RegionGraph_ReadFromFile",_wrap_RegionGraph_ReadFromFile,0,0,2,0},
{"RegionGraph_WriteToFile",_wrap_RegionGraph_WriteToFile,0,0,2,0},
{"RegionGraph_toString",_wrap_RegionGraph_toString,0,0,2,0},
{"RegionGraph_printDot",_wrap_RegionGraph_printDot,0,0,2,0},
{"RegionGraph___str__",_wrap_RegionGraph___str__,0,0,2,0},
{"RegionGraph___str",_wrap_RegionGraph___str,0,0,2,0},
{"delete_RegionGraph",_wrap_delete_RegionGraph,0,0,2,0},
{"new_PairIntBigInt",_wrap_new_PairIntBigInt,0,0,2,0},
{"PairIntBigInt_first_set",_wrap_PairIntBigInt_first_set,0,0,2,0},
{"PairIntBigInt_first_get",_wrap_PairIntBigInt_first_get,0,0,2,0},
{"PairIntBigInt_second_set",_wrap_PairIntBigInt_second_set,0,0,2,0},
{"PairIntBigInt_second_get",_wrap_PairIntBigInt_second_get,0,0,2,0},
{"delete_PairIntBigInt",_wrap_delete_PairIntBigInt,0,0,2,0},
{"new_ClusterGraph",_wrap_new_ClusterGraph,0,0,2,0},
{"ClusterGraph_bipGraph",_wrap_ClusterGraph_bipGraph,0,0,2,0},
{"ClusterGraph_nrVars",_wrap_ClusterGraph_nrVars,0,0,2,0},
{"ClusterGraph_vars",_wrap_ClusterGraph_vars,0,0,2,0},
{"ClusterGraph_var",_wrap_ClusterGraph_var,0,0,2,0},
{"ClusterGraph_nrClusters",_wrap_ClusterGraph_nrClusters,0,0,2,0},
{"ClusterGraph_clusters",_wrap_ClusterGraph_clusters,0,0,2,0},
{"ClusterGraph_cluster",_wrap_ClusterGraph_cluster,0,0,2,0},
{"ClusterGraph_findVar",_wrap_ClusterGraph_findVar,0,0,2,0},
{"ClusterGraph_findCluster",_wrap_ClusterGraph_findCluster,0,0,2,0},
{"ClusterGraph_Delta",_wrap_ClusterGraph_Delta,0,0,2,0},
{"ClusterGraph_delta",_wrap_ClusterGraph_delta,0,0,2,0},
{"ClusterGraph_adj",_wrap_ClusterGraph_adj,0,0,2,0},
{"ClusterGraph_isMaximal",_wrap_ClusterGraph_isMaximal,0,0,2,0},
{"ClusterGraph_insert",_wrap_ClusterGraph_insert,0,0,2,0},
{"ClusterGraph_eraseNonMaximal",_wrap_ClusterGraph_eraseNonMaximal,0,0,2,0},
{"ClusterGraph_eraseSubsuming",_wrap_ClusterGraph_eraseSubsuming,0,0,2,0},
{"ClusterGraph_elimVar",_wrap_ClusterGraph_elimVar,0,0,2,0},
{"ClusterGraph_toString",_wrap_ClusterGraph_toString,0,0,2,0},
{"delete_ClusterGraph",_wrap_delete_ClusterGraph,0,0,2,0},
{"new_sequentialVariableElimination",_wrap_new_sequentialVariableElimination,0,0,2,0},
{"sequentialVariableElimination___paren__",_wrap_sequentialVariableElimination___paren__,0,0,2,0},
{"delete_sequentialVariableElimination",_wrap_delete_sequentialVariableElimination,0,0,2,0},
{"new_greedyVariableElimination",_wrap_new_greedyVariableElimination,0,0,2,0},
{"greedyVariableElimination___paren__",_wrap_greedyVariableElimination___paren__,0,0,2,0},
{"delete_greedyVariableElimination",_wrap_delete_greedyVariableElimination,0,0,2,0},
{"new_PropertySet",_wrap_new_PropertySet,0,0,2,0},
{"PropertySet_set",_wrap_PropertySet_set,0,0,2,0},
{"PropertySet___paren__",_wrap_PropertySet___paren__,0,0,2,0},
{"PropertySet_size",_wrap_PropertySet_size,0,0,2,0},
{"PropertySet_clear",_wrap_PropertySet_clear,0,0,2,0},
{"PropertySet_erase",_wrap_PropertySet_erase,0,0,2,0},
{"PropertySet_hasKey",_wrap_PropertySet_hasKey,0,0,2,0},
{"PropertySet_keys",_wrap_PropertySet_keys,0,0,2,0},
{"PropertySet_get",_wrap_PropertySet_get,0,0,2,0},
{"PropertySet_toString",_wrap_PropertySet_toString,0,0,2,0},
{"PropertySet_fromString",_wrap_PropertySet_fromString,0,0,2,0},
{"PropertySet___setitem__",_wrap_PropertySet___setitem__,0,0,2,0},
{"PropertySet___str__",_wrap_PropertySet___str__,0,0,2,0},
{"PropertySet___str",_wrap_PropertySet___str,0,0,2,0},
{"delete_PropertySet",_wrap_delete_PropertySet,0,0,2,0},
{"new_IndexFor",_wrap_new_IndexFor,0,0,2,0},
{"IndexFor_reset",_wrap_IndexFor_reset,0,0,2,0},
{"IndexFor_toInt",_wrap_IndexFor_toInt,0,0,2,0},
{"IndexFor_valid",_wrap_IndexFor_valid,0,0,2,0},
{"IndexFor_next",_wrap_IndexFor_next,0,0,2,0},
{"delete_IndexFor",_wrap_delete_IndexFor,0,0,2,0},
{"new_Permute",_wrap_new_Permute,0,0,2,0},
{"Permute_convertLinearIndex",_wrap_Permute_convertLinearIndex,0,0,2,0},
{"Permute_sigma",_wrap_Permute_sigma,0,0,2,0},
{"Permute_ranges",_wrap_Permute_ranges,0,0,2,0},
{"Permute_inverse",_wrap_Permute_inverse,0,0,2,0},
{"Permute___getitem__",_wrap_Permute___getitem__,0,0,2,0},
{"Permute___paren__",_wrap_Permute___paren__,0,0,2,0},
{"delete_Permute",_wrap_delete_Permute,0,0,2,0},
{"new_multifor",_wrap_new_multifor,0,0,2,0},
{"multifor_toInt",_wrap_multifor_toInt,0,0,2,0},
{"multifor_reset",_wrap_multifor_reset,0,0,2,0},
{"multifor_valid",_wrap_multifor_valid,0,0,2,0},
{"multifor_next",_wrap_multifor_next,0,0,2,0},
{"multifor___getitem__",_wrap_multifor___getitem__,0,0,2,0},
{"multifor___paren__",_wrap_multifor___paren__,0,0,2,0},
{"delete_multifor",_wrap_delete_multifor,0,0,2,0},
{"new_State",_wrap_new_State,0,0,2,0},
{"State_begin",_wrap_State_begin,0,0,2,0},
{"State_end",_wrap_State_end,0,0,2,0},
{"State_toInt",_wrap_State_toInt,0,0,2,0},
{"State_get",_wrap_State_get,0,0,2,0},
{"State___paren__",_wrap_State___paren__,0,0,2,0},
{"State_valid",_wrap_State_valid,0,0,2,0},
{"State_reset",_wrap_State_reset,0,0,2,0},
{"State_next",_wrap_State_next,0,0,2,0},
{"delete_State",_wrap_delete_State,0,0,2,0},
{"delete_InfAlg",_wrap_delete_InfAlg,0,0,2,0},
{"InfAlg_clone",_wrap_InfAlg_clone,0,0,2,0},
{"InfAlg_construct",_wrap_InfAlg_construct,0,0,2,0},
{"InfAlg_name",_wrap_InfAlg_name,0,0,2,0},
{"InfAlg_identify",_wrap_InfAlg_identify,0,0,2,0},
{"InfAlg_fg",_wrap_InfAlg_fg,0,0,2,0},
{"InfAlg_init",_wrap_InfAlg_init,0,0,2,0},
{"InfAlg_run",_wrap_InfAlg_run,0,0,2,0},
{"InfAlg_belief",_wrap_InfAlg_belief,0,0,2,0},
{"InfAlg_beliefV",_wrap_InfAlg_beliefV,0,0,2,0},
{"InfAlg_beliefF",_wrap_InfAlg_beliefF,0,0,2,0},
{"InfAlg_beliefs",_wrap_InfAlg_beliefs,0,0,2,0},
{"InfAlg_logZ",_wrap_InfAlg_logZ,0,0,2,0},
{"InfAlg_findMaximum",_wrap_InfAlg_findMaximum,0,0,2,0},
{"InfAlg_maxDiff",_wrap_InfAlg_maxDiff,0,0,2,0},
{"InfAlg_Iterations",_wrap_InfAlg_Iterations,0,0,2,0},
{"InfAlg_setMaxIter",_wrap_InfAlg_setMaxIter,0,0,2,0},
{"InfAlg_clamp",_wrap_InfAlg_clamp,0,0,2,0},
{"InfAlg_makeCavity",_wrap_InfAlg_makeCavity,0,0,2,0},
{"InfAlg_makeRegionCavity",_wrap_InfAlg_makeRegionCavity,0,0,2,0},
{"InfAlg_backupFactor",_wrap_InfAlg_backupFactor,0,0,2,0},
{"InfAlg_backupFactors",_wrap_InfAlg_backupFactors,0,0,2,0},
{"InfAlg_restoreFactor",_wrap_InfAlg_restoreFactor,0,0,2,0},
{"InfAlg_restoreFactors",_wrap_InfAlg_restoreFactors,0,0,2,0},
{"InfAlg_setProperties",_wrap_InfAlg_setProperties,0,0,2,0},
{"InfAlg_getProperties",_wrap_InfAlg_getProperties,0,0,2,0},
{"InfAlg_printProperties",_wrap_InfAlg_printProperties,0,0,2,0},
{"calcMarginal",_wrap_calcMarginal,0,0,2,0},
{"calcPairBeliefs",_wrap_calcPairBeliefs,0,0,2,0},
{"findMaximum",_wrap_findMaximum,0,0,2,0},
{"builtinInfAlgs",_wrap_builtinInfAlgs,0,0,2,0},
{"builtinInfAlgNames",_wrap_builtinInfAlgNames,0,0,2,0},
{"newInfAlg",_wrap_newInfAlg,0,0,2,0},
{"newInfAlgFromString",_wrap_newInfAlgFromString,0,0,2,0},
{"parseNameProperties",_wrap_parseNameProperties,0,0,2,0},
{"readAliasesFile",_wrap_readAliasesFile,0,0,2,0},
{"BP_props_set",_wrap_BP_props_set,0,0,2,0},
{"BP_props_get",_wrap_BP_props_get,0,0,2,0},
{"BP_recordSentMessages_set",_wrap_BP_recordSentMessages_set,0,0,2,0},
{"BP_recordSentMessages_get",_wrap_BP_recordSentMessages_get,0,0,2,0},
{"new_BP",_wrap_new_BP,0,0,2,0},
{"BP_clone",_wrap_BP_clone,0,0,2,0},
{"BP_construct",_wrap_BP_construct,0,0,2,0},
{"BP_name",_wrap_BP_name,0,0,2,0},
{"BP_belief",_wrap_BP_belief,0,0,2,0},
{"BP_beliefV",_wrap_BP_beliefV,0,0,2,0},
{"BP_beliefF",_wrap_BP_beliefF,0,0,2,0},
{"BP_beliefs",_wrap_BP_beliefs,0,0,2,0},
{"BP_logZ",_wrap_BP_logZ,0,0,2,0},
{"BP_findMaximum",_wrap_BP_findMaximum,0,0,2,0},
{"BP_init",_wrap_BP_init,0,0,2,0},
{"BP_run",_wrap_BP_run,0,0,2,0},
{"BP_maxDiff",_wrap_BP_maxDiff,0,0,2,0},
{"BP_Iterations",_wrap_BP_Iterations,0,0,2,0},
{"BP_setMaxIter",_wrap_BP_setMaxIter,0,0,2,0},
{"BP_setProperties",_wrap_BP_setProperties,0,0,2,0},
{"BP_getProperties",_wrap_BP_getProperties,0,0,2,0},
{"BP_printProperties",_wrap_BP_printProperties,0,0,2,0},
{"BP_getSentMessages",_wrap_BP_getSentMessages,0,0,2,0},
{"BP_clearSentMessages",_wrap_BP_clearSentMessages,0,0,2,0},
{"delete_BP",_wrap_delete_BP,0,0,2,0},
{"new_FBP",_wrap_new_FBP,0,0,2,0},
{"FBP_clone",_wrap_FBP_clone,0,0,2,0},
{"FBP_construct",_wrap_FBP_construct,0,0,2,0},
{"FBP_name",_wrap_FBP_name,0,0,2,0},
{"FBP_logZ",_wrap_FBP_logZ,0,0,2,0},
{"FBP_Weight",_wrap_FBP_Weight,0,0,2,0},
{"FBP_Weights",_wrap_FBP_Weights,0,0,2,0},
{"FBP_setWeight",_wrap_FBP_setWeight,0,0,2,0},
{"FBP_setWeights",_wrap_FBP_setWeights,0,0,2,0},
{"delete_FBP",_wrap_delete_FBP,0,0,2,0},
{"TRWBP_nrtrees_set",_wrap_TRWBP_nrtrees_set,0,0,2,0},
{"TRWBP_nrtrees_get",_wrap_TRWBP_nrtrees_get,0,0,2,0},
{"new_TRWBP",_wrap_new_TRWBP,0,0,2,0},
{"TRWBP_clone",_wrap_TRWBP_clone,0,0,2,0},
{"TRWBP_construct",_wrap_TRWBP_construct,0,0,2,0},
{"TRWBP_name",_wrap_TRWBP_name,0,0,2,0},
{"TRWBP_logZ",_wrap_TRWBP_logZ,0,0,2,0},
{"TRWBP_setProperties",_wrap_TRWBP_setProperties,0,0,2,0},
{"TRWBP_getProperties",_wrap_TRWBP_getProperties,0,0,2,0},
{"TRWBP_printProperties",_wrap_TRWBP_printProperties,0,0,2,0},
{"TRWBP_Weight",_wrap_TRWBP_Weight,0,0,2,0},
{"TRWBP_Weights",_wrap_TRWBP_Weights,0,0,2,0},
{"TRWBP_setWeight",_wrap_TRWBP_setWeight,0,0,2,0},
{"TRWBP_setWeights",_wrap_TRWBP_setWeights,0,0,2,0},
{"TRWBP_addTreeToWeights",_wrap_TRWBP_addTreeToWeights,0,0,2,0},
{"TRWBP_sampleWeights",_wrap_TRWBP_sampleWeights,0,0,2,0},
{"delete_TRWBP",_wrap_delete_TRWBP,0,0,2,0},
{"MF_props_set",_wrap_MF_props_set,0,0,2,0},
{"MF_props_get",_wrap_MF_props_get,0,0,2,0},
{"new_MF",_wrap_new_MF,0,0,2,0},
{"MF_clone",_wrap_MF_clone,0,0,2,0},
{"MF_construct",_wrap_MF_construct,0,0,2,0},
{"MF_name",_wrap_MF_name,0,0,2,0},
{"MF_belief",_wrap_MF_belief,0,0,2,0},
{"MF_beliefV",_wrap_MF_beliefV,0,0,2,0},
{"MF_beliefs",_wrap_MF_beliefs,0,0,2,0},
{"MF_logZ",_wrap_MF_logZ,0,0,2,0},
{"MF_init",_wrap_MF_init,0,0,2,0},
{"MF_run",_wrap_MF_run,0,0,2,0},
{"MF_maxDiff",_wrap_MF_maxDiff,0,0,2,0},
{"MF_Iterations",_wrap_MF_Iterations,0,0,2,0},
{"MF_setMaxIter",_wrap_MF_setMaxIter,0,0,2,0},
{"MF_setProperties",_wrap_MF_setProperties,0,0,2,0},
{"MF_getProperties",_wrap_MF_getProperties,0,0,2,0},
{"MF_printProperties",_wrap_MF_printProperties,0,0,2,0},
{"delete_MF",_wrap_delete_MF,0,0,2,0},
{"HAK_props_set",_wrap_HAK_props_set,0,0,2,0},
{"HAK_props_get",_wrap_HAK_props_get,0,0,2,0},
{"new_HAK",_wrap_new_HAK,0,0,2,0},
{"HAK_clone",_wrap_HAK_clone,0,0,2,0},
{"HAK_construct",_wrap_HAK_construct,0,0,2,0},
{"HAK_name",_wrap_HAK_name,0,0,2,0},
{"HAK_belief",_wrap_HAK_belief,0,0,2,0},
{"HAK_beliefs",_wrap_HAK_beliefs,0,0,2,0},
{"HAK_logZ",_wrap_HAK_logZ,0,0,2,0},
{"HAK_init",_wrap_HAK_init,0,0,2,0},
{"HAK_run",_wrap_HAK_run,0,0,2,0},
{"HAK_maxDiff",_wrap_HAK_maxDiff,0,0,2,0},
{"HAK_Iterations",_wrap_HAK_Iterations,0,0,2,0},
{"HAK_setMaxIter",_wrap_HAK_setMaxIter,0,0,2,0},
{"HAK_setProperties",_wrap_HAK_setProperties,0,0,2,0},
{"HAK_getProperties",_wrap_HAK_getProperties,0,0,2,0},
{"HAK_printProperties",_wrap_HAK_printProperties,0,0,2,0},
{"HAK_muab",_wrap_HAK_muab,0,0,2,0},
{"HAK_muba",_wrap_HAK_muba,0,0,2,0},
{"HAK_Qa",_wrap_HAK_Qa,0,0,2,0},
{"HAK_Qb",_wrap_HAK_Qb,0,0,2,0},
{"HAK_doGBP",_wrap_HAK_doGBP,0,0,2,0},
{"HAK_doDoubleLoop",_wrap_HAK_doDoubleLoop,0,0,2,0},
{"delete_HAK",_wrap_delete_HAK,0,0,2,0},
{"LC_props_set",_wrap_LC_props_set,0,0,2,0},
{"LC_props_get",_wrap_LC_props_get,0,0,2,0},
{"new_LC",_wrap_new_LC,0,0,2,0},
{"LC_clone",_wrap_LC_clone,0,0,2,0},
{"LC_construct",_wrap_LC_construct,0,0,2,0},
{"LC_name",_wrap_LC_name,0,0,2,0},
{"LC_belief",_wrap_LC_belief,0,0,2,0},
{"LC_beliefV",_wrap_LC_beliefV,0,0,2,0},
{"LC_beliefs",_wrap_LC_beliefs,0,0,2,0},
{"LC_logZ",_wrap_LC_logZ,0,0,2,0},
{"LC_init",_wrap_LC_init,0,0,2,0},
{"LC_run",_wrap_LC_run,0,0,2,0},
{"LC_maxDiff",_wrap_LC_maxDiff,0,0,2,0},
{"LC_Iterations",_wrap_LC_Iterations,0,0,2,0},
{"LC_setMaxIter",_wrap_LC_setMaxIter,0,0,2,0},
{"LC_setProperties",_wrap_LC_setProperties,0,0,2,0},
{"LC_getProperties",_wrap_LC_getProperties,0,0,2,0},
{"LC_printProperties",_wrap_LC_printProperties,0,0,2,0},
{"LC_CalcCavityDist",_wrap_LC_CalcCavityDist,0,0,2,0},
{"LC_InitCavityDists",_wrap_LC_InitCavityDists,0,0,2,0},
{"LC_SetCavityDists",_wrap_LC_SetCavityDists,0,0,2,0},
{"LC_NewPancake",_wrap_LC_NewPancake,0,0,2,0},
{"LC_CalcBelief",_wrap_LC_CalcBelief,0,0,2,0},
{"LC_pancake",_wrap_LC_pancake,0,0,2,0},
{"LC_cavitydist",_wrap_LC_cavitydist,0,0,2,0},
{"delete_LC",_wrap_delete_LC,0,0,2,0},
{"JTree_RTree_set",_wrap_JTree_RTree_set,0,0,2,0},
{"JTree_RTree_get",_wrap_JTree_RTree_get,0,0,2,0},
{"JTree_Qa_set",_wrap_JTree_Qa_set,0,0,2,0},
{"JTree_Qa_get",_wrap_JTree_Qa_get,0,0,2,0},
{"JTree_Qb_set",_wrap_JTree_Qb_set,0,0,2,0},
{"JTree_Qb_get",_wrap_JTree_Qb_get,0,0,2,0},
{"JTree_props_set",_wrap_JTree_props_set,0,0,2,0},
{"JTree_props_get",_wrap_JTree_props_get,0,0,2,0},
{"new_JTree",_wrap_new_JTree,0,0,2,0},
{"JTree_clone",_wrap_JTree_clone,0,0,2,0},
{"JTree_name",_wrap_JTree_name,0,0,2,0},
{"JTree_belief",_wrap_JTree_belief,0,0,2,0},
{"JTree_beliefs",_wrap_JTree_beliefs,0,0,2,0},
{"JTree_logZ",_wrap_JTree_logZ,0,0,2,0},
{"JTree_findMaximum",_wrap_JTree_findMaximum,0,0,2,0},
{"JTree_init",_wrap_JTree_init,0,0,2,0},
{"JTree_run",_wrap_JTree_run,0,0,2,0},
{"JTree_maxDiff",_wrap_JTree_maxDiff,0,0,2,0},
{"JTree_Iterations",_wrap_JTree_Iterations,0,0,2,0},
{"JTree_setProperties",_wrap_JTree_setProperties,0,0,2,0},
{"JTree_getProperties",_wrap_JTree_getProperties,0,0,2,0},
{"JTree_printProperties",_wrap_JTree_printProperties,0,0,2,0},
{"JTree_construct",_wrap_JTree_construct,0,0,2,0},
{"JTree_GenerateJT",_wrap_JTree_GenerateJT,0,0,2,0},
{"JTree_message",_wrap_JTree_message,0,0,2,0},
{"JTree_runHUGIN",_wrap_JTree_runHUGIN,0,0,2,0},
{"JTree_runShaferShenoy",_wrap_JTree_runShaferShenoy,0,0,2,0},
{"JTree_findEfficientTree",_wrap_JTree_findEfficientTree,0,0,2,0},
{"JTree_calcMarginal",_wrap_JTree_calcMarginal,0,0,2,0},
{"delete_JTree",_wrap_delete_JTree,0,0,2,0},
{"boundTreewidth",_wrap_boundTreewidth,0,0,2,0},
{"TreeEP_props_set",_wrap_TreeEP_props_set,0,0,2,0},
{"TreeEP_props_get",_wrap_TreeEP_props_get,0,0,2,0},
{"new_TreeEP",_wrap_new_TreeEP,0,0,2,0},
{"TreeEP_clone",_wrap_TreeEP_clone,0,0,2,0},
{"TreeEP_construct",_wrap_TreeEP_construct,0,0,2,0},
{"TreeEP_name",_wrap_TreeEP_name,0,0,2,0},
{"TreeEP_logZ",_wrap_TreeEP_logZ,0,0,2,0},
{"TreeEP_init",_wrap_TreeEP_init,0,0,2,0},
{"TreeEP_run",_wrap_TreeEP_run,0,0,2,0},
{"TreeEP_maxDiff",_wrap_TreeEP_maxDiff,0,0,2,0},
{"TreeEP_Iterations",_wrap_TreeEP_Iterations,0,0,2,0},
{"TreeEP_setMaxIter",_wrap_TreeEP_setMaxIter,0,0,2,0},
{"TreeEP_setProperties",_wrap_TreeEP_setProperties,0,0,2,0},
{"TreeEP_getProperties",_wrap_TreeEP_getProperties,0,0,2,0},
{"TreeEP_printProperties",_wrap_TreeEP_printProperties,0,0,2,0},
{"delete_TreeEP",_wrap_delete_TreeEP,0,0,2,0},
{"MR_props_set",_wrap_MR_props_set,0,0,2,0},
{"MR_props_get",_wrap_MR_props_get,0,0,2,0},
{"new_MR",_wrap_new_MR,0,0,2,0},
{"MR_clone",_wrap_MR_clone,0,0,2,0},
{"MR_construct",_wrap_MR_construct,0,0,2,0},
{"MR_name",_wrap_MR_name,0,0,2,0},
{"MR_belief",_wrap_MR_belief,0,0,2,0},
{"MR_beliefV",_wrap_MR_beliefV,0,0,2,0},
{"MR_beliefs",_wrap_MR_beliefs,0,0,2,0},
{"MR_logZ",_wrap_MR_logZ,0,0,2,0},
{"MR_init",_wrap_MR_init,0,0,2,0},
{"MR_run",_wrap_MR_run,0,0,2,0},
{"MR_maxDiff",_wrap_MR_maxDiff,0,0,2,0},
{"MR_Iterations",_wrap_MR_Iterations,0,0,2,0},
{"MR_setProperties",_wrap_MR_setProperties,0,0,2,0},
{"MR_getProperties",_wrap_MR_getProperties,0,0,2,0},
{"MR_printProperties",_wrap_MR_printProperties,0,0,2,0},
{"delete_MR",_wrap_delete_MR,0,0,2,0},
{"Gibbs_props_set",_wrap_Gibbs_props_set,0,0,2,0},
{"Gibbs_props_get",_wrap_Gibbs_props_get,0,0,2,0},
{"new_Gibbs",_wrap_new_Gibbs,0,0,2,0},
{"Gibbs_clone",_wrap_Gibbs_clone,0,0,2,0},
{"Gibbs_construct",_wrap_Gibbs_construct,0,0,2,0},
{"Gibbs_name",_wrap_Gibbs_name,0,0,2,0},
{"Gibbs_belief",_wrap_Gibbs_belief,0,0,2,0},
{"Gibbs_beliefV",_wrap_Gibbs_beliefV,0,0,2,0},
{"Gibbs_beliefF",_wrap_Gibbs_beliefF,0,0,2,0},
{"Gibbs_beliefs",_wrap_Gibbs_beliefs,0,0,2,0},
{"Gibbs_logZ",_wrap_Gibbs_logZ,0,0,2,0},
{"Gibbs_findMaximum",_wrap_Gibbs_findMaximum,0,0,2,0},
{"Gibbs_init",_wrap_Gibbs_init,0,0,2,0},
{"Gibbs_run",_wrap_Gibbs_run,0,0,2,0},
{"Gibbs_maxDiff",_wrap_Gibbs_maxDiff,0,0,2,0},
{"Gibbs_Iterations",_wrap_Gibbs_Iterations,0,0,2,0},
{"Gibbs_setMaxIter",_wrap_Gibbs_setMaxIter,0,0,2,0},
{"Gibbs_setProperties",_wrap_Gibbs_setProperties,0,0,2,0},
{"Gibbs_getProperties",_wrap_Gibbs_getProperties,0,0,2,0},
{"Gibbs_printProperties",_wrap_Gibbs_printProperties,0,0,2,0},
{"Gibbs_randomizeState",_wrap_Gibbs_randomizeState,0,0,2,0},
{"Gibbs_state",_wrap_Gibbs_state,0,0,2,0},
{"delete_Gibbs",_wrap_delete_Gibbs,0,0,2,0},
{"getGibbsState",_wrap_getGibbsState,0,0,2,0},
{"new_CBP",_wrap_new_CBP,0,0,2,0},
{"CBP_clone",_wrap_CBP_clone,0,0,2,0},
{"CBP_construct",_wrap_CBP_construct,0,0,2,0},
{"CBP_name",_wrap_CBP_name,0,0,2,0},
{"CBP_belief",_wrap_CBP_belief,0,0,2,0},
{"CBP_beliefV",_wrap_CBP_beliefV,0,0,2,0},
{"CBP_beliefF",_wrap_CBP_beliefF,0,0,2,0},
{"CBP_beliefs",_wrap_CBP_beliefs,0,0,2,0},
{"CBP_logZ",_wrap_CBP_logZ,0,0,2,0},
{"CBP_init",_wrap_CBP_init,0,0,2,0},
{"CBP_run",_wrap_CBP_run,0,0,2,0},
{"CBP_maxDiff",_wrap_CBP_maxDiff,0,0,2,0},
{"CBP_Iterations",_wrap_CBP_Iterations,0,0,2,0},
{"CBP_setMaxIter",_wrap_CBP_setMaxIter,0,0,2,0},
{"CBP_setProperties",_wrap_CBP_setProperties,0,0,2,0},
{"CBP_getProperties",_wrap_CBP_getProperties,0,0,2,0},
{"CBP_printProperties",_wrap_CBP_printProperties,0,0,2,0},
{"CBP_props_set",_wrap_CBP_props_set,0,0,2,0},
{"CBP_props_get",_wrap_CBP_props_get,0,0,2,0},
{"delete_CBP",_wrap_delete_CBP,0,0,2,0},
{"BBPFindClampVar",_wrap_BBPFindClampVar,0,0,2,0},
{"DecMAP_props_set",_wrap_DecMAP_props_set,0,0,2,0},
{"DecMAP_props_get",_wrap_DecMAP_props_get,0,0,2,0},
{"new_DecMAP",_wrap_new_DecMAP,0,0,2,0},
{"DecMAP_clone",_wrap_DecMAP_clone,0,0,2,0},
{"DecMAP_construct",_wrap_DecMAP_construct,0,0,2,0},
{"DecMAP_name",_wrap_DecMAP_name,0,0,2,0},
{"DecMAP_belief",_wrap_DecMAP_belief,0,0,2,0},
{"DecMAP_beliefV",_wrap_DecMAP_beliefV,0,0,2,0},
{"DecMAP_beliefF",_wrap_DecMAP_beliefF,0,0,2,0},
{"DecMAP_beliefs",_wrap_DecMAP_beliefs,0,0,2,0},
{"DecMAP_logZ",_wrap_DecMAP_logZ,0,0,2,0},
{"DecMAP_findMaximum",_wrap_DecMAP_findMaximum,0,0,2,0},
{"DecMAP_init",_wrap_DecMAP_init,0,0,2,0},
{"DecMAP_run",_wrap_DecMAP_run,0,0,2,0},
{"DecMAP_maxDiff",_wrap_DecMAP_maxDiff,0,0,2,0},
{"DecMAP_Iterations",_wrap_DecMAP_Iterations,0,0,2,0},
{"DecMAP_setProperties",_wrap_DecMAP_setProperties,0,0,2,0},
{"DecMAP_getProperties",_wrap_DecMAP_getProperties,0,0,2,0},
{"DecMAP_printProperties",_wrap_DecMAP_printProperties,0,0,2,0},
{"delete_DecMAP",_wrap_delete_DecMAP,0,0,2,0},
{"Cobweb_cav_set",_wrap_Cobweb_cav_set,0,0,2,0},
{"Cobweb_cav_get",_wrap_Cobweb_cav_get,0,0,2,0},
{"Cobweb__g2l_set",_wrap_Cobweb__g2l_set,0,0,2,0},
{"Cobweb__g2l_get",_wrap_Cobweb__g2l_get,0,0,2,0},
{"new_Cobweb",_wrap_new_Cobweb,0,0,2,0},
{"delete_Cobweb",_wrap_delete_Cobweb,0,0,2,0},
{"Cobweb_setInfAlg",_wrap_Cobweb_setInfAlg,0,0,2,0},
{"Cobweb_factor",_wrap_Cobweb_factor,0,0,2,0},
{"Cobweb_initialize",_wrap_Cobweb_initialize,0,0,2,0},
{"Cobweb_marginal",_wrap_Cobweb_marginal,0,0,2,0},
{"Cobweb_updateFactor",_wrap_Cobweb_updateFactor,0,0,2,0},
{"Cobweb_belief",_wrap_Cobweb_belief,0,0,2,0},
{"GLC_props_set",_wrap_GLC_props_set,0,0,2,0},
{"GLC_props_get",_wrap_GLC_props_get,0,0,2,0},
{"new_GLC",_wrap_new_GLC,0,0,2,0},
{"GLC_clone",_wrap_GLC_clone,0,0,2,0},
{"GLC_construct",_wrap_GLC_construct,0,0,2,0},
{"GLC_name",_wrap_GLC_name,0,0,2,0},
{"GLC_belief",_wrap_GLC_belief,0,0,2,0},
{"GLC_beliefV",_wrap_GLC_beliefV,0,0,2,0},
{"GLC_beliefs",_wrap_GLC_beliefs,0,0,2,0},
{"GLC_logZ",_wrap_GLC_logZ,0,0,2,0},
{"GLC_init",_wrap_GLC_init,0,0,2,0},
{"GLC_run",_wrap_GLC_run,0,0,2,0},
{"GLC_maxDiff",_wrap_GLC_maxDiff,0,0,2,0},
{"GLC_Iterations",_wrap_GLC_Iterations,0,0,2,0},
{"GLC_setMaxIter",_wrap_GLC_setMaxIter,0,0,2,0},
{"GLC_setProperties",_wrap_GLC_setProperties,0,0,2,0},
{"GLC_getProperties",_wrap_GLC_getProperties,0,0,2,0},
{"GLC_printProperties",_wrap_GLC_printProperties,0,0,2,0},
{"GLC_CW",_wrap_GLC_CW,0,0,2,0},
{"GLC_CalcCavityDist",_wrap_GLC_CalcCavityDist,0,0,2,0},
{"GLC_InitCavityDists",_wrap_GLC_InitCavityDists,0,0,2,0},
{"GLC_NewPancake",_wrap_GLC_NewPancake,0,0,2,0},
{"GLC_OVNewPancake",_wrap_GLC_OVNewPancake,0,0,2,0},
{"GLC_CalcBelief",_wrap_GLC_CalcBelief,0,0,2,0},
{"GLC_CalcFactorBelief",_wrap_GLC_CalcFactorBelief,0,0,2,0},
{"GLC_calcRegions",_wrap_GLC_calcRegions,0,0,2,0},
{"GLC_initCWs",_wrap_GLC_initCWs,0,0,2,0},
{"GLC_setCWs",_wrap_GLC_setCWs,0,0,2,0},
{"GLC_findLoopClusters",_wrap_GLC_findLoopClusters,0,0,2,0},
{"GLC_findOVLoopClusters",_wrap_GLC_findOVLoopClusters,0,0,2,0},
{"delete_GLC",_wrap_delete_GLC,0,0,2,0},
{0,0,0,0,0,0}
};

/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_dai__FRegionTo_p_dai__TFactorT_double_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((dai::TFactor< double > *)  ((dai::FRegion *) x));
}
static void *_p_dai__FBPTo_p_dai__BP(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((dai::BP *)  ((dai::FBP *) x));
}
static void *_p_dai__TRWBPTo_p_dai__BP(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((dai::BP *)  ((dai::TRWBP *) x));
}
static void *_p_dai__RegionGraphTo_p_dai__FactorGraph(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((dai::FactorGraph *)  ((dai::RegionGraph *) x));
}
static void *_p_dai__TreeEPTo_p_dai__JTree(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((dai::JTree *)  ((dai::TreeEP *) x));
}
static void *_p_dai__RegionTo_p_dai__VarSet(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((dai::VarSet *)  ((dai::Region *) x));
}
static void *_p_dai__VarSetTo_p_dai__SmallSetT_dai__Var_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((dai::SmallSet< dai::Var > *)  ((dai::VarSet *) x));
}
static void *_p_dai__RegionTo_p_dai__SmallSetT_dai__Var_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((dai::SmallSet< dai::Var > *) (dai::VarSet *) ((dai::Region *) x));
}
static swig_type_info _swigt__p_BBPCostFunction = {"_p_BBPCostFunction", "BBPCostFunction *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_RootedTree = {"_p_RootedTree", "RootedTree *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_allocator_type = {"_p_allocator_type", "allocator_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_bool = {"_p_bool", "bool *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__any = {"_p_boost__any", "dai::PropertyValue *|boost::any *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_char = {"_p_char", "char *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_const_iterator = {"_p_const_iterator", "const_iterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_const_reverse_iterator = {"_p_const_reverse_iterator", "const_reverse_iterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_container_type = {"_p_container_type", "container_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_dai__BP = {"_p_dai__BP", "dai::BP *", 0, 0, (void*)&_wrap_class_BP, 0};
static swig_type_info _swigt__p_dai__BP__Properties = {"_p_dai__BP__Properties", "dai::BP::Properties *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_dai__BipartiteGraph = {"_p_dai__BipartiteGraph", "dai::BipartiteGraph *", 0, 0, (void*)&_wrap_class_BipartiteGraph, 0};
static swig_type_info _swigt__p_dai__CBP = {"_p_dai__CBP", "dai::CBP *", 0, 0, (void*)&_wrap_class_CBP, 0};
static swig_type_info _swigt__p_dai__CBP__Properties = {"_p_dai__CBP__Properties", "dai::CBP::Properties *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_dai__ClusterGraph = {"_p_dai__ClusterGraph", "dai::ClusterGraph *", 0, 0, (void*)&_wrap_class_ClusterGraph, 0};
static swig_type_info _swigt__p_dai__Cobweb = {"_p_dai__Cobweb", "dai::Cobweb *", 0, 0, (void*)&_wrap_class_Cobweb, 0};
static swig_type_info _swigt__p_dai__DAIAlgT_CobwebGraph_t = {"_p_dai__DAIAlgT_CobwebGraph_t", "dai::DAIAlgCG *|dai::DAIAlg< CobwebGraph > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_dai__DAIAlgT_dai__FactorGraph_t = {"_p_dai__DAIAlgT_dai__FactorGraph_t", "dai::DAIAlg< dai::FactorGraph > *|dai::DAIAlgFG *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_dai__DAIAlgT_dai__RegionGraph_t = {"_p_dai__DAIAlgT_dai__RegionGraph_t", "dai::DAIAlg< dai::RegionGraph > *|dai::DAIAlgRG *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_dai__DecMAP = {"_p_dai__DecMAP", "dai::DecMAP *", 0, 0, (void*)&_wrap_class_DecMAP, 0};
static swig_type_info _swigt__p_dai__DecMAP__Properties = {"_p_dai__DecMAP__Properties", "dai::DecMAP::Properties *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_dai__FBP = {"_p_dai__FBP", "dai::FBP *", 0, 0, (void*)&_wrap_class_FBP, 0};
static swig_type_info _swigt__p_dai__FRegion = {"_p_dai__FRegion", "dai::FRegion *", 0, 0, (void*)&_wrap_class_FRegion, 0};
static swig_type_info _swigt__p_dai__FactorGraph = {"_p_dai__FactorGraph", "dai::FactorGraph *", 0, 0, (void*)&_wrap_class_FactorGraph, 0};
static swig_type_info _swigt__p_dai__GLC = {"_p_dai__GLC", "dai::GLC *", 0, 0, (void*)&_wrap_class_GLC, 0};
static swig_type_info _swigt__p_dai__GLC__Properties = {"_p_dai__GLC__Properties", "dai::GLC::Properties *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_dai__Gibbs = {"_p_dai__Gibbs", "dai::Gibbs *", 0, 0, (void*)&_wrap_class_Gibbs, 0};
static swig_type_info _swigt__p_dai__Gibbs__Properties = {"_p_dai__Gibbs__Properties", "dai::Gibbs::Properties *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_dai__GraphAL = {"_p_dai__GraphAL", "dai::GraphAL *", 0, 0, (void*)&_wrap_class_GraphAL, 0};
static swig_type_info _swigt__p_dai__HAK = {"_p_dai__HAK", "dai::HAK *", 0, 0, (void*)&_wrap_class_HAK, 0};
static swig_type_info _swigt__p_dai__HAK__Properties = {"_p_dai__HAK__Properties", "dai::HAK::Properties *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_dai__IndexFor = {"_p_dai__IndexFor", "dai::IndexFor *", 0, 0, (void*)&_wrap_class_IndexFor, 0};
static swig_type_info _swigt__p_dai__InfAlg = {"_p_dai__InfAlg", "dai::InfAlg *", 0, 0, (void*)&_wrap_class_InfAlg, 0};
static swig_type_info _swigt__p_dai__JTree = {"_p_dai__JTree", "dai::JTree *", 0, 0, (void*)&_wrap_class_JTree, 0};
static swig_type_info _swigt__p_dai__JTree__Properties = {"_p_dai__JTree__Properties", "dai::JTree::Properties *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_dai__LC = {"_p_dai__LC", "dai::LC *", 0, 0, (void*)&_wrap_class_LC, 0};
static swig_type_info _swigt__p_dai__LC__Properties = {"_p_dai__LC__Properties", "dai::LC::Properties *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_dai__MF = {"_p_dai__MF", "dai::MF *", 0, 0, (void*)&_wrap_class_MF, 0};
static swig_type_info _swigt__p_dai__MF__Properties = {"_p_dai__MF__Properties", "dai::MF::Properties *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_dai__MR = {"_p_dai__MR", "dai::MR *", 0, 0, (void*)&_wrap_class_MR, 0};
static swig_type_info _swigt__p_dai__MR__Properties = {"_p_dai__MR__Properties", "dai::MR::Properties *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_dai__Neighbor = {"_p_dai__Neighbor", "dai::Neighbor *", 0, 0, (void*)&_wrap_class_Neighbor, 0};
static swig_type_info _swigt__p_dai__Permute = {"_p_dai__Permute", "dai::Permute *", 0, 0, (void*)&_wrap_class_Permute, 0};
static swig_type_info _swigt__p_dai__ProbDistType = {"_p_dai__ProbDistType", "enum dai::ProbDistType *|dai::ProbDistType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_dai__ProbNormType = {"_p_dai__ProbNormType", "enum dai::ProbNormType *|dai::ProbNormType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_dai__PropertySet = {"_p_dai__PropertySet", "dai::PropertySet *", 0, 0, (void*)&_wrap_class_PropertySet, 0};
static swig_type_info _swigt__p_dai__Region = {"_p_dai__Region", "dai::Region *", 0, 0, (void*)&_wrap_class_Region, 0};
static swig_type_info _swigt__p_dai__RegionGraph = {"_p_dai__RegionGraph", "dai::RegionGraph *", 0, 0, (void*)&_wrap_class_RegionGraph, 0};
static swig_type_info _swigt__p_dai__SmallSetT_dai__Var_t = {"_p_dai__SmallSetT_dai__Var_t", "dai::SmallSet< dai::Var > *", 0, 0, (void*)&_wrap_class_SmallSetVar, 0};
static swig_type_info _swigt__p_dai__SmallSetT_size_t_t = {"_p_dai__SmallSetT_size_t_t", "dai::SmallSet< size_t > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_dai__State = {"_p_dai__State", "dai::State *", 0, 0, (void*)&_wrap_class_State, 0};
static swig_type_info _swigt__p_dai__TFactorT_double_t = {"_p_dai__TFactorT_double_t", "std::vector< dai::TFactor< double > >::value_type *|dai::TFactor< dai::Real > *|dai::TFactor< double > *|dai::Factor *", 0, 0, (void*)&_wrap_class_Factor, 0};
static swig_type_info _swigt__p_dai__TProbT_double_t = {"_p_dai__TProbT_double_t", "dai::TProb< double >::this_type *|dai::TProb< dai::Real > *|dai::TProb< double > *|dai::Prob *", 0, 0, (void*)&_wrap_class_Prob, 0};
static swig_type_info _swigt__p_dai__TRWBP = {"_p_dai__TRWBP", "dai::TRWBP *", 0, 0, (void*)&_wrap_class_TRWBP, 0};
static swig_type_info _swigt__p_dai__TreeEP = {"_p_dai__TreeEP", "dai::TreeEP *", 0, 0, (void*)&_wrap_class_TreeEP, 0};
static swig_type_info _swigt__p_dai__TreeEP__Properties = {"_p_dai__TreeEP__Properties", "dai::TreeEP::Properties *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_dai__Var = {"_p_dai__Var", "dai::Var *", 0, 0, (void*)&_wrap_class_Var, 0};
static swig_type_info _swigt__p_dai__VarSet = {"_p_dai__VarSet", "dai::VarSet *", 0, 0, (void*)&_wrap_class_VarSet, 0};
static swig_type_info _swigt__p_dai__greedyVariableElimination = {"_p_dai__greedyVariableElimination", "dai::greedyVariableElimination *", 0, 0, (void*)&_wrap_class_greedyVariableElimination, 0};
static swig_type_info _swigt__p_dai__multifor = {"_p_dai__multifor", "dai::multifor *", 0, 0, (void*)&_wrap_class_multifor, 0};
static swig_type_info _swigt__p_dai__sequentialVariableElimination = {"_p_dai__sequentialVariableElimination", "dai::sequentialVariableElimination *", 0, 0, (void*)&_wrap_class_sequentialVariableElimination, 0};
static swig_type_info _swigt__p_difference_type = {"_p_difference_type", "difference_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_double = {"_p_double", "double *|dai::Real *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_r_q_const__dai__ClusterGraph_size_t__size_t = {"_p_f_r_q_const__dai__ClusterGraph_size_t__size_t", "size_t (*)(dai::ClusterGraph const &,size_t)|dai::greedyVariableElimination::eliminationCostFunction", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_first_type = {"_p_first_type", "first_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_iterator = {"_p_iterator", "iterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mpz_class = {"_p_mpz_class", "mpz_class *|dai::BigInt *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_reverse_iterator = {"_p_reverse_iterator", "reverse_iterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_second_type = {"_p_second_type", "second_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_size_t = {"_p_size_t", "size_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_size_type = {"_p_size_type", "size_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_dai__TFactorT_dai__Real_t_t = {"_p_std__allocatorT_dai__TFactorT_dai__Real_t_t", "std::allocator< dai::TFactor< double > > *|std::allocator< dai::TFactor< dai::Real > > *|std::vector< dai::TFactor< double > >::allocator_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_size_t_t = {"_p_std__allocatorT_size_t_t", "std::vector< size_t >::allocator_type *|std::allocator< size_t > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_std__vectorT_dai__Factor_std__allocatorT_dai__Factor_t_t_t = {"_p_std__allocatorT_std__vectorT_dai__Factor_std__allocatorT_dai__Factor_t_t_t", "std::allocator< std::vector< dai::Factor,std::allocator< dai::Factor > > > *|std::vector< std::vector< dai::TFactor< double >,std::allocator< dai::TFactor< double > > > >::allocator_type *|std::allocator< std::vector< dai::TFactor< double >,std::allocator< dai::TFactor< double > > > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__mapT_dai__Var_size_t_t = {"_p_std__mapT_dai__Var_size_t_t", "std::map< dai::Var,size_t > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__mapT_dai__Var_size_t_t__const_iterator = {"_p_std__mapT_dai__Var_size_t_t__const_iterator", "std::map< dai::Var,size_t >::const_iterator *|dai::State::const_iterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__mapT_int_size_t_t = {"_p_std__mapT_int_size_t_t", "std::map< int,size_t > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__mapT_size_t_dai__TFactorT_double_t_t = {"_p_std__mapT_size_t_dai__TFactorT_double_t_t", "std::map< size_t,dai::TFactor< double > > *|std::map< size_t,dai::Factor > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__mapT_std__string_dai__InfAlg_p_t = {"_p_std__mapT_std__string_dai__InfAlg_p_t", "std::map< std::string,dai::InfAlg * > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__mapT_std__string_std__string_t = {"_p_std__mapT_std__string_std__string_t", "std::map< std::string,std::string > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__ostream = {"_p_std__ostream", "std::ostream *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__pairT_size_t_double_t = {"_p_std__pairT_size_t_double_t", "std::pair< size_t,double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__pairT_size_t_mpz_t = {"_p_std__pairT_size_t_mpz_t", "std::pair< size_t,mpz_class > *|std::pair< size_t,dai::BigInt > *", 0, 0, (void*)&_wrap_class_PairIntBigInt, 0};
static swig_type_info _swigt__p_std__pairT_size_t_size_t_t = {"_p_std__pairT_size_t_size_t_t", "dai::Edge *|std::pair< size_t,size_t > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__pairT_std__string_boost__any_t = {"_p_std__pairT_std__string_boost__any_t", "dai::Property *|std::pair< std::string,boost::any > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__pairT_std__string_dai__PropertySet_t = {"_p_std__pairT_std__string_dai__PropertySet_t", "std::pair< std::string,dai::PropertySet > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__setT_dai__SmallSetT_size_t_t_t = {"_p_std__setT_dai__SmallSetT_size_t_t_t", "std::set< dai::SmallSet< size_t > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__setT_size_t_t = {"_p_std__setT_size_t_t", "std::set< size_t > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__setT_std__string_t = {"_p_std__setT_std__string_t", "std::set< dai::PropertyKey > *|std::set< std::string > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__string = {"_p_std__string", "dai::PropertyKey *|std::string *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_dai__Neighbor_std__allocatorT_dai__Neighbor_t_t = {"_p_std__vectorT_dai__Neighbor_std__allocatorT_dai__Neighbor_t_t", "std::vector< dai::Neighbor,std::allocator< dai::Neighbor > > *|dai::Neighbors *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_dai__Region_std__allocatorT_dai__Region_t_t = {"_p_std__vectorT_dai__Region_std__allocatorT_dai__Region_t_t", "std::vector< dai::Region,std::allocator< dai::Region > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_dai__SmallSetT_size_t_t_std__allocatorT_dai__SmallSetT_size_t_t_t_t = {"_p_std__vectorT_dai__SmallSetT_size_t_t_std__allocatorT_dai__SmallSetT_size_t_t_t_t", "std::vector< dai::SmallSet< size_t >,std::allocator< dai::SmallSet< size_t > > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_dai__TFactorT_dai__Real_t_std__allocatorT_dai__TFactorT_dai__Real_t_t_t = {"_p_std__vectorT_dai__TFactorT_dai__Real_t_std__allocatorT_dai__TFactorT_dai__Real_t_t_t", "std::vector< dai::TFactor< double > > *|std::vector< dai::Factor > *|std::vector< dai::Factor,std::allocator< dai::Factor > > *|std::vector< dai::TFactor< double >,std::allocator< dai::TFactor< double > > > *|std::vector< dai::TFactor< dai::Real >,std::allocator< dai::TFactor< dai::Real > > > *|VecFactor *", 0, 0, (void*)&_wrap_class_VecFactor, 0};
static swig_type_info _swigt__p_std__vectorT_dai__VarSet_std__allocatorT_dai__VarSet_t_t = {"_p_std__vectorT_dai__VarSet_std__allocatorT_dai__VarSet_t_t", "std::vector< dai::VarSet,std::allocator< dai::VarSet > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_dai__Var_std__allocatorT_dai__Var_t_t = {"_p_std__vectorT_dai__Var_std__allocatorT_dai__Var_t_t", "std::vector< dai::Var,std::allocator< dai::Var > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_dai__Var_std__allocatorT_dai__Var_t_t__const_iterator = {"_p_std__vectorT_dai__Var_std__allocatorT_dai__Var_t_t__const_iterator", "std::vector< dai::Var,std::allocator< dai::Var > >::const_iterator *|dai::SmallSet< dai::Var >::const_iterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_dai__Var_std__allocatorT_dai__Var_t_t__const_reverse_iterator = {"_p_std__vectorT_dai__Var_std__allocatorT_dai__Var_t_t__const_reverse_iterator", "std::vector< dai::Var,std::allocator< dai::Var > >::const_reverse_iterator *|dai::SmallSet< dai::Var >::const_reverse_iterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_dai__Var_std__allocatorT_dai__Var_t_t__iterator = {"_p_std__vectorT_dai__Var_std__allocatorT_dai__Var_t_t__iterator", "std::vector< dai::Var,std::allocator< dai::Var > >::iterator *|dai::SmallSet< dai::Var >::iterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_dai__Var_std__allocatorT_dai__Var_t_t__reverse_iterator = {"_p_std__vectorT_dai__Var_std__allocatorT_dai__Var_t_t__reverse_iterator", "std::vector< dai::Var,std::allocator< dai::Var > >::reverse_iterator *|dai::SmallSet< dai::Var >::reverse_iterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_dai__Var_std__allocatorT_dai__Var_t_t__size_type = {"_p_std__vectorT_dai__Var_std__allocatorT_dai__Var_t_t__size_type", "std::vector< dai::Var,std::allocator< dai::Var > >::size_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_double_std__allocatorT_double_t_t = {"_p_std__vectorT_double_std__allocatorT_double_t_t", "std::vector< double,std::allocator< double > > *|dai::TProb< double >::container_type *|std::vector< dai::Real,std::allocator< dai::Real > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_double_std__allocatorT_double_t_t__const_iterator = {"_p_std__vectorT_double_std__allocatorT_double_t_t__const_iterator", "dai::TProb< double >::const_iterator *|std::vector< double,std::allocator< double > >::const_iterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_double_std__allocatorT_double_t_t__const_reverse_iterator = {"_p_std__vectorT_double_std__allocatorT_double_t_t__const_reverse_iterator", "dai::TProb< double >::const_reverse_iterator *|std::vector< double,std::allocator< double > >::const_reverse_iterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_double_std__allocatorT_double_t_t__iterator = {"_p_std__vectorT_double_std__allocatorT_double_t_t__iterator", "std::vector< double,std::allocator< double > >::iterator *|dai::TProb< double >::iterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_double_std__allocatorT_double_t_t__reverse_iterator = {"_p_std__vectorT_double_std__allocatorT_double_t_t__reverse_iterator", "std::vector< double,std::allocator< double > >::reverse_iterator *|dai::TProb< double >::reverse_iterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_size_t_std__allocatorT_size_t_t_t = {"_p_std__vectorT_size_t_std__allocatorT_size_t_t_t", "std::vector< size_t,std::allocator< size_t > > *|std::vector< size_t > *", 0, 0, (void*)&_wrap_class_IntVector, 0};
static swig_type_info _swigt__p_std__vectorT_std__pairT_size_t_size_t_t_std__allocatorT_std__pairT_size_t_size_t_t_t_t = {"_p_std__vectorT_std__pairT_size_t_size_t_t_std__allocatorT_std__pairT_size_t_size_t_t_t_t", "std::vector< std::pair< size_t,size_t >,std::allocator< std::pair< size_t,size_t > > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_std__string_std__allocatorT_std__string_t_t = {"_p_std__vectorT_std__string_std__allocatorT_std__string_t_t", "std::vector< std::string,std::allocator< std::string > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_std__vectorT_dai__Factor_std__allocatorT_dai__Factor_t_t_std__allocatorT_std__vectorT_dai__Factor_std__allocatorT_dai__Factor_t_t_t_t = {"_p_std__vectorT_std__vectorT_dai__Factor_std__allocatorT_dai__Factor_t_t_std__allocatorT_std__vectorT_dai__Factor_std__allocatorT_dai__Factor_t_t_t_t", "std::vector< std::vector< dai::TFactor< double >,std::allocator< dai::TFactor< double > > >,std::allocator< std::vector< dai::TFactor< double >,std::allocator< dai::TFactor< double > > > > > *|std::vector< std::vector< dai::TFactor< double >,std::allocator< dai::TFactor< double > > > > *|std::vector< VecFactor > *|std::vector< std::vector< dai::Factor,std::allocator< dai::Factor > >,std::allocator< std::vector< dai::Factor,std::allocator< dai::Factor > > > > *|VecVecFactor *", 0, 0, (void*)&_wrap_class_VecVecFactor, 0};
static swig_type_info _swigt__p_swig__OctSwigIterator = {"_p_swig__OctSwigIterator", "swig::OctSwigIterator *", 0, 0, (void*)&_wrap_class_OctSwigIterator, 0};
static swig_type_info _swigt__p_this_type = {"_p_this_type", "this_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_value_type = {"_p_value_type", "value_type *", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_BBPCostFunction,
  &_swigt__p_RootedTree,
  &_swigt__p_allocator_type,
  &_swigt__p_bool,
  &_swigt__p_boost__any,
  &_swigt__p_char,
  &_swigt__p_const_iterator,
  &_swigt__p_const_reverse_iterator,
  &_swigt__p_container_type,
  &_swigt__p_dai__BP,
  &_swigt__p_dai__BP__Properties,
  &_swigt__p_dai__BipartiteGraph,
  &_swigt__p_dai__CBP,
  &_swigt__p_dai__CBP__Properties,
  &_swigt__p_dai__ClusterGraph,
  &_swigt__p_dai__Cobweb,
  &_swigt__p_dai__DAIAlgT_CobwebGraph_t,
  &_swigt__p_dai__DAIAlgT_dai__FactorGraph_t,
  &_swigt__p_dai__DAIAlgT_dai__RegionGraph_t,
  &_swigt__p_dai__DecMAP,
  &_swigt__p_dai__DecMAP__Properties,
  &_swigt__p_dai__FBP,
  &_swigt__p_dai__FRegion,
  &_swigt__p_dai__FactorGraph,
  &_swigt__p_dai__GLC,
  &_swigt__p_dai__GLC__Properties,
  &_swigt__p_dai__Gibbs,
  &_swigt__p_dai__Gibbs__Properties,
  &_swigt__p_dai__GraphAL,
  &_swigt__p_dai__HAK,
  &_swigt__p_dai__HAK__Properties,
  &_swigt__p_dai__IndexFor,
  &_swigt__p_dai__InfAlg,
  &_swigt__p_dai__JTree,
  &_swigt__p_dai__JTree__Properties,
  &_swigt__p_dai__LC,
  &_swigt__p_dai__LC__Properties,
  &_swigt__p_dai__MF,
  &_swigt__p_dai__MF__Properties,
  &_swigt__p_dai__MR,
  &_swigt__p_dai__MR__Properties,
  &_swigt__p_dai__Neighbor,
  &_swigt__p_dai__Permute,
  &_swigt__p_dai__ProbDistType,
  &_swigt__p_dai__ProbNormType,
  &_swigt__p_dai__PropertySet,
  &_swigt__p_dai__Region,
  &_swigt__p_dai__RegionGraph,
  &_swigt__p_dai__SmallSetT_dai__Var_t,
  &_swigt__p_dai__SmallSetT_size_t_t,
  &_swigt__p_dai__State,
  &_swigt__p_dai__TFactorT_double_t,
  &_swigt__p_dai__TProbT_double_t,
  &_swigt__p_dai__TRWBP,
  &_swigt__p_dai__TreeEP,
  &_swigt__p_dai__TreeEP__Properties,
  &_swigt__p_dai__Var,
  &_swigt__p_dai__VarSet,
  &_swigt__p_dai__greedyVariableElimination,
  &_swigt__p_dai__multifor,
  &_swigt__p_dai__sequentialVariableElimination,
  &_swigt__p_difference_type,
  &_swigt__p_double,
  &_swigt__p_f_r_q_const__dai__ClusterGraph_size_t__size_t,
  &_swigt__p_first_type,
  &_swigt__p_iterator,
  &_swigt__p_mpz_class,
  &_swigt__p_reverse_iterator,
  &_swigt__p_second_type,
  &_swigt__p_size_t,
  &_swigt__p_size_type,
  &_swigt__p_std__allocatorT_dai__TFactorT_dai__Real_t_t,
  &_swigt__p_std__allocatorT_size_t_t,
  &_swigt__p_std__allocatorT_std__vectorT_dai__Factor_std__allocatorT_dai__Factor_t_t_t,
  &_swigt__p_std__mapT_dai__Var_size_t_t,
  &_swigt__p_std__mapT_dai__Var_size_t_t__const_iterator,
  &_swigt__p_std__mapT_int_size_t_t,
  &_swigt__p_std__mapT_size_t_dai__TFactorT_double_t_t,
  &_swigt__p_std__mapT_std__string_dai__InfAlg_p_t,
  &_swigt__p_std__mapT_std__string_std__string_t,
  &_swigt__p_std__ostream,
  &_swigt__p_std__pairT_size_t_double_t,
  &_swigt__p_std__pairT_size_t_mpz_t,
  &_swigt__p_std__pairT_size_t_size_t_t,
  &_swigt__p_std__pairT_std__string_boost__any_t,
  &_swigt__p_std__pairT_std__string_dai__PropertySet_t,
  &_swigt__p_std__setT_dai__SmallSetT_size_t_t_t,
  &_swigt__p_std__setT_size_t_t,
  &_swigt__p_std__setT_std__string_t,
  &_swigt__p_std__string,
  &_swigt__p_std__vectorT_dai__Neighbor_std__allocatorT_dai__Neighbor_t_t,
  &_swigt__p_std__vectorT_dai__Region_std__allocatorT_dai__Region_t_t,
  &_swigt__p_std__vectorT_dai__SmallSetT_size_t_t_std__allocatorT_dai__SmallSetT_size_t_t_t_t,
  &_swigt__p_std__vectorT_dai__TFactorT_dai__Real_t_std__allocatorT_dai__TFactorT_dai__Real_t_t_t,
  &_swigt__p_std__vectorT_dai__VarSet_std__allocatorT_dai__VarSet_t_t,
  &_swigt__p_std__vectorT_dai__Var_std__allocatorT_dai__Var_t_t,
  &_swigt__p_std__vectorT_dai__Var_std__allocatorT_dai__Var_t_t__const_iterator,
  &_swigt__p_std__vectorT_dai__Var_std__allocatorT_dai__Var_t_t__const_reverse_iterator,
  &_swigt__p_std__vectorT_dai__Var_std__allocatorT_dai__Var_t_t__iterator,
  &_swigt__p_std__vectorT_dai__Var_std__allocatorT_dai__Var_t_t__reverse_iterator,
  &_swigt__p_std__vectorT_dai__Var_std__allocatorT_dai__Var_t_t__size_type,
  &_swigt__p_std__vectorT_double_std__allocatorT_double_t_t,
  &_swigt__p_std__vectorT_double_std__allocatorT_double_t_t__const_iterator,
  &_swigt__p_std__vectorT_double_std__allocatorT_double_t_t__const_reverse_iterator,
  &_swigt__p_std__vectorT_double_std__allocatorT_double_t_t__iterator,
  &_swigt__p_std__vectorT_double_std__allocatorT_double_t_t__reverse_iterator,
  &_swigt__p_std__vectorT_size_t_std__allocatorT_size_t_t_t,
  &_swigt__p_std__vectorT_std__pairT_size_t_size_t_t_std__allocatorT_std__pairT_size_t_size_t_t_t_t,
  &_swigt__p_std__vectorT_std__string_std__allocatorT_std__string_t_t,
  &_swigt__p_std__vectorT_std__vectorT_dai__Factor_std__allocatorT_dai__Factor_t_t_std__allocatorT_std__vectorT_dai__Factor_std__allocatorT_dai__Factor_t_t_t_t,
  &_swigt__p_swig__OctSwigIterator,
  &_swigt__p_this_type,
  &_swigt__p_value_type,
};

static swig_cast_info _swigc__p_BBPCostFunction[] = {  {&_swigt__p_BBPCostFunction, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_RootedTree[] = {  {&_swigt__p_RootedTree, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_allocator_type[] = {  {&_swigt__p_allocator_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_bool[] = {  {&_swigt__p_bool, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__any[] = {  {&_swigt__p_boost__any, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_char[] = {  {&_swigt__p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_const_iterator[] = {  {&_swigt__p_const_iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_const_reverse_iterator[] = {  {&_swigt__p_const_reverse_iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_container_type[] = {  {&_swigt__p_container_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dai__BP[] = {  {&_swigt__p_dai__BP, 0, 0, 0},  {&_swigt__p_dai__TRWBP, _p_dai__TRWBPTo_p_dai__BP, 0, 0},  {&_swigt__p_dai__FBP, _p_dai__FBPTo_p_dai__BP, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dai__BP__Properties[] = {  {&_swigt__p_dai__BP__Properties, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dai__BipartiteGraph[] = {  {&_swigt__p_dai__BipartiteGraph, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dai__CBP[] = {  {&_swigt__p_dai__CBP, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dai__CBP__Properties[] = {  {&_swigt__p_dai__CBP__Properties, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dai__ClusterGraph[] = {  {&_swigt__p_dai__ClusterGraph, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dai__Cobweb[] = {  {&_swigt__p_dai__Cobweb, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dai__DAIAlgT_CobwebGraph_t[] = {  {&_swigt__p_dai__DAIAlgT_CobwebGraph_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dai__DAIAlgT_dai__FactorGraph_t[] = {  {&_swigt__p_dai__DAIAlgT_dai__FactorGraph_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dai__DAIAlgT_dai__RegionGraph_t[] = {  {&_swigt__p_dai__DAIAlgT_dai__RegionGraph_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dai__DecMAP[] = {  {&_swigt__p_dai__DecMAP, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dai__DecMAP__Properties[] = {  {&_swigt__p_dai__DecMAP__Properties, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dai__FBP[] = {  {&_swigt__p_dai__FBP, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dai__FRegion[] = {  {&_swigt__p_dai__FRegion, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dai__FactorGraph[] = {  {&_swigt__p_dai__RegionGraph, _p_dai__RegionGraphTo_p_dai__FactorGraph, 0, 0},  {&_swigt__p_dai__FactorGraph, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dai__GLC[] = {  {&_swigt__p_dai__GLC, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dai__GLC__Properties[] = {  {&_swigt__p_dai__GLC__Properties, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dai__Gibbs[] = {  {&_swigt__p_dai__Gibbs, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dai__Gibbs__Properties[] = {  {&_swigt__p_dai__Gibbs__Properties, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dai__GraphAL[] = {  {&_swigt__p_dai__GraphAL, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dai__HAK[] = {  {&_swigt__p_dai__HAK, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dai__HAK__Properties[] = {  {&_swigt__p_dai__HAK__Properties, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dai__IndexFor[] = {  {&_swigt__p_dai__IndexFor, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dai__InfAlg[] = {  {&_swigt__p_dai__InfAlg, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dai__JTree[] = {  {&_swigt__p_dai__TreeEP, _p_dai__TreeEPTo_p_dai__JTree, 0, 0},  {&_swigt__p_dai__JTree, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dai__JTree__Properties[] = {  {&_swigt__p_dai__JTree__Properties, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dai__LC[] = {  {&_swigt__p_dai__LC, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dai__LC__Properties[] = {  {&_swigt__p_dai__LC__Properties, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dai__MF[] = {  {&_swigt__p_dai__MF, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dai__MF__Properties[] = {  {&_swigt__p_dai__MF__Properties, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dai__MR[] = {  {&_swigt__p_dai__MR, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dai__MR__Properties[] = {  {&_swigt__p_dai__MR__Properties, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dai__Neighbor[] = {  {&_swigt__p_dai__Neighbor, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dai__Permute[] = {  {&_swigt__p_dai__Permute, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dai__ProbDistType[] = {  {&_swigt__p_dai__ProbDistType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dai__ProbNormType[] = {  {&_swigt__p_dai__ProbNormType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dai__PropertySet[] = {  {&_swigt__p_dai__PropertySet, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dai__Region[] = {  {&_swigt__p_dai__Region, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dai__RegionGraph[] = {  {&_swigt__p_dai__RegionGraph, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dai__SmallSetT_dai__Var_t[] = {  {&_swigt__p_dai__SmallSetT_dai__Var_t, 0, 0, 0},  {&_swigt__p_dai__VarSet, _p_dai__VarSetTo_p_dai__SmallSetT_dai__Var_t, 0, 0},  {&_swigt__p_dai__Region, _p_dai__RegionTo_p_dai__SmallSetT_dai__Var_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dai__SmallSetT_size_t_t[] = {  {&_swigt__p_dai__SmallSetT_size_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dai__State[] = {  {&_swigt__p_dai__State, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dai__TFactorT_double_t[] = {  {&_swigt__p_dai__TFactorT_double_t, 0, 0, 0},  {&_swigt__p_dai__FRegion, _p_dai__FRegionTo_p_dai__TFactorT_double_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dai__TProbT_double_t[] = {  {&_swigt__p_dai__TProbT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dai__TRWBP[] = {  {&_swigt__p_dai__TRWBP, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dai__TreeEP[] = {  {&_swigt__p_dai__TreeEP, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dai__TreeEP__Properties[] = {  {&_swigt__p_dai__TreeEP__Properties, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dai__Var[] = {  {&_swigt__p_dai__Var, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dai__VarSet[] = {  {&_swigt__p_dai__VarSet, 0, 0, 0},  {&_swigt__p_dai__Region, _p_dai__RegionTo_p_dai__VarSet, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dai__greedyVariableElimination[] = {  {&_swigt__p_dai__greedyVariableElimination, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dai__multifor[] = {  {&_swigt__p_dai__multifor, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dai__sequentialVariableElimination[] = {  {&_swigt__p_dai__sequentialVariableElimination, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_difference_type[] = {  {&_swigt__p_difference_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_double[] = {  {&_swigt__p_double, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_r_q_const__dai__ClusterGraph_size_t__size_t[] = {  {&_swigt__p_f_r_q_const__dai__ClusterGraph_size_t__size_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_first_type[] = {  {&_swigt__p_first_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iterator[] = {  {&_swigt__p_iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mpz_class[] = {  {&_swigt__p_mpz_class, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_reverse_iterator[] = {  {&_swigt__p_reverse_iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_second_type[] = {  {&_swigt__p_second_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_size_t[] = {  {&_swigt__p_size_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_size_type[] = {  {&_swigt__p_size_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_dai__TFactorT_dai__Real_t_t[] = {  {&_swigt__p_std__allocatorT_dai__TFactorT_dai__Real_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_size_t_t[] = {  {&_swigt__p_std__allocatorT_size_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_std__vectorT_dai__Factor_std__allocatorT_dai__Factor_t_t_t[] = {  {&_swigt__p_std__allocatorT_std__vectorT_dai__Factor_std__allocatorT_dai__Factor_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__mapT_dai__Var_size_t_t[] = {  {&_swigt__p_std__mapT_dai__Var_size_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__mapT_dai__Var_size_t_t__const_iterator[] = {  {&_swigt__p_std__mapT_dai__Var_size_t_t__const_iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__mapT_int_size_t_t[] = {  {&_swigt__p_std__mapT_int_size_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__mapT_size_t_dai__TFactorT_double_t_t[] = {  {&_swigt__p_std__mapT_size_t_dai__TFactorT_double_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__mapT_std__string_dai__InfAlg_p_t[] = {  {&_swigt__p_std__mapT_std__string_dai__InfAlg_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__mapT_std__string_std__string_t[] = {  {&_swigt__p_std__mapT_std__string_std__string_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__ostream[] = {  {&_swigt__p_std__ostream, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__pairT_size_t_double_t[] = {  {&_swigt__p_std__pairT_size_t_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__pairT_size_t_mpz_t[] = {  {&_swigt__p_std__pairT_size_t_mpz_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__pairT_size_t_size_t_t[] = {  {&_swigt__p_std__pairT_size_t_size_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__pairT_std__string_boost__any_t[] = {  {&_swigt__p_std__pairT_std__string_boost__any_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__pairT_std__string_dai__PropertySet_t[] = {  {&_swigt__p_std__pairT_std__string_dai__PropertySet_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__setT_dai__SmallSetT_size_t_t_t[] = {  {&_swigt__p_std__setT_dai__SmallSetT_size_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__setT_size_t_t[] = {  {&_swigt__p_std__setT_size_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__setT_std__string_t[] = {  {&_swigt__p_std__setT_std__string_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__string[] = {  {&_swigt__p_std__string, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_dai__Neighbor_std__allocatorT_dai__Neighbor_t_t[] = {  {&_swigt__p_std__vectorT_dai__Neighbor_std__allocatorT_dai__Neighbor_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_dai__Region_std__allocatorT_dai__Region_t_t[] = {  {&_swigt__p_std__vectorT_dai__Region_std__allocatorT_dai__Region_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_dai__SmallSetT_size_t_t_std__allocatorT_dai__SmallSetT_size_t_t_t_t[] = {  {&_swigt__p_std__vectorT_dai__SmallSetT_size_t_t_std__allocatorT_dai__SmallSetT_size_t_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_dai__TFactorT_dai__Real_t_std__allocatorT_dai__TFactorT_dai__Real_t_t_t[] = {  {&_swigt__p_std__vectorT_dai__TFactorT_dai__Real_t_std__allocatorT_dai__TFactorT_dai__Real_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_dai__VarSet_std__allocatorT_dai__VarSet_t_t[] = {  {&_swigt__p_std__vectorT_dai__VarSet_std__allocatorT_dai__VarSet_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_dai__Var_std__allocatorT_dai__Var_t_t[] = {  {&_swigt__p_std__vectorT_dai__Var_std__allocatorT_dai__Var_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_dai__Var_std__allocatorT_dai__Var_t_t__const_iterator[] = {  {&_swigt__p_std__vectorT_dai__Var_std__allocatorT_dai__Var_t_t__const_iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_dai__Var_std__allocatorT_dai__Var_t_t__const_reverse_iterator[] = {  {&_swigt__p_std__vectorT_dai__Var_std__allocatorT_dai__Var_t_t__const_reverse_iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_dai__Var_std__allocatorT_dai__Var_t_t__iterator[] = {  {&_swigt__p_std__vectorT_dai__Var_std__allocatorT_dai__Var_t_t__iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_dai__Var_std__allocatorT_dai__Var_t_t__reverse_iterator[] = {  {&_swigt__p_std__vectorT_dai__Var_std__allocatorT_dai__Var_t_t__reverse_iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_dai__Var_std__allocatorT_dai__Var_t_t__size_type[] = {  {&_swigt__p_std__vectorT_dai__Var_std__allocatorT_dai__Var_t_t__size_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_double_std__allocatorT_double_t_t[] = {  {&_swigt__p_std__vectorT_double_std__allocatorT_double_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_double_std__allocatorT_double_t_t__const_iterator[] = {  {&_swigt__p_std__vectorT_double_std__allocatorT_double_t_t__const_iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_double_std__allocatorT_double_t_t__const_reverse_iterator[] = {  {&_swigt__p_std__vectorT_double_std__allocatorT_double_t_t__const_reverse_iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_double_std__allocatorT_double_t_t__iterator[] = {  {&_swigt__p_std__vectorT_double_std__allocatorT_double_t_t__iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_double_std__allocatorT_double_t_t__reverse_iterator[] = {  {&_swigt__p_std__vectorT_double_std__allocatorT_double_t_t__reverse_iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_size_t_std__allocatorT_size_t_t_t[] = {  {&_swigt__p_std__vectorT_size_t_std__allocatorT_size_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__pairT_size_t_size_t_t_std__allocatorT_std__pairT_size_t_size_t_t_t_t[] = {  {&_swigt__p_std__vectorT_std__pairT_size_t_size_t_t_std__allocatorT_std__pairT_size_t_size_t_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__string_std__allocatorT_std__string_t_t[] = {  {&_swigt__p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__vectorT_dai__Factor_std__allocatorT_dai__Factor_t_t_std__allocatorT_std__vectorT_dai__Factor_std__allocatorT_dai__Factor_t_t_t_t[] = {  {&_swigt__p_std__vectorT_std__vectorT_dai__Factor_std__allocatorT_dai__Factor_t_t_std__allocatorT_std__vectorT_dai__Factor_std__allocatorT_dai__Factor_t_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_swig__OctSwigIterator[] = {  {&_swigt__p_swig__OctSwigIterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_this_type[] = {  {&_swigt__p_this_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_value_type[] = {  {&_swigt__p_value_type, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_BBPCostFunction,
  _swigc__p_RootedTree,
  _swigc__p_allocator_type,
  _swigc__p_bool,
  _swigc__p_boost__any,
  _swigc__p_char,
  _swigc__p_const_iterator,
  _swigc__p_const_reverse_iterator,
  _swigc__p_container_type,
  _swigc__p_dai__BP,
  _swigc__p_dai__BP__Properties,
  _swigc__p_dai__BipartiteGraph,
  _swigc__p_dai__CBP,
  _swigc__p_dai__CBP__Properties,
  _swigc__p_dai__ClusterGraph,
  _swigc__p_dai__Cobweb,
  _swigc__p_dai__DAIAlgT_CobwebGraph_t,
  _swigc__p_dai__DAIAlgT_dai__FactorGraph_t,
  _swigc__p_dai__DAIAlgT_dai__RegionGraph_t,
  _swigc__p_dai__DecMAP,
  _swigc__p_dai__DecMAP__Properties,
  _swigc__p_dai__FBP,
  _swigc__p_dai__FRegion,
  _swigc__p_dai__FactorGraph,
  _swigc__p_dai__GLC,
  _swigc__p_dai__GLC__Properties,
  _swigc__p_dai__Gibbs,
  _swigc__p_dai__Gibbs__Properties,
  _swigc__p_dai__GraphAL,
  _swigc__p_dai__HAK,
  _swigc__p_dai__HAK__Properties,
  _swigc__p_dai__IndexFor,
  _swigc__p_dai__InfAlg,
  _swigc__p_dai__JTree,
  _swigc__p_dai__JTree__Properties,
  _swigc__p_dai__LC,
  _swigc__p_dai__LC__Properties,
  _swigc__p_dai__MF,
  _swigc__p_dai__MF__Properties,
  _swigc__p_dai__MR,
  _swigc__p_dai__MR__Properties,
  _swigc__p_dai__Neighbor,
  _swigc__p_dai__Permute,
  _swigc__p_dai__ProbDistType,
  _swigc__p_dai__ProbNormType,
  _swigc__p_dai__PropertySet,
  _swigc__p_dai__Region,
  _swigc__p_dai__RegionGraph,
  _swigc__p_dai__SmallSetT_dai__Var_t,
  _swigc__p_dai__SmallSetT_size_t_t,
  _swigc__p_dai__State,
  _swigc__p_dai__TFactorT_double_t,
  _swigc__p_dai__TProbT_double_t,
  _swigc__p_dai__TRWBP,
  _swigc__p_dai__TreeEP,
  _swigc__p_dai__TreeEP__Properties,
  _swigc__p_dai__Var,
  _swigc__p_dai__VarSet,
  _swigc__p_dai__greedyVariableElimination,
  _swigc__p_dai__multifor,
  _swigc__p_dai__sequentialVariableElimination,
  _swigc__p_difference_type,
  _swigc__p_double,
  _swigc__p_f_r_q_const__dai__ClusterGraph_size_t__size_t,
  _swigc__p_first_type,
  _swigc__p_iterator,
  _swigc__p_mpz_class,
  _swigc__p_reverse_iterator,
  _swigc__p_second_type,
  _swigc__p_size_t,
  _swigc__p_size_type,
  _swigc__p_std__allocatorT_dai__TFactorT_dai__Real_t_t,
  _swigc__p_std__allocatorT_size_t_t,
  _swigc__p_std__allocatorT_std__vectorT_dai__Factor_std__allocatorT_dai__Factor_t_t_t,
  _swigc__p_std__mapT_dai__Var_size_t_t,
  _swigc__p_std__mapT_dai__Var_size_t_t__const_iterator,
  _swigc__p_std__mapT_int_size_t_t,
  _swigc__p_std__mapT_size_t_dai__TFactorT_double_t_t,
  _swigc__p_std__mapT_std__string_dai__InfAlg_p_t,
  _swigc__p_std__mapT_std__string_std__string_t,
  _swigc__p_std__ostream,
  _swigc__p_std__pairT_size_t_double_t,
  _swigc__p_std__pairT_size_t_mpz_t,
  _swigc__p_std__pairT_size_t_size_t_t,
  _swigc__p_std__pairT_std__string_boost__any_t,
  _swigc__p_std__pairT_std__string_dai__PropertySet_t,
  _swigc__p_std__setT_dai__SmallSetT_size_t_t_t,
  _swigc__p_std__setT_size_t_t,
  _swigc__p_std__setT_std__string_t,
  _swigc__p_std__string,
  _swigc__p_std__vectorT_dai__Neighbor_std__allocatorT_dai__Neighbor_t_t,
  _swigc__p_std__vectorT_dai__Region_std__allocatorT_dai__Region_t_t,
  _swigc__p_std__vectorT_dai__SmallSetT_size_t_t_std__allocatorT_dai__SmallSetT_size_t_t_t_t,
  _swigc__p_std__vectorT_dai__TFactorT_dai__Real_t_std__allocatorT_dai__TFactorT_dai__Real_t_t_t,
  _swigc__p_std__vectorT_dai__VarSet_std__allocatorT_dai__VarSet_t_t,
  _swigc__p_std__vectorT_dai__Var_std__allocatorT_dai__Var_t_t,
  _swigc__p_std__vectorT_dai__Var_std__allocatorT_dai__Var_t_t__const_iterator,
  _swigc__p_std__vectorT_dai__Var_std__allocatorT_dai__Var_t_t__const_reverse_iterator,
  _swigc__p_std__vectorT_dai__Var_std__allocatorT_dai__Var_t_t__iterator,
  _swigc__p_std__vectorT_dai__Var_std__allocatorT_dai__Var_t_t__reverse_iterator,
  _swigc__p_std__vectorT_dai__Var_std__allocatorT_dai__Var_t_t__size_type,
  _swigc__p_std__vectorT_double_std__allocatorT_double_t_t,
  _swigc__p_std__vectorT_double_std__allocatorT_double_t_t__const_iterator,
  _swigc__p_std__vectorT_double_std__allocatorT_double_t_t__const_reverse_iterator,
  _swigc__p_std__vectorT_double_std__allocatorT_double_t_t__iterator,
  _swigc__p_std__vectorT_double_std__allocatorT_double_t_t__reverse_iterator,
  _swigc__p_std__vectorT_size_t_std__allocatorT_size_t_t_t,
  _swigc__p_std__vectorT_std__pairT_size_t_size_t_t_std__allocatorT_std__pairT_size_t_size_t_t_t_t,
  _swigc__p_std__vectorT_std__string_std__allocatorT_std__string_t_t,
  _swigc__p_std__vectorT_std__vectorT_dai__Factor_std__allocatorT_dai__Factor_t_t_std__allocatorT_std__vectorT_dai__Factor_std__allocatorT_dai__Factor_t_t_t_t,
  _swigc__p_swig__OctSwigIterator,
  _swigc__p_this_type,
  _swigc__p_value_type,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic
 * memory is used. Also, since swig_type_info structures store pointers to
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization.
 * The idea is that swig generates all the structures that are needed.
 * The runtime then collects these partially filled structures.
 * The SWIG_InitializeModule function takes these initial arrays out of
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned statically to an initial
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded.
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif


SWIGRUNTIME void
SWIG_InitializeModule(void *clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int init;

  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }

  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    iter=module_head;
    do {
      if (iter==&swig_module) {
        /* Our module is already in the list, so there's nothing more to do. */
        return;
      }
      iter=iter->next;
    } while (iter!= module_head);

    /* otherwise we must add our module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }

  /* When multiple interpreters are used, a module could have already been initialized in
     a different interpreter, but not yet have a pointer in this interpreter.
     In this case, we do not want to continue adding types... everything should be
     set up already */
  if (init == 0) return;

  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %d\n", swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;

#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
#endif

    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
	type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }

    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {

      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
	if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
	if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
	  printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
	  cast->type = ret;
	  ret = 0;
	} else {
	  /* Check for casting already in the list */
	  swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
	  if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
	  if (!ocast) ret = 0;
	}
      }

      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
	printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;

#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
  printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;

  if (init_run) return;
  init_run = 1;

  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
            SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{ /* c-mode */
#endif
}
#endif



static bool SWIG_init_user(octave_swig_type* module_ns);

SWIGINTERN bool SWIG_Octave_LoadModule(std::string name) {
  bool retn = false;
  {
#if SWIG_OCTAVE_PREREQ(4,2,0)
    octave::unwind_protect frame;
    frame.protect_var(discard_error_messages);          discard_error_messages = true;
    frame.protect_var(discard_warning_messages);        discard_warning_messages = true;
#elif SWIG_OCTAVE_PREREQ(3,3,50)
    unwind_protect frame;
    frame.protect_var(error_state);                     error_state = 0;
    frame.protect_var(warning_state);                   warning_state = 0;
    frame.protect_var(discard_error_messages);          discard_error_messages = true;
    frame.protect_var(discard_warning_messages);        discard_warning_messages = true;
#else
    unwind_protect::begin_frame("SWIG_Octave_LoadModule");
    unwind_protect_int(error_state);                    error_state = 0;
    unwind_protect_int(warning_state);                  warning_state = 0;
    unwind_protect_bool(discard_error_messages);        discard_error_messages = true;
    unwind_protect_bool(discard_warning_messages);      discard_warning_messages = true;
#endif
#if SWIG_OCTAVE_PREREQ(4,2,0)
    try {
      feval(name, octave_value_list(), 0);
      retn = true;
    } catch (octave::execution_exception&) { }
#else
    feval(name, octave_value_list(), 0);
    retn = (error_state == 0);
#endif
#if !SWIG_OCTAVE_PREREQ(3,3,50)
    unwind_protect::run_frame("SWIG_Octave_LoadModule");
#endif
  }
  if (!retn) {
    error(SWIG_name_d ": could not load module `%s'", name.c_str());
  }
  return retn;
}

SWIGINTERN bool SWIG_Octave_InstallFunction(octave_function *octloadfcn, std::string name) {
  bool retn = false;
  {
#if SWIG_OCTAVE_PREREQ(4,2,0)
    octave::unwind_protect frame;
    frame.protect_var(discard_error_messages);          discard_error_messages = true;
    frame.protect_var(discard_warning_messages);        discard_warning_messages = true;
#elif SWIG_OCTAVE_PREREQ(3,3,50)
    unwind_protect frame;
    frame.protect_var(error_state);                     error_state = 0;
    frame.protect_var(warning_state);                   warning_state = 0;
    frame.protect_var(discard_error_messages);          discard_error_messages = true;
    frame.protect_var(discard_warning_messages);        discard_warning_messages = true;
#else
    unwind_protect::begin_frame("SWIG_Octave_LoadModule");
    unwind_protect_int(error_state);                    error_state = 0;
    unwind_protect_int(warning_state);                  warning_state = 0;
    unwind_protect_bool(discard_error_messages);        discard_error_messages = true;
    unwind_protect_bool(discard_warning_messages);      discard_warning_messages = true;
#endif
    octave_value_list args;
    args.append(name);
    args.append(octloadfcn->fcn_file_name());
#if SWIG_OCTAVE_PREREQ(4,2,0)
    try {
      feval("autoload", args, 0);
      retn = true;
    } catch (octave::execution_exception&) { }
#else
    feval("autoload", args, 0);
    retn = (error_state == 0);
#endif
#if !SWIG_OCTAVE_PREREQ(3,3,50)
    unwind_protect::run_frame("SWIG_Octave_InstallFunction");
#endif
  }
  if (!retn) {
    error(SWIG_name_d ": could not load function `%s'", name.c_str());
  }
  return retn;
}

static const char *const subclass_usage = "-*- texinfo -*- \n\
@deftypefn {Loadable Function} {} subclass()\n\
@deftypefnx{Loadable Function} {} subclass(@var{swigclass}, @var{name}, @var{fcn}, @dots{})\n\
Subclass a C++ class from within Octave, and provide implementations of its virtual methods.\n\
\n\
See the SWIG manual for usage examples.\n\
@end deftypefn";

DEFUN_DLD( subclass, args, nargout, subclass_usage ) {
  octave_swig_type *top = new octave_swig_type;
  for (int j = 0; j < args.length(); ++j) {
    if (args(j).type_id() == octave_swig_ref::static_type_id()) {
      octave_swig_ref *osr = static_cast < octave_swig_ref *>(args(j).internal_rep());
      octave_swig_type *ost = osr->get_ptr();
      if (!ost->is_owned()) {
        error("subclass: cannot subclass object not constructed on octave side");
        return octave_value_list();
      }
      top->merge(*ost);
    } else if (args(j).is_function_handle()) {
      top->assign(args(j).fcn_handle_value()->fcn_name(), args(j));
    } else if (args(j).is_string()) {
      if (j + 1 >= args.length()) {
        error("subclass: member assignments must be of string,value form");
        return octave_value_list();
      }
      top->assign(args(j).string_value(), args(j + 1));
      ++j;
    } else {
      error("subclass: invalid arguments to subclass()");
      return octave_value_list();
    }
  }
  return octave_value(Swig::swig_value_ref(top));
}

static const char *const swig_type_usage = "-*- texinfo -*- \n\
@deftypefn {Loadable Function} {} swig_type(@var{swigref})\n\
Return the underlying C/C++ type name of a SWIG-wrapped object.\n\
@end deftypefn";

DEFUN_DLD( swig_type, args, nargout, swig_type_usage ) {
  if (args.length() != 1) {
    error("swig_type: must be called with only a single object");
    return octave_value_list();
  }
  octave_swig_type *ost = Swig::swig_value_deref(args(0));
  if (!ost) {
    error("swig_type: object is not a swig_ref");
    return octave_value_list();
  }
  return octave_value(ost->swig_type_name());
}

static const char *const swig_typequery_usage = "-*- texinfo -*- \n\
@deftypefn {Loadable Function} {} swig_typequery(@var{string})\n\
Return @var{string} if it is a recognised SWIG-wrapped C/C++ type name;\n\
otherwise return `<unknown>'.\n\
@end deftypefn";

DEFUN_DLD( swig_typequery, args, nargout, swig_typequery_usage ) {
  if (args.length() != 1 || !args(0).is_string()) {
    error("swig_typequery: must be called with single string argument");
    return octave_value_list();
  }
  swig_module_info *module = SWIG_GetModule(0);
  swig_type_info *type = SWIG_TypeQueryModule(module, module, args(0).string_value().c_str());
  if (!type)
    return octave_value("<unknown>");
  return octave_value(type->name);
}

static const char *const swig_this_usage = "-*- texinfo -*- \n\
@deftypefn {Loadable Function} {} swig_this(@var{swigref})\n\
Return the underlying C/C++ pointer of a SWIG-wrapped object.\n\
@end deftypefn";

DEFUN_DLD( swig_this, args, nargout, swig_this_usage ) {
  if (args.length() != 1) {
    error("swig_this: must be called with only a single object");
    return octave_value_list();
  }
  if (args(0).is_matrix_type() && args(0).rows() == 0 && args(0).columns() == 0)
    return octave_value(octave_uint64(0));
  octave_swig_type *ost = Swig::swig_value_deref(args(0));
  if (!ost) {
    error("swig_this: object is not a swig_ref");
    return octave_value_list();
  }
  return octave_value(octave_uint64((unsigned long long) ost->swig_this()));
}

static const char *const swig_octave_prereq_usage = "-*- texinfo -*- \n\
@deftypefn {Loadable Function} {} swig_octave_prereq(@var{major}, @var{minor}, @var{patch})\n\
Return true if the version of Octave is at least @var{major}.@var{minor}.@var{patch}.\n\
@end deftypefn";

DEFUN_DLD( swig_octave_prereq, args, nargout, swig_octave_prereq_usage ) {
  if (args.length() != 3) {
    error("swig_octave_prereq: must be called with 3 arguments");
    return octave_value_list();
  }
  const int major = args(0).int_value();
  const int minor = args(1).int_value();
  const int patch = args(2).int_value();
  const bool prereq = SWIG_OCTAVE_PREREQ(major, minor, patch);
  return octave_value(prereq);
}

static const char *const SWIG_name_usage = "-*- texinfo -*- \n\
@deftypefn {Loadable Module} {} " SWIG_name_d "\n\
Loads the SWIG-generated module `" SWIG_name_d "'.\n\
@end deftypefn";

DEFUN_DLD( SWIG_name, args, nargout, SWIG_name_usage ) {

  static octave_swig_type* module_ns = 0;

  // workaround to prevent octave seg-faulting on exit: set Octave exit function
  // octave_exit to _Exit, which exits immediately without trying to cleanup memory.
  // definitely affected version 3.2.*, not sure about 3.3.*, seems to be fixed in
  // version 3.4.*, but reappeared in 4.2.*, so turn on for all versions after 3.2.*.
  // can be turned off with macro definition.
#ifndef SWIG_OCTAVE_NO_SEGFAULT_HACK
#if SWIG_OCTAVE_PREREQ(3,2,0)
  octave_exit = ::_Exit;
#endif
#endif

  // check for no input and output args
  if (args.length() != 0 || nargout != 0) {
    print_usage();
    return octave_value_list();
  }

  // create module on first function call
  if (!module_ns) {

    // workaround bug in octave where installing global variable of custom type and then
    // exiting without explicitly clearing the variable causes octave to segfault.
#if SWIG_OCTAVE_PREREQ(3,2,0)
    octave_value_list eval_args;
    eval_args.append("base");
    eval_args.append("function __swig_atexit__; "
                     "  if mislocked() "
                     "    clear -all; "
                     "  else "
                     "    mlock(); "
                     "  endif; "
                     "endfunction; "
                     "__swig_atexit__; "
                     "atexit(\"__swig_atexit__\", false); "
                     "atexit(\"__swig_atexit__\")");
    feval("evalin", eval_args, 0);
#endif

    octave_swig_ref::register_type();
    octave_swig_packed::register_type();
    SWIG_InitializeModule(0);
    SWIG_PropagateClientData();

    octave_function *me = octave_call_stack::current();

    if (!SWIG_Octave_InstallFunction(me, "subclass")) {
      return octave_value_list();
    }
    if (!SWIG_Octave_InstallFunction(me, "swig_type")) {
      return octave_value_list();
    }
    if (!SWIG_Octave_InstallFunction(me, "swig_typequery")) {
      return octave_value_list();
    }
    if (!SWIG_Octave_InstallFunction(me, "swig_this")) {
      return octave_value_list();
    }
    if (!SWIG_Octave_InstallFunction(me, "swig_octave_prereq")) {
      return octave_value_list();
    }

    octave_swig_type* cvar_ns=0;
    if (std::string(SWIG_global_name) != ".") {
      cvar_ns=new octave_swig_type;
      for (int j=0;swig_globals[j].name;++j)
        if (swig_globals[j].get_method)
          cvar_ns->assign(swig_globals[j].name,&swig_globals[j]);
    }

    module_ns=new octave_swig_type(0, 0, 0, true);
    if (std::string(SWIG_global_name) != ".") {
      module_ns->assign(SWIG_global_name,Swig::swig_value_ref(cvar_ns));
    }
    else {
      for (int j=0;swig_globals[j].name;++j)
        if (swig_globals[j].get_method)
          module_ns->assign(swig_globals[j].name,&swig_globals[j]);
    }
    for (int j=0;swig_globals[j].name;++j)
      if (swig_globals[j].method)
        module_ns->assign(swig_globals[j].name,&swig_globals[j]);

    // * need better solution here; swig_type -> octave_class mapping is
    // * really n-to-1, in some cases such as template partial spec, etc.
    // * see failing tests.
    for (int j=0;swig_types[j];++j)
      if (swig_types[j]->clientdata) {
        swig_octave_class* c=(swig_octave_class*)swig_types[j]->clientdata;
        module_ns->assign(c->name,
                        Swig::swig_value_ref
                        (new octave_swig_type(0,swig_types[j])));
      }

    if (!SWIG_init_user(module_ns)) {
      delete module_ns;
      module_ns=0;
      return octave_value_list();
    }

    SWIG_InstallOps(octave_swig_ref::static_type_id());

    octave_swig_type::swig_member_const_iterator mb;
    for (mb = module_ns->swig_members_begin(); mb != module_ns->swig_members_end(); ++mb) {
      if (mb->second.first && mb->second.first->method) {
        if (!SWIG_Octave_InstallFunction(me, mb->first)) {
          return octave_value_list();
        }
      }
    }

#if !SWIG_OCTAVE_PREREQ(3,2,0)
    mlock(me->name());
#else
    mlock();
#endif

  }

  octave_swig_type::swig_member_const_iterator mb;
  for (mb = module_ns->swig_members_begin(); mb != module_ns->swig_members_end(); ++mb) {
    if (mb->second.second.is_defined()) {
      SWIG_Octave_SetGlobalValue(mb->first, mb->second.second);
      SWIG_Octave_LinkGlobalValue(mb->first);
    }
  }

  SWIG_Octave_SetGlobalValue(SWIG_name_d, module_ns->as_value());
  SWIG_Octave_LinkGlobalValue(SWIG_name_d);

  return octave_value_list();

}


static bool SWIG_init_user(octave_swig_type* module_ns)
{
  SWIG_Octave_SetConstant(module_ns,"NORMPROB",SWIG_From_int(static_cast< int >(dai::NORMPROB)));
  SWIG_Octave_SetConstant(module_ns,"NORMLINF",SWIG_From_int(static_cast< int >(dai::NORMLINF)));
  SWIG_Octave_SetConstant(module_ns,"DISTL1",SWIG_From_int(static_cast< int >(dai::DISTL1)));
  SWIG_Octave_SetConstant(module_ns,"DISTLINF",SWIG_From_int(static_cast< int >(dai::DISTLINF)));
  SWIG_Octave_SetConstant(module_ns,"DISTTV",SWIG_From_int(static_cast< int >(dai::DISTTV)));
  SWIG_Octave_SetConstant(module_ns,"DISTKL",SWIG_From_int(static_cast< int >(dai::DISTKL)));
  SWIG_Octave_SetConstant(module_ns,"DISTHEL",SWIG_From_int(static_cast< int >(dai::DISTHEL)));
  SWIG_Octave_SetConstant(module_ns,"eliminationCost_MinNeighbors",SWIG_NewFunctionPtrObj((void *)eliminationCost_MinNeighbors, SWIGTYPE_p_f_r_q_const__dai__ClusterGraph_size_t__size_t));
  SWIG_Octave_SetConstant(module_ns,"eliminationCost_MinWeight",SWIG_NewFunctionPtrObj((void *)eliminationCost_MinWeight, SWIGTYPE_p_f_r_q_const__dai__ClusterGraph_size_t__size_t));
  SWIG_Octave_SetConstant(module_ns,"eliminationCost_MinFill",SWIG_NewFunctionPtrObj((void *)eliminationCost_MinFill, SWIGTYPE_p_f_r_q_const__dai__ClusterGraph_size_t__size_t));
  SWIG_Octave_SetConstant(module_ns,"eliminationCost_WeightedMinFill",SWIG_NewFunctionPtrObj((void *)eliminationCost_WeightedMinFill, SWIGTYPE_p_f_r_q_const__dai__ClusterGraph_size_t__size_t));
  return true;
}

